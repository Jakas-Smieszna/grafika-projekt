#include<iostream>
#include<cstdlib>
#include<glad/glad.h>
#include<GLFW/glfw3.h>
#include<glm/glm.hpp>
#include<glm/gtc/matrix_transform.hpp>
#include<glm/gtc/type_ptr.hpp>
#include<glm/gtx/rotate_vector.hpp>
#include<glm/gtx/vector_angle.hpp>

//Teksturowo:
#include"Tekstury.h"
#include "mesh.h"
#include"stb/stb_image.h"
//
#include"shader.h"
#include"VAO.h"
#include"VBO.h"
#include"EBO.h"
#include"Kamera.h"
#include "terrainGenerator.h"
#include "helper/tsqueue.h"

// Teksturowo:
// Wierzcholki2
#include"Zegary.h"
#include"StatusGry.h"

//Teksturowo:
// POJAZD
GLfloat vertices[] =
{
	//Pozycja XYZ			Kolory						Wspolrzedne tekstury ze zrodla 2D	Normalne wektory
	
	//PRZEDNI LACZNIK
	//Front
	-0.5f, -0.5f,  7.5f,	1.0f, 0.5f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	-0.5f, 0.5f,  7.5f,		1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	 0.5f, 0.5f,  7.5f,		0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	 0.5f, -0.5f,  7.5f,	0.0f, 0.5f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	 //Tyl
	-0.5f, -0.5f, -7.5f,	0.0f, 0.5f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	-0.5f, 0.5f, -7.5f,		0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	 0.5f, 0.5f, -7.5f,		1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	 0.5f, -0.5f, -7.5f,	1.0f, 0.5f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	 //Lewo
	-0.5f, -0.5f,  7.5f,	1.0f, 0.5f, 0.0f,			0.0f, 0.8f,								-1.0f, 0.0f, 1.0f,
	-0.5f, 0.5f,  7.5f,		1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								-1.0f, 0.0f, 1.0f,
	-0.5f, 0.5f, -7.5f,		0.0f, 1.0f, 1.0f,			3.0f, 1.0f,								-1.0f, 0.0f, 1.0f,
	-0.5f, -0.5f, -7.5f,	0.0f, 0.5f, 1.0f,			3.0f, 0.8f,								-1.0f, 0.0f, 1.0f,
	//Prawo
	0.5f, -0.5f,  7.5f,		0.0f, 0.5f, 1.0f,			3.0f, 0.8f,								1.0f, 0.0f, 1.0f,
	0.5f, 0.5f,  7.5f,		0.0f, 1.0f, 1.0f,			3.0f, 1.0f,								1.0f, 0.0f, 1.0f,
	0.5f, 0.5f, -7.5f,		1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								1.0f, 0.0f, 1.0f,
	0.5f, -0.5f, -7.5f,		1.0f, 0.5f, 0.0f,			0.0f, 0.8f,								1.0f, 0.0f, 1.0f,
	//Dół
   -0.5f, -0.5f,  7.5f,		1.0f, 0.5f, 0.0f,			0.0f, 1.0f,								0.0f, -1.0f, -1.0f,
   -0.5f, -0.5f, -7.5f,		0.0f, 0.5f, 1.0f,			3.0f, 1.0f,								0.0f, -1.0f, -1.0f,
	0.5f, -0.5f, -7.5f,		1.0f, 0.5f, 0.0f,			3.0f, 0.8f,								0.0f, -1.0f, -1.0f,
	0.5f, -0.5f,  7.5f,		0.0f, 0.5f, 1.0f,			0.0f, 0.8f,								0.0f, -1.0f, -1.0f,
	//Góra
   -0.5f, 0.5f,  7.5f,		1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 1.0f, 1.0f,
   -0.5f, 0.5f, -7.5f,		0.0f, 1.0f, 1.0f,			3.0f, 1.0f,								0.0f, 1.0f, 1.0f,
	0.5f, 0.5f, -7.5f,		1.0f, 1.0f, 0.0f,			3.0f, 0.8f,								0.0f, 1.0f, 1.0f,
	0.5f, 0.5f,  7.5f,		0.0f, 1.0f, 1.0f,			0.0f, 0.8f,								0.0f, 1.0f, 1.0f,

	//CZUB
	//Gora
	 0.0f, 0.0f,  9.5f,		1.0f, 0.0f, 0.0f,			0.5f, 0.9f,								0.0f, 0.0f, 1.0f,
	-1.0f, 1.0f,  7.5f,		1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	 1.0f, 1.0f,  7.5f,		0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	 //Dol
	 0.0f, 0.0f,  9.5f,		1.0f, 0.0f, 0.0f,			0.5f, 0.9f,								0.0f, 0.0f, -1.0f,
	-1.0f, -1.0f, 7.5f,		1.0f, 1.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	 1.0f, -1.0f, 7.5f,		0.0f, 1.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	 //Lewo
	 0.0f, 0.0f,  9.5f,		1.0f, 0.0f, 0.0f,			0.5f, 0.9f,								0.0f, 0.0f, -1.0f,
	-1.0f, -1.0f,  7.5f,	1.0f, 1.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	-1.0f, 1.0f,  7.5f,		0.0f, 1.0f, 1.0f,			0.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	 //Prawo
	 0.0f, 0.0f,  9.5f,		1.0f, 0.0f, 0.0f,			0.5f, 0.9f,								0.0f, 0.0f, -1.0f,
	 1.0f, 1.0f,  7.5f,		1.0f, 1.0f, 0.0f,			1.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	 1.0f, -1.0f,  7.5f,	0.0f, 1.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	 //Trzon
	-1.0f, -1.0f,  7.5f,	1.0f, 1.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	-1.0f, 1.0f,  7.5f,		0.0f, 1.0f, 1.0f,			0.0f, 1.0f,								0.0f, 0.0f, 1.0f,
     1.0f, 1.0f,  7.5f,		1.0f, 1.0f, 0.0f,			1.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	 1.0f, -1.0f,  7.5f,	0.0f, 1.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, 1.0f,


	 //KORPUS1
	 //Front
	-0.8f, -0.75f,  -7.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	-0.8f, 0.75f,  -7.5f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	 0.8f, 0.75f,  -7.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	 0.8f, -0.75f,  -7.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	 //Tyl
	-1.2f, -1.0f, -9.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	-1.2f, 1.0f, -9.5f,		0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	 1.2f, 1.0f, -9.5f,		1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	 1.2f, -1.0f, -9.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	 //Lewo
	-0.8f, -0.75f, -7.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								-1.0f, 0.0f, 1.0f,
	-0.8f, 0.75f, -7.5f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								-1.0f, 0.0f, 1.0f,
	-1.2f, 1.0f, -9.5f,		0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								-1.0f, 0.0f, 1.0f,
	-1.2f, -1.0f, -9.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								-1.0f, 0.0f, 1.0f,
	//Prawo
	 0.8f, -0.75f,  -7.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								1.0f, 0.0f, 1.0f,
	 0.8f, 0.75f,  -7.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								1.0f, 0.0f, 1.0f,
	 1.2f, 1.0f, -9.5f,		1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								1.0f, 0.0f, 1.0f,
	 1.2f, -1.0f, -9.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								1.0f, 0.0f, 1.0f,
	 //Dół
   -0.8f, -0.75f, -7.5f,	1.0f, 0.0f, 0.0f,			0.17f, 0.8f,							0.0f, -1.0f, -1.0f,
   -1.2f, -1.0f, -9.5f,		0.0f, 0.0f, 1.0f,			0.0f, 1.0f,								0.0f, -1.0f, -1.0f,
	1.2f, -1.0f, -9.5f,		1.0f, 0.0f, 0.0f,			1.0f, 1.0f,								0.0f, -1.0f, -1.0f,
	0.8f, -0.75f, -7.5f,	0.0f, 0.0f, 1.0f,			0.83f, 0.8f,							0.0f, -1.0f, -1.0f,
	//Góra
   -0.8f, 0.75f, -7.5f,		1.0f, 1.0f, 0.0f,			0.0f, 0.8f,								0.0f, 1.0f, 1.0f,
   -1.2f, 1.0f, -9.5f,		0.0f, 1.0f, 1.0f,			0.0f, 1.0f,								0.0f, 1.0f, 1.0f,
	1.2f, 1.0f, -9.5f,		1.0f, 1.0f, 0.0f,			1.0f, 1.0f,								0.0f, 1.0f, 1.0f,
	0.8f, 0.75f, -7.5f,		0.0f, 1.0f, 1.0f,			1.0f, 0.8f,								0.0f, 1.0f, 1.0f,


	//KORPUS2
	 //Front
	-1.2f, -1.1f,  -9.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	-1.2f, 1.1f,  -9.5f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	 1.2f, 1.1f,  -9.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	 1.2f, -1.1f,  -9.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	 //Tyl
	-1.5f, -1.1f, -12.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	-1.5f, 1.1f, -12.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	 1.5f, 1.1f, -12.5f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	 1.5f, -1.1f, -12.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	 //Lewo
	-1.2f, -1.1f, -9.5f,	1.0f, 0.0f, 0.0f,			1.0f, 0.4f,								-1.0f, 0.0f, 1.0f,
	-1.2f, 1.1f, -9.5f,		1.0f, 1.0f, 0.0f,			1.0f, 0.6f,								-1.0f, 0.0f, 1.0f,
	-1.5f, 1.1f, -12.5f,	0.0f, 1.0f, 1.0f,			0.0f, 0.6f,								-1.0f, 0.0f, 1.0f,
	-1.5f, -1.1f, -12.5f,	0.0f, 0.0f, 1.0f,			0.0f, 0.4f,								-1.0f, 0.0f, 1.0f,
	//Prawo
	 1.2f, -1.1f,  -9.5f,	0.0f, 0.0f, 1.0f,			0.0f, 0.4f,								1.0f, 0.0f, 1.0f,
	 1.2f, 1.1f,  -9.5f,	0.0f, 1.0f, 1.0f,			0.0f, 0.6f,								1.0f, 0.0f, 1.0f,
	 1.5f, 1.1f, -12.5f,	1.0f, 1.0f, 0.0f,			1.0f, 0.6f,								1.0f, 0.0f, 1.0f,
	 1.5f, -1.1f, -12.5f,	1.0f, 0.0f, 0.0f,			1.0f, 0.4f,								1.0f, 0.0f, 1.0f,
	 //Dół
   -1.2f, -1.1f, -9.5f,		1.0f, 0.0f, 0.0f,			0.1f, 0.8f,								0.0f, -1.0f, -1.0f,
   -1.5f, -1.1f, -12.5f,	0.0f, 0.0f, 1.0f,			0.0f, 1.0f,								0.0f, -1.0f, -1.0f,
	1.5f, -1.1f, -12.5f,	1.0f, 0.0f, 0.0f,			1.0f, 1.0f,								0.0f, -1.0f, -1.0f,
	1.2f, -1.1f, -9.5f,		0.0f, 0.0f, 1.0f,			0.9f, 0.8f,								0.0f, -1.0f, -1.0f,
	//Góra
   -1.2f, 1.1f, -9.5f,		1.0f, 1.0f, 0.0f,			0.0f, 0.8f,								0.0f, 1.0f, 1.0f,
   -1.5f, 1.1f, -12.5f,		0.0f, 1.0f, 1.0f,			0.0f, 1.0f,								0.0f, 1.0f, 1.0f,
	1.5f, 1.1f, -12.5f,		1.0f, 1.0f, 0.0f,			1.0f, 1.0f,								0.0f, 1.0f, 1.0f,
	1.2f, 1.1f, -9.5f,		0.0f, 1.0f, 1.0f,			1.0f, 0.8f,								0.0f, 1.0f, 1.0f,


	//SIODLO1
	//Front
	-1.5f, -1.1f,  -12.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.0f,								0.0f, 0.0f, 1.0f,
	-1.5f, 0.9f,  -12.5f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	 1.5f, 0.9f,  -12.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	 1.5f, -1.1f,  -12.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.0f,								0.0f, 0.0f, 1.0f,
	 //Tyl
	-0.6f, -1.1f, -16.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.0f,								0.0f, 0.0f, -1.0f,
	-0.6f, 0.7f, -16.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	 0.6f, 0.7f, -16.5f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	 0.6f, -1.1f, -16.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.0f,								0.0f, 0.0f, -1.0f,
	 //Lewo
	-1.5f, -1.1f, -12.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								-1.0f, 0.0f, 1.0f,
	-1.5f, 0.9f, -12.5f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								-1.0f, 0.0f, 1.0f,
	-0.6f, 0.7f, -16.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								-1.0f, 0.0f, 1.0f,
	-0.6f, -1.1f, -16.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								-1.0f, 0.0f, 1.0f,
	//Prawo
	 1.5f, -1.1f,  -12.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								1.0f, 0.0f, 1.0f,
	 1.5f, 0.9f,  -12.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								1.0f, 0.0f, 1.0f,
	 0.6f, 0.7f, -16.5f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								1.0f, 0.0f, 1.0f,
	 0.6f, -1.1f, -16.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								1.0f, 0.0f, 1.0f,
	 //Dół
   -1.5f, -1.1f, -12.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, -1.0f, -1.0f,
   -0.6f, -1.1f, -16.5f,	0.0f, 0.0f, 1.0f,			0.3f, 1.0f,								0.0f, -1.0f, -1.0f,
	0.6f, -1.1f, -16.5f,	1.0f, 0.0f, 0.0f,			0.7f, 1.0f,								0.0f, -1.0f, -1.0f,
	1.5f, -1.1f, -12.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, -1.0f, -1.0f,
	//Góra
   -1.5f, 0.9f, -12.5f,		1.0f, 1.0f, 0.0f,			0.0f, 0.6f,								0.0f, 1.0f, 1.0f,
   -0.6f, 0.7f, -16.5f,		0.0f, 1.0f, 1.0f,			1.0f, 0.66f,							0.0f, 1.0f, 1.0f,
	0.6f, 0.7f, -16.5f,		1.0f, 1.0f, 0.0f,			1.0f, 0.74f,							0.0f, 1.0f, 1.0f,
	1.5f, 0.9f, -12.5f,		0.0f, 1.0f, 1.0f,			0.0f, 0.8f,								0.0f, 1.0f, 1.0f,


		//SIODLO2
	//Front
	-0.6f, -1.1f, -16.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.0f,								0.0f, 0.0f, 1.0f,
	-0.6f, 0.7f, -16.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	 0.6f, 0.7f, -16.5f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	 0.6f, -1.1f, -16.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.0f,								0.0f, 0.0f, 1.0f,
	 //Tyl
	-1.5f, -1.1f, -18.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.0f,								0.0f, 0.0f, -1.0f,
	-1.5f, 0.8f, -18.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	 1.5f, 0.8f, -18.5f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	 1.5f, -1.1f, -18.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.0f,								0.0f, 0.0f, -1.0f,
	 //Lewo
	-0.6f, -1.1f, -16.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								-1.0f, 0.0f, 1.0f,
	-0.6f, 0.7f, -16.5f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								-1.0f, 0.0f, 1.0f,
	-1.5f, 0.8f, -18.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								-1.0f, 0.0f, 1.0f,
	-1.5f, -1.1f, -18.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								-1.0f, 0.0f, 1.0f,
	//Prawo
	 0.6f, -1.1f,  -16.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								1.0f, 0.0f, 1.0f,
	 0.6f, 0.7f,  -16.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								1.0f, 0.0f, 1.0f,
	 1.5f, 0.8f, -18.5f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								1.0f, 0.0f, 1.0f,
	 1.5f, -1.1f, -18.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								1.0f, 0.0f, 1.0f,
	 //Dół
   -0.6f, -1.1f, -16.5f,	1.0f, 0.0f, 0.0f,			0.3f, 0.8f,								0.0f, -1.0f, -1.0f,
   -1.5f, -1.1f, -18.5f,	0.0f, 0.0f, 1.0f,			0.0f, 1.0f,								0.0f, -1.0f, -1.0f,
	1.5f, -1.1f, -18.5f,	1.0f, 0.0f, 0.0f,			1.0f, 1.0f,								0.0f, -1.0f, -1.0f,
	0.6f, -1.1f, -16.5f,	0.0f, 0.0f, 1.0f,			0.7f, 0.8f,								0.0f, -1.0f, -1.0f,
	//Góra
   -0.6f, 0.7f, -16.5f,		1.0f, 1.0f, 0.0f,			1.0f, 0.68f,							0.0f, 1.0f, 1.0f,
   -1.5f, 0.8f, -18.5f,		0.0f, 1.0f, 1.0f,			0.0f, 0.65f,							0.0f, 1.0f, 1.0f,
	1.5f, 0.8f, -18.5f,		1.0f, 1.0f, 0.0f,			0.0f, 0.75f,							0.0f, 1.0f, 1.0f,
	0.6f, 0.7f, -16.5f,		0.0f, 1.0f, 1.0f,			1.0f, 0.72f,							0.0f, 1.0f, 1.0f,


		//KORPUS3
	//Front
	-1.5f, -1.1f, -18.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.6f,								0.0f, 0.0f, 1.0f,
	-1.5f, 1.1f, -18.5f,	0.0f, 1.0f, 1.0f,			0.0f, 0.6f,								0.0f, 0.0f, 1.0f,
	 1.5f, 1.1f, -18.5f,	1.0f, 1.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	 1.5f, -1.1f, -18.5f,	1.0f, 0.0f, 0.0f,			1.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	 //Tyl
	-1.0f, -1.1f, -21.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	-1.3f, 1.6f, -21.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	 1.3f, 1.6f, -21.5f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	 1.0f, -1.1f, -21.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	 //Lewo
	-1.5f, -1.1f, -18.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								-1.0f, 0.0f, 1.0f,
	-1.5f, 1.1f, -18.5f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								-1.0f, 0.0f, 1.0f,
	-1.3f, 1.6f, -21.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								-1.0f, 0.0f, 1.0f,
	-1.0f, -1.1f, -21.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								-1.0f, 0.0f, 1.0f,
	//Prawo
	 1.5f, -1.1f,  -18.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								1.0f, 0.0f, -1.0f,
	 1.5f, 1.1f,  -18.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								1.0f, 0.0f, -1.0f,
	 1.3f, 1.6f, -21.5f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								1.0f, 0.0f, -1.0f,
	 1.0f, -1.1f, -21.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								1.0f, 0.0f, -1.0f,
	 //Dół
   -1.5f, -1.1f, -18.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, -1.0f, -1.0f,
   -1.0f, -1.1f, -21.5f,	0.0f, 0.0f, 1.0f,			0.17f, 1.0f,							0.0f, -1.0f, -1.0f,
	1.0f, -1.1f, -21.5f,	1.0f, 0.0f, 0.0f,			0.83f, 1.0f,							0.0f, -1.0f, -1.0f,
	1.5f, -1.1f, -18.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, -1.0f, -1.0f,
	//Góra
   -1.5f, 1.1f, -18.5f,		1.0f, 1.0f, 0.0f,			0.0f, 0.8f,								0.0f, 1.0f, 1.0f,
   -1.3f, 1.6f, -21.5f,		0.0f, 1.0f, 1.0f,			0.0f, 1.0f,								0.0f, 1.0f, 1.0f,
	1.3f, 1.6f, -21.5f,		1.0f, 1.0f, 0.0f,			1.0f, 1.0f,								0.0f, 1.0f, 1.0f,
	1.5f, 1.1f, -18.5f,		0.0f, 1.0f, 1.0f,			1.0f, 0.8f,								0.0f, 1.0f, 1.0f,


	//KORPUS4
	 //Tyl
	 0.0f, 0.9f, -19.5f,	1.0f, 0.0f, 0.0f,			0.5f, 0.3f,								0.0f, 0.0f, -1.0f,
	-0.6f, -0.1f, -25.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.2f,								0.0f, 0.0f, -1.0f,
	-1.1f, 0.9f, -25.5f,	0.0f, 1.0f, 1.0f,			1.0f, 0.3f,								0.0f, 0.0f, -1.0f,
	 1.1f, 0.9f, -25.5f,	1.0f, 1.0f, 0.0f,			0.0f, 0.3f,								0.0f, 0.0f, -1.0f,
	 0.6f, -0.1f, -25.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.2f,								0.0f, 0.0f, -1.0f,
	 -1.1f, 0.9f, -25.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.3f,								0.0f, 0.0f, -1.0f,
	-0.6f, 1.9f, -25.5f,	0.0f, 1.0f, 1.0f,			1.0f, 0.4f,								0.0f, 0.0f, -1.0f,
	 0.6f, 1.9f, -25.5f,	1.0f, 1.0f, 0.0f,			0.0f, 0.4f,								0.0f, 0.0f, -1.0f,
	 1.1f, 0.9f, -25.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.3f,								0.0f, 0.0f, -1.0f,

	/*-0.8f, -0.5f, -25.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.0f,								0.0f, 0.0f, -1.0f,
	-1.5f, 0.9f, -25.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	 1.5f, 0.9f, -25.5f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	 0.8f, -0.5f, -25.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.0f,								0.0f, 0.0f, -1.0f,
	 -1.5f, 0.9f, -25.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.0f,								0.0f, 0.0f, -1.0f,
	-0.8f, 2.3f, -25.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	 0.8f, 2.3f, -25.5f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	 1.5f, 0.9f, -25.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.0f,								0.0f, 0.0f, -1.0f,*/
	 //Lewo
	-0.8f, -0.5f, -19.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								-1.0f, 0.0f, -1.0f,
	-1.3f, 0.9f, -19.5f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								-1.0f, 0.0f, -1.0f,
	-1.5f, 0.9f, -25.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								-1.0f, 0.0f, -1.0f,
	-0.8f, -0.5f, -25.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								-1.0f, 0.0f, 1.0f,
	-1.3f, 0.9f, -19.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								-1.0f, 0.0f, -1.0f,
	-0.8f, 2.3f, -19.5f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								-1.0f, 0.0f, 1.0f,
	-0.8f, 2.3f, -25.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								-1.0f, 0.0f, 1.0f,
	-1.5f, 0.9f, -25.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								-1.0f, 0.0f, 1.0f,
	//Prawo
	 0.8f, -0.5f, -19.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								1.0f, 0.0f, 1.0f,
	1.3f, 0.9f, -19.5f,		1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								1.0f, 0.0f, -1.0f,
	1.5f, 0.9f, -25.5f,		0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								1.0f, 0.0f, -1.0f,
	0.8f, -0.5f, -25.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								1.0f, 0.0f, -1.0f,
	1.3f, 0.9f, -19.5f,		1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								1.0f, 0.0f, 1.0f,
	0.8f, 2.3f, -19.5f,		1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								1.0f, 0.0f, 1.0f,
	0.8f, 2.3f, -25.5f,		0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								1.0f, 0.0f, 1.0f,
	1.5f, 0.9f, -25.5f,		0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								1.0f, 0.0f, -1.0f,
	 //Dół
   -0.8f, -0.5f, -19.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, -1.0f, -1.0f,
   -0.8f, -0.5f, -25.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, -1.0f, -1.0f,
	0.8f, -0.5f, -25.5f,	1.0f, 0.0f, 0.0f,			1.0f, 1.0f,								0.0f, -1.0f, 1.0f,
	0.8f, -0.5f, -19.5f,	0.0f, 0.0f, 1.0f,			0.0f, 1.0f,								0.0f, -1.0f, -1.0f,
	//Góra
   -0.8f, 2.3f, -19.5f,		1.0f, 1.0f, 0.0f,			0.0f, 0.68f,							0.0f, 1.0f, 1.0f,
   -0.8f, 2.3f, -25.5f,		0.0f, 1.0f, 1.0f,			0.0f, 1.0f,								0.0f, 1.0f, 1.0f,
	0.8f, 2.3f, -25.5f,		1.0f, 1.0f, 0.0f,			0.6f, 1.0f,								0.0f, 1.0f, 1.0f,
	0.8f, 2.3f, -19.5f,		0.0f, 1.0f, 1.0f,			0.6f, 0.68f,							0.0f, 1.0f, 1.0f,


	//OPARCIE
	//Front
	-1.5f, 1.1f, -18.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.6f,								0.0f, 0.0f, 1.0f,
	-1.0f, 5.2f, -19.5f,	0.0f, 1.0f, 1.0f,			0.0f, 0.65f,							0.0f, 0.0f, -1.0f,
	 1.0f, 5.2f, -19.5f,	1.0f, 1.0f, 0.0f,			0.0f, 0.75f,							0.0f, 0.0f, -1.0f,
	 1.5f, 1.1f, -18.5f,	1.0f, 0.0f, 0.0f,			1.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	 //Tyl
	-1.4f, 1.2f, -20.0f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	-1.0f, 5.2f, -20.0f,	0.0f, 1.0f, 1.0f,			0.86f, 1.0f,							0.0f, 0.0f, -1.0f,
	 1.0f, 5.2f, -20.0f,	1.0f, 1.0f, 0.0f,			0.14f, 1.0f,							0.0f, 0.0f, -1.0f,
	 1.4f, 1.2f, -20.0f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	 //Lewo
	-1.5f, 1.1f, -18.5f,	1.0f, 0.0f, 0.0f,			0.5f, 0.8f,								-1.0f, 0.0f, -1.0f,
	-1.0f, 5.2f, -19.5f,	1.0f, 1.0f, 0.0f,			0.83f, 1.0f,							-1.0f, 0.0f, 1.0f,
	-1.0f, 5.2f, -20.0f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								-1.0f, 0.0f, 1.0f,
	-1.4f, 1.2f, -20.0f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								-1.0f, 0.0f, 1.0f,
	//Prawo
	 1.5f, 1.1f, -18.5f,	1.0f, 0.0f, 0.0f,			0.5f, 0.8f,								1.0f, 0.0f, 1.0f,
	1.0f, 5.2f, -19.5f,		1.0f, 1.0f, 0.0f,			0.83f, 1.0f,							1.0f, 0.0f, 1.0f,
	1.0f, 5.2f, -20.0f,		0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								1.0f, 0.0f, 1.0f,
	1.4f, 1.2f, -20.0f,		0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								1.0f, 0.0f, -1.0f,
	//Góra
   -1.0f, 5.2f, -19.5f,		1.0f, 1.0f, 0.0f,			0.0f, 0.8f,								0.0f, 1.0f, 1.0f,
   -1.0f, 5.2f, -20.0f,		0.0f, 1.0f, 1.0f,			0.0f, 1.0f,								0.0f, 1.0f, 1.0f,
	1.0f, 5.2f, -20.0f,		1.0f, 1.0f, 0.0f,			1.0f, 1.0f,								0.0f, 1.0f, 1.0f,
	1.0f, 5.2f, -19.5f,		0.0f, 1.0f, 1.0f,			1.0f, 0.8f,								0.0f, 1.0f, 1.0f,

	//SCIECIE GORNE
	 //Tyl
	-0.1f, 2.3f, -25.0f,	0.0f, 0.0f, 1.0f,			0.0f, 0.2f,								0.0f, 0.0f, -1.0f,
	 0.0f, 6.5f, -27.5f,	0.0f, 1.0f, 1.0f,			0.5f, 0.4f,								0.0f, 0.0f, -1.0f,
	 0.1f, 2.3f, -25.0f,	1.0f, 1.0f, 0.0f,			1.0f, 0.2f,								0.0f, 0.0f, -1.0f,
	 //Lewo
	 0.0f, 2.3f, -21.5f,	1.0f, 0.0f, 0.0f,			1.26f, 0.6f,							-1.0f, 0.0f, -1.0f,
	 0.0f, 6.5f, -27.5f,	1.0f, 1.0f, 0.0f,			-0.42f, 0.6f,							-1.0f, 0.0f, -1.0f,
	-0.1f, 2.3f, -25.0f,	0.0f, 1.0f, 1.0f,			0.57f, 0.26f,							-1.0f, 0.0f, -1.0f,
	//Prawo
	 0.0f, 2.3f, -21.5f,	1.0f, 0.0f, 0.0f,			-1.26f, 0.6f,							1.0f, 0.0f, 1.0f,
	 0.0f, 6.5f, -27.5f,	1.0f, 1.0f, 0.0f,			0.42f, 0.6f,							1.0f, 0.0f, 1.0f,
	 0.1f, 2.3f, -25.0f,	0.0f, 1.0f, 1.0f,			-0.57f, 0.26f,							1.0f, 0.0f, 1.0f,

	 //SCIECIE LEWE
	 //Tyl
	-1.4f, 1.0f, -25.0f,	0.0f, 0.0f, 1.0f,			0.0f, 0.2f,								0.0f, 0.0f, -1.0f,
	-5.7f, 0.7f, -27.5f,	0.0f, 1.0f, 1.0f,			0.5f, 0.4f,								0.0f, 0.0f, -1.0f,
	-1.4f, 0.8f, -25.0f,	1.0f, 1.0f, 0.0f,			1.0f, 0.2f,								0.0f, 0.0f, -1.0f,
	 //Gora
	-1.3f, 0.9f, -21.5f,	1.0f, 0.0f, 0.0f,			-1.26f, 0.6f,							-1.0f, 0.0f, 1.0f,
	-5.7f, 0.7f, -27.5f,	1.0f, 1.0f, 0.0f,			0.42f, 0.6f,							-1.0f, 0.0f, 1.0f,
	-1.4f, 1.0f, -25.0f,	0.0f, 1.0f, 1.0f,			-0.57f, 0.26f,							-1.0f, 0.0f, 1.0f,
	//Dol
	-1.3f, 0.9f, -21.5f,	1.0f, 0.0f, 0.0f,			1.26f, 0.6f,							1.0f, 0.0f, -1.0f,
	-5.7f, 0.7f, -27.5f,	1.0f, 1.0f, 0.0f,			-0.42f, 0.6f,							1.0f, 0.0f, -1.0f,
	-1.4f, 0.8f, -25.0f,	0.0f, 1.0f, 1.0f,			0.57f, 0.26f,							1.0f, 0.0f, -1.0f,

	//SCIECIE PRAWE
	 //Tyl
	 1.4f, 1.0f, -25.0f,	0.0f, 0.0f, 1.0f,			0.0f, 0.2f,								0.0f, 0.0f, -1.0f,
	 5.7f, 0.7f, -27.5f,	0.0f, 1.0f, 1.0f,			0.5f, 0.4f,								0.0f, 0.0f, -1.0f,
	 1.4f, 0.8f, -25.0f,	1.0f, 1.0f, 0.0f,			1.0f, 0.2f,								0.0f, 0.0f, -1.0f,
	 //Gora
	 1.3f, 0.9f, -21.5f,	1.0f, 0.0f, 0.0f,			1.26f, 0.6f,							-1.0f, 0.0f, -1.0f,
	 5.7f, 0.7f, -27.5f,	1.0f, 1.0f, 0.0f,			-0.42f, 0.6f,							-1.0f, 0.0f, -1.0f,
	 1.4f, 1.0f, -25.0f,	0.0f, 1.0f, 1.0f,			0.57f, 0.26f,							-1.0f, 0.0f, -1.0f,
	//Dol
	 1.3f, 0.9f, -21.5f,	1.0f, 0.0f, 0.0f,			-1.26f, 0.6f,							1.0f, 0.0f, 1.0f,
	 5.7f, 0.7f, -27.5f,	1.0f, 1.0f, 0.0f,			0.42f, 0.6f,							1.0f, 0.0f, 1.0f,
	 1.4f, 0.8f, -25.0f,	0.0f, 1.0f, 1.0f,			-0.57f, 0.26f,							1.0f, 0.0f, 1.0f,

	 //TYLNY LACZNIK
	 //Tyl
	-1.0f, -1.1f, -21.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	-0.4f, -0.5f, -24.5f,	0.0f, 1.0f, 1.0f,			0.7f, 1.0f,								0.0f, 0.0f, -1.0f,
	 0.4f, -0.5f, -24.5f,	1.0f, 1.0f, 0.0f,			0.3f, 1.0f,								0.0f, 0.0f, -1.0f,
	 1.0f, -1.1f, -21.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	 //Lewo
	-1.0f, -1.1f, -21.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								-1.0f, 0.0f, -1.0f,
	-0.8f, -0.5f, -21.5f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								-1.0f, 0.0f, -1.0f,
	-0.4f, -0.5f, -24.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								-1.0f, 0.0f, -1.0f,
	//Prawo
	1.0f, -1.1f, -21.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								1.0f, 0.0f, 1.0f,
	0.8f, -0.5f, -21.5f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								1.0f, 0.0f, 1.0f,
	0.4f, -0.5f, -24.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								1.0f, 0.0f, 1.0f,


	//PANEL
	 //Tyl
	-1.1f, 1.1f, -12.5f,	0.0f, 0.0f, 1.0f,			0.85f, 0.46f,							0.0f, 0.0f, -1.0f,
	-1.1f, 2.1f, -11.0f,	0.0f, 1.0f, 1.0f,			0.85f, 0.6f,							0.0f, 0.0f, -1.0f,
	 1.1f, 2.1f, -11.0f,	1.0f, 1.0f, 0.0f,			0.15f, 0.6f,							0.0f, 0.0f, -1.0f,
	 1.1f, 1.1f, -12.5f,	1.0f, 0.0f, 0.0f,			0.15f, 0.46f,							0.0f, 0.0f, 1.0f,
	 //Lewo
	-1.1f, 1.1f, -9.5f,		1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								-1.0f, 0.0f, 1.0f,
	-1.1f, 2.1f, -11.0f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								-1.0f, 0.0f, 1.0f,
	-1.1f, 1.1f, -12.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								-1.0f, 0.0f, 1.0f,
	//Prawo
	 1.1f, 1.1f, -9.5f,		0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								1.0f, 0.0f, 1.0f,
	 1.1f, 2.1f, -11.0f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								1.0f, 0.0f, 1.0f,
	 1.1f, 1.1f, -12.5f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								1.0f, 0.0f, 1.0f,
	//Front
	-1.1f, 1.1f, -9.5f,		0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	-1.1f, 2.1f, -11.0f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	 1.1f, 2.1f, -11.0f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	 1.1f, 1.1f, -9.5f,		1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, -1.0f,


	//LAMPA
	 //Gora
	-0.5f, 1.7f, -8.5f,		0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, 1.0f, 1.0f,
	-0.5f, 1.7f, -10.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 1.0f, 1.0f,
	 0.5f, 1.7f, -10.5f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 1.0f, -1.0f,
	 0.5f, 1.7f, -8.5f,		1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, 1.0f, -1.0f,
	 //Lewo
	-1.2f, 1.1f, -9.5f,		1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								-1.0f, 0.0f, -1.0f,
	-0.5f, 1.7f, -8.5f,		1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								-1.0f, 0.0f, -1.0f,
	-0.5f, 1.7f, -11.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								-1.0f, 0.0f, -1.0f,
	//Prawo
	 1.2f, 1.1f, -9.5f,		0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								1.0f, 0.0f, 1.0f,
	 0.5f, 1.7f, -8.5f,		0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								1.0f, 0.0f, 1.0f,
	 0.5f, 1.7f, -11.5f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								1.0f, 0.0f, 1.0f,
	//Lewo2
	 0.0f, 0.5f, -6.5f,		0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	-0.8f, 0.75f, -7.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	-0.5f, 1.7f, -8.5f,		1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	//Prawo2
	0.0f, 0.5f, -6.5f,		0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	0.8f, 0.75f, -7.5f,		0.0f, 0.0f, 1.0f,			0.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	0.5f, 1.7f, -8.5f,		0.0f, 1.0f, 1.0f,			0.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	//Lewo3
	-0.25f, 1.1f, -7.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	-0.5f, 1.7f, -8.5f,		0.0f, 0.0f, 1.0f,			0.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	-0.3f, 1.55f, -8.0f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	//Prawo3
	0.25f, 1.1f, -7.5f,		0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	0.5f, 1.7f, -8.5f,		1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	0.3f, 1.55f, -8.0f,		0.0f, 1.0f, 1.0f,			0.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	//Lewo4
	-0.8f, 0.75f, -7.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								-1.0f, 0.0f, -1.0f,
	-0.5f, 1.7f, -8.5f,		1.0f, 1.0f, 0.0f,			1.0f, 1.0f,								-1.0f, 0.0f, -1.0f,
	-1.2f, 1.1f, -9.5f,		1.0f, 0.0f, 0.0f,			1.0f, 0.8f,								-1.0f, 0.0f, -1.0f,
	//Prawo4
	0.8f, 0.75f, -7.5f,		0.0f, 0.0f, 1.0f,			0.0f, 0.8f,								1.0f, 0.0f, 1.0f,
	0.5f, 1.7f, -8.5f,		0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								1.0f, 0.0f, 1.0f,
	1.2f, 1.1f, -9.5f,		0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								1.0f, 0.0f, 1.0f,
	//Lewo5
	-0.8f, 0.75f, -7.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								-1.0f, 0.0f, -1.0f,
	-1.2f, 1.1f, -9.5f,		1.0f, 0.0f, 0.0f,			1.0f, 1.0f,								-1.0f, 0.0f, -1.0f,
	-1.2f, 1.0f, -9.5f,		1.0f, 0.0f, 0.0f,			1.0f, 0.8f,								-1.0f, 0.0f, -1.0f,
	//Prawo5
	0.8f, 0.75f, -7.5f,		0.0f, 0.0f, 1.0f,			0.0f, 0.8f,								1.0f, 0.0f, 1.0f,
	1.2f, 1.1f, -9.5f,		0.0f, 0.0f, 1.0f,			1.0f, 1.0f,								1.0f, 0.0f, 1.0f,
	1.2f, 1.0f, -9.5f,		0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								1.0f, 0.0f, 1.0f,
	//Lewo6
	-0.8f, 0.75f, -7.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	 0.0f, 0.5f, -6.5f,		0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	-0.8f, -0.75f, -7.5f,	1.0f, 0.0f, 0.0f,			1.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	//Prawo6
	0.8f, 0.75f, -7.5f,		0.0f, 0.0f, 1.0f,			0.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	0.0f, 0.5f, -6.5f,		0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	0.8f, -0.75f, -7.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	//Dolny front
	-0.8f, -0.75f, -7.5f,	0.0f, 0.0f, 1.0f,			0.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	0.0f,  0.5f, -6.5f,		0.0f, 1.0f, 1.0f,			0.5f, 1.0f,								0.0f, 0.0f, 1.0f,
	0.8f, -0.75f, -7.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	//Srodkowy front
	-0.25f, 1.1f, -7.5f,	0.0f, 0.0f, 1.0f,			0.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	 0.0f,  0.5f, -6.5f,	0.0f, 1.0f, 1.0f,			0.5f, 1.0f,								0.0f, 0.0f, -1.0f,
	 0.25f, 1.1f, -7.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	//Gorny front
	-0.3f, 1.55f, -8.0f,	0.0f, 1.0f, 1.0f,			0.2f, 1.0f,								0.0f, 0.0f, 1.0f,
	-0.5f, 1.7f, -8.5f,		0.0f, 0.0f, 1.0f,			0.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	 0.5f, 1.7f, -8.5f,		0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	 0.3f, 1.55f, -8.0f,	0.0f, 1.0f, 1.0f,			0.8f, 1.0f,								0.0f, 0.0f, -1.0f,

	 //OBUDOWA TYLU SILNIKA
	 //Gorny
	-0.6f, 1.9f, -25.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	-0.8f, 2.3f, -25.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.0f,								0.0f, 0.0f, -1.0f,
	 0.8f, 2.3f, -25.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.0f,								0.0f, 0.0f, -1.0f,
	 0.6f, 1.9f, -25.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	 //Gorny lewy
	-0.6f, 1.9f, -25.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	-0.8f, 2.3f, -25.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.0f,								0.0f, 0.0f, -1.0f,
	-1.5f, 0.9f, -25.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.0f,								0.0f, 0.0f, -1.0f,
	-1.1f, 0.9f, -25.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	//Gorny prawy
	 0.6f, 1.9f, -25.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	 0.8f, 2.3f, -25.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.0f,								0.0f, 0.0f, -1.0f,
	 1.5f, 0.9f, -25.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.0f,								0.0f, 0.0f, -1.0f,
	 1.1f, 0.9f, -25.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	 //Dolny
	-0.6f, -0.1f, -25.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	-0.8f, -0.5f, -25.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.0f,								0.0f, 0.0f, -1.0f,
	 0.8f, -0.5f, -25.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.0f,								0.0f, 0.0f, -1.0f,
	 0.6f, -0.1f, -25.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	 //Dolny lewy
	-0.6f, -0.1f, -25.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	-0.8f, -0.5f, -25.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.0f,								0.0f, 0.0f, -1.0f,
	-1.5f, 0.9f, -25.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.0f,								0.0f, 0.0f, -1.0f,
	-1.1f, 0.9f, -25.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	//Dolny prawy
	 0.6f, -0.1f, -25.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	 0.8f, -0.5f, -25.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.0f,								0.0f, 0.0f, -1.0f,
	 1.5f, 0.9f, -25.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.0f,								0.0f, 0.0f, -1.0f,
	 1.1f, 0.9f, -25.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, -1.0f,

	//MOCOWANIE PEDALOW
		//Dol
	 0.5f, -1.4f, -13.5f,	0.0f, 1.0f, 1.0f,			0.0f, 1.0f,								0.0f, -1.0f, 1.0f,
	 0.5f, -1.4f, -15.5f,	0.0f, 0.0f, 1.0f,			0.0f, 0.8f,								0.0f, -1.0f, 1.0f,
	 -0.5f, -1.4f, -15.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, -1.0f, 1.0f,
	 -0.5f, -1.4f, -13.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, -1.0f, -1.0f,
	//Front
	 0.5f, -1.0f, -12.0f,	0.0f, 1.0f, 1.0f,			0.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	 0.5f, -1.4f, -13.5f,	0.0f, 0.0f, 1.0f,			0.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	 -0.5f, -1.4f, -13.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	 -0.5f, -1.0f, -12.0f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	 //Tyl
	 0.5f, -1.4f, -15.5f,	0.0f, 1.0f, 1.0f,			0.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	 0.5f, -1.0f, -17.0f,	0.0f, 0.0f, 1.0f,			0.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	 -0.5f, -1.0f, -17.0f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	 -0.5f, -1.4f, -15.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	 //Lewy
	 -0.5f, -1.0f, -12.0f,	0.0f, 1.0f, 1.0f,			0.0f, 1.0f,								-1.0f, 0.0f, 1.0f,
	 -0.5f, -1.4f, -13.5f,	0.0f, 0.0f, 1.0f,			0.3f, 0.8f,								-1.0f, 0.0f, 1.0f,
	 -0.5f, -1.4f, -15.5f,	0.0f, 0.0f, 1.0f,			0.7f, 0.8f,								-1.0f, 0.0f, 1.0f,
	 -0.5f, -1.0f, -17.0f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								-1.0f, 0.0f, 1.0f,
	 //Prawy
	 0.5f, -1.0f, -12.0f,	0.0f, 1.0f, 1.0f,			0.0f, 1.0f,								1.0f, 0.0f, 1.0f,
	 0.5f, -1.4f, -13.5f,	0.0f, 0.0f, 1.0f,			0.3f, 0.8f,								1.0f, 0.0f, 1.0f,
	 0.5f, -1.4f, -15.5f,	0.0f, 0.0f, 1.0f,			0.7f, 0.8f,								1.0f, 0.0f, 1.0f,
	 0.5f, -1.0f, -17.0f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								1.0f, 0.0f, 1.0f,

	 //PEDALY
			//LACZNIK LEWY:
	//Front
	-0.5f, -1.35f, -14.35f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	-0.5f, -1.15f, -14.35f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	-2.0f, -1.55f, -13.05f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	-2.0f, -1.75f, -13.05f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	 //Tyl
	-0.5f, -1.35f, -14.65f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	-0.5f, -1.15f, -14.65f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	-2.0f, -1.55f, -13.35f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	-2.0f, -1.75f, -13.35f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	 //Dół
	-0.5f, -1.35f, -14.35f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, -1.0f, 1.0f,
	-0.5f, -1.35f, -14.65f,	0.0f, 0.0f, 1.0f,			0.0f, 1.0f,								0.0f, -1.0f, 1.0f,
	-2.0f, -1.75f, -13.35f,	1.0f, 0.0f, 0.0f,			1.0f, 1.0f,								0.0f, -1.0f, 1.0f,
	-2.0f, -1.75f, -13.05f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, -1.0f, -1.0f,
	//Góra
	-0.5f, -1.15f, -14.35f,	1.0f, 1.0f, 0.0f,			0.0f, 0.8f,								0.0f, 1.0f, -1.0f,
	-0.5f, -1.15f, -14.65f,	0.0f, 1.0f, 1.0f,			0.0f, 1.0f,								0.0f, 1.0f, 1.0f,
	-2.0f, -1.55f, -13.35f,	1.0f, 1.0f, 0.0f,			1.0f, 1.0f,								0.0f, 1.0f, 1.0f,
	-2.0f, -1.55f, -13.05f,	0.0f, 1.0f, 1.0f,			1.0f, 0.8f,								0.0f, 1.0f, 1.0f,

		//PEDAL LEWY
	//Front
	-2.0f, -1.75f, -12.7f,	0.0f, 0.0f, 1.0f,			0.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	-2.0f, -1.45f, -12.7f,	0.0f, 1.0f, 1.0f,			0.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	-3.5f, -1.35f, -12.7f,	1.0f, 1.0f, 0.0f,			1.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	-3.5f, -1.65f, -12.7f,	1.0f, 0.0f, 0.0f,			1.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	 //Tyl
	-2.0f, -1.85f, -13.7f,	0.0f, 0.0f, 1.0f,			0.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	-2.0f, -1.55f, -13.7f,	0.0f, 1.0f, 1.0f,			0.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	-3.5f, -1.45f, -13.7f,	1.0f, 1.0f, 0.0f,			1.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	-3.5f, -1.75f, -13.7f,	1.0f, 0.0f, 0.0f,			1.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	 //Lewo
	-3.5f, -1.45f, -13.7f,	1.0f, 0.0f, 0.0f,			0.0f, 1.0f,								-1.0f, 0.0f, 1.0f,
	-3.5f, -1.75f, -13.7f,	1.0f, 1.0f, 0.0f,			0.0f, 0.8f,								-1.0f, 0.0f, 1.0f,
	-3.5f, -1.65f, -12.7f,	0.0f, 1.0f, 1.0f,			1.0f, 0.8f,								-1.0f, 0.0f, 1.0f,
	-3.5f, -1.35f, -12.7f,	0.0f, 0.0f, 1.0f,			1.0f, 1.0f,								-1.0f, 0.0f, 1.0f,
	//Prawo
	-2.0f, -1.55f, -13.7f,	0.0f, 0.0f, 1.0f,			1.0f, 1.0f,								1.0f, 0.0f, 1.0f,
	-2.0f, -1.85f, -13.7f,	0.0f, 1.0f, 1.0f,			1.0f, 0.8f,								1.0f, 0.0f, 1.0f,
	-2.0f, -1.75f, -12.7f,	1.0f, 1.0f, 0.0f,			0.0f, 0.8f,								1.0f, 0.0f, 1.0f,
	-2.0f, -1.45f, -12.7f,	1.0f, 0.0f, 0.0f,			0.0f, 1.0f,								1.0f, 0.0f, 1.0f,
	 //Dół
	-3.5f, -1.75f, -13.7f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, -1.0f, -1.0f,
	-2.0f, -1.85f, -13.7f,	0.0f, 0.0f, 1.0f,			0.0f, 1.0f,								0.0f, -1.0f, 1.0f,
	-2.0f, -1.75f, -12.7f,	1.0f, 0.0f, 0.0f,			1.0f, 1.0f,								0.0f, -1.0f, 1.0f,
	-3.5f, -1.65f, -12.7f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, -1.0f, 1.0f,
	//Góra
	-3.5f, -1.45f, -13.7f,	1.0f, 1.0f, 0.0f,			0.0f, 0.6f,								0.0f, 1.0f, 1.0f,
	-2.0f, -1.55f, -13.7f,	0.0f, 1.0f, 1.0f,			0.0f, 0.8f,								0.0f, 1.0f, 1.0f,
	-2.0f, -1.45f, -12.7f,	1.0f, 1.0f, 0.0f,			1.0f, 0.8f,								0.0f, 1.0f, 1.0f,
	-3.5f, -1.35f, -12.7f,	0.0f, 1.0f, 1.0f,			1.0f, 0.6f,								0.0f, 1.0f, -1.0f,

		//LACZNIK PRAWY:
	//Front
	0.5f, -1.35f, -14.35f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	0.5f, -1.15f, -14.35f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	2.0f, -1.55f, -13.05f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	2.0f, -1.75f, -13.05f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	 //Tyl
	0.5f, -1.35f, -14.65f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	0.5f, -1.15f, -14.65f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	2.0f, -1.55f, -13.35f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	2.0f, -1.75f, -13.35f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	 //Dół
	0.5f, -1.35f, -14.35f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, -1.0f, -1.0f,
	0.5f, -1.35f, -14.65f,	0.0f, 0.0f, 1.0f,			0.0f, 1.0f,								0.0f, -1.0f, 1.0f,
	2.0f, -1.75f, -13.35f,	1.0f, 0.0f, 0.0f,			1.0f, 1.0f,								0.0f, -1.0f, 1.0f,
	2.0f, -1.75f, -13.05f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, -1.0f, 1.0f,
	//Góra
	0.5f, -1.15f, -14.35f,	1.0f, 1.0f, 0.0f,			0.0f, 0.8f,								0.0f, 1.0f, 1.0f,
	0.5f, -1.15f, -14.65f,	0.0f, 1.0f, 1.0f,			0.0f, 1.0f,								0.0f, 1.0f, 1.0f,
	2.0f, -1.55f, -13.35f,	1.0f, 1.0f, 0.0f,			1.0f, 1.0f,								0.0f, 1.0f, 1.0f,
	2.0f, -1.55f, -13.05f,	0.0f, 1.0f, 1.0f,			1.0f, 0.8f,								0.0f, 1.0f, -1.0f,

		//PEDAL PRAWY:
	//Front
	2.0f, -1.75f, -12.7f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	2.0f, -1.45f, -12.7f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	3.5f, -1.35f, -12.7f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	3.5f, -1.65f, -12.7f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	 //Tyl
	2.0f, -1.85f, -13.7f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	2.0f, -1.55f, -13.7f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	3.5f, -1.45f, -13.7f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	3.5f, -1.75f, -13.7f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	 //Lewo
	3.5f, -1.45f, -13.7f,	1.0f, 0.0f, 0.0f,			0.0f, 1.0f,								-1.0f, 0.0f, 1.0f,
	3.5f, -1.75f, -13.7f,	1.0f, 1.0f, 0.0f,			0.0f, 0.8f,								-1.0f, 0.0f, 1.0f,
	3.5f, -1.65f, -12.7f,	0.0f, 1.0f, 1.0f,			1.0f, 0.8f,								-1.0f, 0.0f, 1.0f,
	3.5f, -1.35f, -12.7f,	0.0f, 0.0f, 1.0f,			1.0f, 1.0f,								-1.0f, 0.0f, 1.0f,
	//Prawo
	2.0f, -1.55f, -13.7f,	0.0f, 0.0f, 1.0f,			1.0f, 1.0f,								1.0f, 0.0f, 1.0f,
	2.0f, -1.85f, -13.7f,	0.0f, 1.0f, 1.0f,			1.0f, 0.8f,								1.0f, 0.0f, 1.0f,
	2.0f, -1.75f, -12.7f,	1.0f, 1.0f, 0.0f,			0.0f, 0.8f,								1.0f, 0.0f, 1.0f,
	2.0f, -1.45f, -12.7f,	1.0f, 0.0f, 0.0f,			0.0f, 1.0f,								1.0f, 0.0f, 1.0f,
	 //Dół
	3.5f, -1.75f, -13.7f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, -1.0f, 1.0f,
	2.0f, -1.85f, -13.7f,	0.0f, 0.0f, 1.0f,			0.0f, 1.0f,								0.0f, -1.0f, 1.0f,
	2.0f, -1.75f, -12.7f,	1.0f, 0.0f, 0.0f,			1.0f, 1.0f,								0.0f, -1.0f, 1.0f,
	3.5f, -1.65f, -12.7f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, -1.0f, -1.0f,
	//Góra
	3.5f, -1.45f, -13.7f,	1.0f, 1.0f, 0.0f,			0.0f, 0.6f,								0.0f, 1.0f, -1.0f,
	2.0f, -1.55f, -13.7f,	0.0f, 1.0f, 1.0f,			0.0f, 0.8f,								0.0f, 1.0f, 1.0f,
	2.0f, -1.45f, -12.7f,	1.0f, 1.0f, 0.0f,			1.0f, 0.8f,								0.0f, 1.0f, 1.0f,
	3.5f, -1.35f, -12.7f,	0.0f, 1.0f, 1.0f,			1.0f, 0.6f,								0.0f, 1.0f, 1.0f,


	//KIEROWNICA
		//LACZNIK
	 //Lewo
	-0.1f, 0.9f, -12.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								-1.0f, 0.0f, 1.0f,
	-0.1f, 1.1f, -12.5f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								-1.0f, 0.0f, 1.0f,
	-0.1f, 2.8f, -15.4f,	0.0f, 1.0f, 1.0f,			3.0f, 1.0f,								-1.0f, 0.0f, 1.0f,
	-0.1f, 2.6f, -15.4f,	0.0f, 0.0f, 1.0f,			3.0f, 0.8f,								-1.0f, 0.0f, 1.0f,
	//Prawo
	 0.1f, 0.9f, -12.5f,	0.0f, 0.0f, 1.0f,			3.0f, 0.8f,								1.0f, 0.0f, 1.0f,
	 0.1f, 1.1f, -12.5f,	0.0f, 1.0f, 1.0f,			3.0f, 1.0f,								1.0f, 0.0f, 1.0f,
	 0.1f, 2.8f, -15.4f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								1.0f, 0.0f, 1.0f,
	 0.1f, 2.6f, -15.4f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								1.0f, 0.0f, 1.0f,
	 //Dół
	-0.1f, 0.9f, -12.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, -1.0f, 1.0f,
	 0.1f, 0.9f, -12.5f,	0.0f, 0.0f, 1.0f,			0.0f, 1.0f,								0.0f, -1.0f, 1.0f,
	 0.1f, 2.6f, -15.4f,	1.0f, 0.0f, 0.0f,			3.0f, 1.0f,								0.0f, -1.0f, 1.0f,
	-0.1f, 2.6f, -15.4f,	0.0f, 0.0f, 1.0f,			3.0f, 0.8f,								0.0f, -1.0f, -1.0f,
	//Góra
	-0.1f, 1.1f, -12.5f,	1.0f, 1.0f, 0.0f,			0.0f, 0.8f,								0.0f, 1.0f, -1.0f,
	 0.1f, 1.1f, -12.5f,	0.0f, 1.0f, 1.0f,			0.0f, 1.0f,								0.0f, 1.0f, 1.0f,
	 0.1f, 2.8f, -15.4f,	1.0f, 1.0f, 0.0f,			3.0f, 1.0f,								0.0f, 1.0f, 1.0f,
	-0.1f, 2.8f, -15.4f,	0.0f, 1.0f, 1.0f,			3.0f, 0.8f,								0.0f, 1.0f, 1.0f,
		//CENTRUM
	//Front
	-0.15f, 2.55f, -15.4f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	-0.15f, 2.85f, -15.4f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	 0.15f, 2.85f, -15.4f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	 0.15f, 2.55f, -15.4f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	 //Tyl
	-0.15f, 2.55f, -15.7f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	-0.15f, 2.85f, -15.7f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	 0.15f, 2.85f, -15.7f, 1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	 0.15f, 2.55f, -15.7f, 1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	 //Lewo
	-0.15f, 2.55f, -15.4f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								-1.0f, 0.0f, 1.0f,
	-0.15f, 2.85f, -15.4f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								-1.0f, 0.0f, 1.0f,
	-0.15f, 2.85f, -15.7f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								-1.0f, 0.0f, 1.0f,
	-0.15f, 2.55f, -15.7f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								-1.0f, 0.0f, 1.0f,
	//Prawo
	0.15f, 2.55f, -15.4f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								1.0f, 0.0f, 1.0f,
	0.15f, 2.85f, -15.4f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								1.0f, 0.0f, 1.0f,
	0.15f, 2.85f, -15.7f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								1.0f, 0.0f, 1.0f,
	0.15f, 2.55f, -15.7f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								1.0f, 0.0f, 1.0f,
	 //Dół
	-0.15f, 2.55f, -15.4f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, -1.0f, -1.0f,
	-0.15f, 2.55f, -15.7f,	0.0f, 0.0f, 1.0f,			0.0f, 1.0f,								0.0f, -1.0f, 1.0f,
	0.15f, 2.55f, -15.7f,	1.0f, 0.0f, 0.0f,			1.0f, 1.0f,								0.0f, -1.0f, 1.0f,
	0.15f, 2.55f, -15.4f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, -1.0f, 1.0f,
	//Góra
	-0.15f, 2.85f, -15.4f,	1.0f, 1.0f, 0.0f,			1.0f, 0.6f,								0.0f, 1.0f, 1.0f,
	-0.15f, 2.85f, -15.7f,	0.0f, 1.0f, 1.0f,			1.0f, 0.4f,								0.0f, 1.0f, 1.0f,
	0.15f, 2.85f, -15.7f,	1.0f, 1.0f, 0.0f,			0.0f, 0.4f,								0.0f, 1.0f, 1.0f,
	0.15f, 2.85f, -15.4f,	0.0f, 1.0f, 1.0f,			0.0f, 0.6f,								0.0f, 1.0f, -1.0f,
		//LEWY UCHWYT 1
	//Front
	-0.15f, 2.60f, -15.45f,	0.0f, 0.0f, 1.0f,			0.0f, 0.6f,								0.0f, 0.0f, 1.0f,
	-0.15f, 2.80f, -15.45f,	0.0f, 1.0f, 1.0f,			0.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	-0.50f, 2.70f, -15.6f,	1.0f, 1.0f, 0.0f,			1.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	-0.50f, 2.50f, -15.6f,	1.0f, 0.0f, 0.0f,			1.0f, 0.6f,								0.0f, 0.0f, 1.0f,
	 //Tyl
	-0.15f, 2.60f, -15.65f,	0.0f, 0.0f, 1.0f,			0.0f, 0.6f,								0.0f, 0.0f, -1.0f,
	-0.15f, 2.80f, -15.65f,	0.0f, 1.0f, 1.0f,			0.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	-0.50f, 2.70f, -15.8f,	1.0f, 1.0f, 0.0f,			1.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	-0.50f, 2.50f, -15.8f,	1.0f, 0.0f, 0.0f,			1.0f, 0.6f,								0.0f, 0.0f, -1.0f,
	 //Dół
	-0.15f, 2.60f, -15.45f,	1.0f, 0.0f, 0.0f,			0.0f, 0.6f,								0.0f, -1.0f, 1.0f,
	-0.15f, 2.60f, -15.65f,	0.0f, 0.0f, 1.0f,			0.0f, 0.8f,								0.0f, -1.0f, 1.0f,
	-0.50f, 2.50f, -15.8f,	1.0f, 0.0f, 0.0f,			1.0f, 0.8f,								0.0f, -1.0f, 1.0f,
	-0.50f, 2.50f, -15.6f,	0.0f, 0.0f, 1.0f,			1.0f, 0.6f,								0.0f, -1.0f, -1.0f,
	//Góra
	-0.15f, 2.80f, -15.45f,	1.0f, 1.0f, 0.0f,			0.0f, 0.6f,								0.0f, 1.0f, -1.0f,
	-0.15f, 2.80f, -15.65f,	0.0f, 1.0f, 1.0f,			0.0f, 0.8f,								0.0f, 1.0f, -1.0f,
	-0.50f, 2.70f, -15.8f,	1.0f, 1.0f, 0.0f,			1.0f, 0.8f,								0.0f, 1.0f, -1.0f,
	-0.50f, 2.70f, -15.6f,	0.0f, 1.0f, 1.0f,			1.0f, 0.6f,								0.0f, 1.0f, 1.0f,
		//LEWY UCHWYT 2
	//Front
	-0.50f, 2.50f, -15.6f,	0.0f, 0.0f, 1.0f,			1.0f, 0.6f,								0.0f, 0.0f, 1.0f,
	-0.50f, 2.70f, -15.6f,	0.0f, 1.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	-1.0f, 2.70f, -15.5f,	1.0f, 1.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	-1.0f, 2.50f, -15.7f,	1.0f, 0.0f, 0.0f,			0.0f, 0.6f,								0.0f, 0.0f, 1.0f,
	 //Tyl
	-0.50f, 2.50f, -15.8f,	0.0f, 0.0f, 1.0f,			1.0f, 0.6f,								0.0f, 0.0f, -1.0f,
	-0.50f, 2.70f, -15.8f,	0.0f, 1.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	-1.0f, 2.90f, -15.7f,	1.0f, 1.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	-1.0f, 2.70f, -15.9f,	1.0f, 0.0f, 0.0f,			0.0f, 0.6f,								0.0f, 0.0f, -1.0f,
	 //Lewo
	-1.0f, 2.7f, -15.9f,	1.0f, 0.0f, 0.0f,			1.0f, 0.2f,								-1.0f, 0.0f, 1.0f,
	-1.0f, 2.9f, -15.7f,	1.0f, 1.0f, 0.0f,			1.0f, 0.4f,								-1.0f, 0.0f, 1.0f,
	-1.0f, 2.7f, -15.5f,	0.0f, 1.0f, 1.0f,			0.0f, 0.4f,								-1.0f, 0.0f, 1.0f,
	-1.0f, 2.5f, -15.7f,	0.0f, 0.0f, 1.0f,			0.0f, 0.2f,								-1.0f, 0.0f, 1.0f,
	 //Dół
	-0.5f, 2.5f, -15.6f,	1.0f, 0.0f, 0.0f,			1.0f, 0.6f,								0.0f, -1.0f, 1.0f,
	-0.5f, 2.5f, -15.8f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, -1.0f, 1.0f,
	-1.0f, 2.7f, -15.9f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, -1.0f, 1.0f,
	-1.0f, 2.5f, -15.7f,	0.0f, 0.0f, 1.0f,			0.0f, 0.6f,								0.0f, -1.0f, -1.0f,
	//Góra
	-0.5f, 2.7f, -15.6f,	1.0f, 1.0f, 0.0f,			1.0f, 0.6f,								0.0f, 1.0f, -1.0f,
	-0.5f, 2.7f, -15.8f,	0.0f, 1.0f, 1.0f,			1.0f, 0.8f,								0.0f, 1.0f, 1.0f,
	-1.0f, 2.9f, -15.7f,	1.0f, 1.0f, 0.0f,			0.0f, 0.8f,								0.0f, 1.0f, 1.0f,
	-1.0f, 2.7f, -15.5f,	0.0f, 1.0f, 1.0f,			0.0f, 0.6f,								0.0f, 1.0f, 1.0f,
		//PRAWY UCHWYT 1
	//Front
	0.15f, 2.60f, -15.45f,	0.0f, 0.0f, 1.0f,			0.0f, 0.6f,								0.0f, 0.0f, 1.0f,
	0.15f, 2.80f, -15.45f,	0.0f, 1.0f, 1.0f,			0.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	0.50f, 2.70f, -15.6f,	1.0f, 1.0f, 0.0f,			1.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	0.50f, 2.50f, -15.6f,	1.0f, 0.0f, 0.0f,			1.0f, 0.6f,								0.0f, 0.0f, 1.0f,
	 //Tyl
	0.15f, 2.60f, -15.65f,	0.0f, 0.0f, 1.0f,			0.0f, 0.6f,								0.0f, 0.0f, -1.0f,
	0.15f, 2.80f, -15.65f,	0.0f, 1.0f, 1.0f,			0.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	0.50f, 2.70f, -15.8f,	1.0f, 1.0f, 0.0f,			1.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	0.50f, 2.50f, -15.8f,	1.0f, 0.0f, 0.0f,			1.0f, 0.6f,								0.0f, 0.0f, -1.0f,
	 //Dół
	0.15f, 2.60f, -15.45f,	1.0f, 0.0f, 0.0f,			0.0f, 0.6f,								0.0f, -1.0f, -1.0f,
	0.15f, 2.60f, -15.65f,	0.0f, 0.0f, 1.0f,			0.0f, 0.8f,								0.0f, -1.0f, 1.0f,
	0.50f, 2.50f, -15.8f,	1.0f, 0.0f, 0.0f,			1.0f, 0.8f,								0.0f, -1.0f, 1.0f,
	0.50f, 2.50f, -15.6f,	0.0f, 0.0f, 1.0f,			1.0f, 0.6f,								0.0f, -1.0f, 1.0f,
	//Góra
	0.15f, 2.80f, -15.45f,	1.0f, 1.0f, 0.0f,			0.0f, 0.6f,								0.0f, 1.0f, 1.0f,
	0.15f, 2.80f, -15.65f,	0.0f, 1.0f, 1.0f,			0.0f, 0.8f,								0.0f, 1.0f, 1.0f,
	0.50f, 2.70f, -15.8f,	1.0f, 1.0f, 0.0f,			1.0f, 0.8f,								0.0f, 1.0f, 1.0f,
	0.50f, 2.70f, -15.6f,	0.0f, 1.0f, 1.0f,			1.0f, 0.6f,								0.0f, 1.0f, -1.0f,
		//PRAWY UCHWYT 2
	//Front
	0.50f, 2.50f, -15.6f,	0.0f, 0.0f, 1.0f,			1.0f, 0.6f,								0.0f, 0.0f, 1.0f,
	0.50f, 2.70f, -15.6f,	0.0f, 1.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	1.0f, 2.70f, -15.5f,	1.0f, 1.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	1.0f, 2.50f, -15.7f,	1.0f, 0.0f, 0.0f,			0.0f, 0.6f,								0.0f, 0.0f, -1.0f,
	 //Tyl
	0.50f, 2.50f, -15.8f,	0.0f, 0.0f, 1.0f,			1.0f, 0.6f,								0.0f, 0.0f, -1.0f,
	0.50f, 2.70f, -15.8f,	0.0f, 1.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	1.0f, 2.90f, -15.7f,	1.0f, 1.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	1.0f, 2.70f, -15.9f,	1.0f, 0.0f, 0.0f,			0.0f, 0.6f,								0.0f, 0.0f, 1.0f,
	 //Prawo
	1.0f, 2.7f, -15.9f,		1.0f, 0.0f, 0.0f,			1.0f, 0.2f,								-1.0f, 0.0f, 1.0f,
	1.0f, 2.9f, -15.7f,		1.0f, 1.0f, 0.0f,			1.0f, 0.4f,								-1.0f, 0.0f, 1.0f,
	1.0f, 2.7f, -15.5f,		0.0f, 1.0f, 1.0f,			0.0f, 0.4f,								-1.0f, 0.0f, 1.0f,
	1.0f, 2.5f, -15.7f,		0.0f, 0.0f, 1.0f,			0.0f, 0.2f,								-1.0f, 0.0f, 1.0f,
	 //Dół
	0.5f, 2.5f, -15.6f,		1.0f, 0.0f, 0.0f,			1.0f, 0.6f,								0.0f, -1.0f, -1.0f,
	0.5f, 2.5f, -15.8f,		0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, -1.0f, 1.0f,
	1.0f, 2.7f, -15.9f,		1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, -1.0f, 1.0f,
	1.0f, 2.5f, -15.7f,		0.0f, 0.0f, 1.0f,			0.0f, 0.6f,								0.0f, -1.0f, 1.0f,
	//Góra
	0.5f, 2.7f, -15.6f,		1.0f, 1.0f, 0.0f,			1.0f, 0.6f,								0.0f, 1.0f, 1.0f,
	0.5f, 2.7f, -15.8f,		0.0f, 1.0f, 1.0f,			1.0f, 0.8f,								0.0f, 1.0f, 1.0f,
	1.0f, 2.9f, -15.7f,		1.0f, 1.0f, 0.0f,			0.0f, 0.8f,								0.0f, 1.0f, 1.0f,
	1.0f, 2.7f, -15.5f,		0.0f, 1.0f, 1.0f,			0.0f, 0.6f,								0.0f, 1.0f, -1.0f,



	//ODPYCHACZE BOCZNE
			//LACZNIK LEWY:
	//Front
	-1.2f, -0.6f, -19.75f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	-1.2f, -0.1f, -19.75f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	-4.0f, -1.4f, -20.75f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	-4.0f, -1.9f, -20.75f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	 //Tyl
	-1.2f, -0.6f, -20.25f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	-1.2f, -0.1f, -20.25f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	-4.0f, -1.4f, -21.25f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	-4.0f, -1.9f, -21.25f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	 //Dół
	-1.2f, -0.6f, -20.25f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, -1.0f, -1.0f,
	-1.2f, -0.6f, -19.75f,	0.0f, 0.0f, 1.0f,			0.0f, 1.0f,								0.0f, -1.0f, 1.0f,
	-4.0f, -1.9f, -20.75f,	1.0f, 0.0f, 0.0f,			1.0f, 1.0f,								0.0f, -1.0f, 1.0f,
	-4.0f, -1.9f, -21.25f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, -1.0f, 1.0f,
	//Góra
	-1.2f, -0.1f, -20.25f,	1.0f, 1.0f, 0.0f,			0.0f, 0.8f,								0.0f, 1.0f, 1.0f,
	-1.2f, -0.1f, -19.75f,	0.0f, 1.0f, 1.0f,			0.0f, 1.0f,								0.0f, 1.0f, 1.0f,
	-4.0f, -1.4f, -20.75f,	1.0f, 1.0f, 0.0f,			1.0f, 1.0f,								0.0f, 1.0f, 1.0f,
	-4.0f, -1.4f, -21.25f,	0.0f, 1.0f, 1.0f,			1.0f, 0.8f,								0.0f, 1.0f, -1.0f,	
		//LACZNIK PRAWY:
	//Front
	1.2f, -0.6f, -19.75f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	1.2f, -0.1f, -19.75f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	4.0f, -1.4f, -20.75f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	4.0f, -1.9f, -20.75f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	 //Tyl
	1.2f, -0.6f, -20.25f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	1.2f, -0.1f, -20.25f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	4.0f, -1.4f, -21.25f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	4.0f, -1.9f, -21.25f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	 //Dół
	1.2f, -0.6f, -20.25f,	1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, -1.0f, 1.0f,
	1.2f, -0.6f, -19.75f,	0.0f, 0.0f, 1.0f,			0.0f, 1.0f,								0.0f, -1.0f, 1.0f,
	4.0f, -1.9f, -20.75f,	1.0f, 0.0f, 0.0f,			1.0f, 1.0f,								0.0f, -1.0f, 1.0f,
	4.0f, -1.9f, -21.25f,	0.0f, 0.0f, 1.0f,			1.0f, 0.8f,								0.0f, -1.0f, -1.0f,
	//Góra
	1.2f, -0.1f, -20.25f,	1.0f, 1.0f, 0.0f,			0.0f, 0.8f,								0.0f, 1.0f, -1.0f,
	1.2f, -0.1f, -19.75f,	0.0f, 1.0f, 1.0f,			0.0f, 1.0f,								0.0f, 1.0f, 1.0f,
	4.0f, -1.4f, -20.75f,	1.0f, 1.0f, 0.0f,			1.0f, 1.0f,								0.0f, 1.0f, 1.0f,
	4.0f, -1.4f, -21.25f,	0.0f, 1.0f, 1.0f,			1.0f, 0.8f,								0.0f, 1.0f, 1.0f,



		//MONITOR
			//RAMA GORNA
	 //Front
	-1.1f, 0.1f, 0.0f,		0.0f, 0.0f, 1.0f,			5.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	-1.0f, 0.1f, -0.1f,		0.0f, 1.0f, 1.0f,			4.77f, 1.0f,							0.0f, 0.0f, -1.0f,
	 1.0f, 0.1f, -0.1f,		1.0f, 1.0f, 0.0f,			0.23f, 1.0f,							0.0f, 0.0f, -1.0f,
	 1.1f, 0.1f, 0.0f,		1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	//Gora
	-1.1f, 0.0f, 0.0f,		0.0f, 0.0f, 1.0f,			5.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	-1.1f, 0.1f, 0.0f,		0.0f, 1.0f, 1.0f,			5.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	 1.1f, 0.1f, 0.0f,		1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	 1.1f, 0.0f, 0.0f,		1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	//Dol
	-1.0f, 0.0f, -0.1f,		0.0f, 0.0f, 1.0f,			1.0f, 0.0f,								0.0f, 0.0f, 1.0f,
	-1.0f, 0.1f, -0.1f,		0.0f, 1.0f, 1.0f,			1.0f, 0.2f,								0.0f, 0.0f, -1.0f,
	 1.0f, 0.1f, -0.1f,		1.0f, 1.0f, 0.0f,			0.0f, 0.2f,								0.0f, 0.0f, -1.0f,
	 1.0f, 0.0f, -0.1f,		1.0f, 0.0f, 0.0f,			0.0f, 0.0f,								0.0f, 0.0f, -1.0f,
			//RAMA DOLNA
	 //Front
	-1.0f, 0.1f, 0.1f,		0.0f, 0.0f, 1.0f,			4.77f, 0.8f,							0.0f, 0.0f, 1.0f,
	-1.1f, 0.1f, 0.0f,		0.0f, 1.0f, 1.0f,			5.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	 1.1f, 0.1f, 0.0f,		1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	 1.0f, 0.1f, 0.1f,		1.0f, 0.0f, 0.0f,			0.23f, 0.8f,							0.0f, 0.0f, -1.0f,
	//Gora
	-1.0f, 0.0f, 0.1f,		0.0f, 0.0f, 1.0f,			1.0f, 0.0f,								0.0f, 0.0f, 1.0f,
	-1.0f, 0.1f, 0.1f,		0.0f, 1.0f, 1.0f,			1.0f, 0.2f,								0.0f, 0.0f, -1.0f,
	 1.0f, 0.1f, 0.1f,		1.0f, 1.0f, 0.0f,			0.0f, 0.2f,								0.0f, 0.0f, -1.0f,
	 1.0f, 0.0f, 0.1f,		1.0f, 0.0f, 0.0f,			0.0f, 0.0f,								0.0f, 0.0f, -1.0f,
	//Dol
	-1.1f, 0.0f, 0.0f,		0.0f, 0.0f, 1.0f,			5.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	-1.1f, 0.1f, 0.0f,		0.0f, 1.0f, 1.0f,			5.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	 1.1f, 0.1f, 0.0f,		1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	 1.1f, 0.0f, 0.0f,		1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, 1.0f,
			//RAMA LEWA: Z w obliczeniach
	 //Front
	-1.1f, 0.1f, 1.0f,		0.0f, 0.0f, 1.0f,			5.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	-1.0f, 0.1f, 1.0f,		0.0f, 1.0f, 1.0f,			4.77f, 1.0f,							0.0f, 0.0f, -1.0f,
	-1.0f, 0.1f, -1.0f,		1.0f, 1.0f, 0.0f,			0.23f, 1.0f,							0.0f, 0.0f, -1.0f,
	-1.1f, 0.1f, -1.0f,		1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, 1.0f,
	//Lewo:
	-1.1f, 0.0f, 1.0f,		0.0f, 0.0f, 1.0f,			5.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	-1.1f, 0.1f, 1.0f,		0.0f, 1.0f, 1.0f,			5.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	-1.1f, 0.1f, -1.0f,		1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	-1.1f, 0.0f, -1.0f,		1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	//Prawo:
	-1.0f, 0.0f, 1.0f,		0.0f, 0.0f, 1.0f,			1.0f, 0.0f,								0.0f, 0.0f, -1.0f,
	-1.0f, 0.1f, 1.0f,		0.0f, 1.0f, 1.0f,			1.0f, 0.2f,								0.0f, 0.0f, -1.0f,
	-1.0f, 0.1f, -1.0f,		1.0f, 1.0f, 0.0f,			0.0f, 0.2f,								0.0f, 0.0f, -1.0f,
	-1.0f, 0.0f, -1.0f,		1.0f, 0.0f, 0.0f,			0.0f, 0.0f,								0.0f, 0.0f, -1.0f,
			//RAMA PRAWA: Z w obliczeniach
	 //Front
	1.0f, 0.1f, 1.0f,		0.0f, 0.0f, 1.0f,			4.77f, 0.8f,							0.0f, 0.0f, -1.0f,
	1.1f, 0.1f, 1.0f,		0.0f, 1.0f, 1.0f,			5.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	1.1f, 0.1f, -1.0f,		1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	1.0f, 0.1f, -1.0f,		1.0f, 0.0f, 0.0f,			0.23f, 0.8f,							0.0f, 0.0f, 1.0f,
	//Lewo:
	1.0f, 0.0f, 1.0f,		0.0f, 0.0f, 1.0f,			1.0f, 0.0f,								0.0f, 0.0f, -1.0f,
	1.0f, 0.1f, 1.0f,		0.0f, 1.0f, 1.0f,			1.0f, 0.2f,								0.0f, 0.0f, -1.0f,
	1.0f, 0.1f, -1.0f,		1.0f, 1.0f, 0.0f,			0.0f, 0.2f,								0.0f, 0.0f, -1.0f,
	1.0f, 0.0f, -1.0f,		1.0f, 0.0f, 0.0f,			0.0f, 0.0f,								0.0f, 0.0f, -1.0f,
	//Prawo:
	1.1f, 0.0f, 1.0f,		0.0f, 0.0f, 1.0f,			5.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	1.1f, 0.1f, 1.0f,		0.0f, 1.0f, 1.0f,			5.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	1.1f, 0.1f, -1.0f,		1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	1.1f, 0.0f, -1.0f,		1.0f, 0.0f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	

	//	//PANEL
	// //Tyl
	//-1.1f, 1.1f, -12.5f,	0.0f, 0.0f, 1.0f,			1.0f, 0.0f,								0.0f, 0.0f, -1.0f,
	//-1.1f, 2.1f, -11.0f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	// 1.1f, 2.1f, -11.0f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	// 1.1f, 1.1f, -12.5f,	1.0f, 0.0f, 0.0f,			0.0f, 0.0f,								0.0f, 0.0f, -1.0f,
	// //Lewo
	//-1.1f, 1.1f, -9.5f,		1.0f, 0.0f, 0.0f,			0.0f, 0.0f,								-1.0f, 0.0f, 0.0f,
	//-1.1f, 2.1f, -11.0f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								-1.0f, 0.0f, 0.0f,
	//-1.1f, 1.1f, -12.5f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								-1.0f, 0.0f, 0.0f,
	////Prawo
	// 1.1f, 1.1f, -9.5f,		0.0f, 0.0f, 1.0f,			1.0f, 0.0f,								1.0f, 0.0f, 0.0f,
	// 1.1f, 2.1f, -11.0f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								1.0f, 0.0f, 0.0f,
	// 1.1f, 1.1f, -12.5f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								1.0f, 0.0f, 0.0f,
	////Front
	//-1.1f, 1.1f, -9.5f,		0.0f, 0.0f, 1.0f,			1.0f, 0.0f,								0.0f, 0.0f, 1.0f,
	//-1.1f, 2.1f, -11.0f,	0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	// 1.1f, 2.1f, -11.0f,	1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	// 1.1f, 1.1f, -9.5f,		1.0f, 0.0f, 0.0f,			0.0f, 0.0f,								0.0f, 0.0f, 1.0f,
};

	 // Przyporzadkowanie wierzcholkow do trojkatow2
GLuint indices[] =
{

	//PRZEDNI LACZNIK
	//Front:
	/*0, 1, 2,
	0, 2, 3,*/
	//Tyl:
	/*4, 5, 6,
	4, 6, 7,*/
	//Lewo:
	8, 9, 10,
	11, 10, 8,
	//Prawo:
	12, 13, 14,
	15, 14, 12,
	//Dol:
	16, 17, 18,
	19, 16, 18,
	//Gora:
	20, 21, 23,
	22, 23, 21,

	//CZUB
	//Gora:
	24, 25, 26,
	//Dol:
	27, 28, 29,
	//Lewo
	30, 31, 32,
	//Prawo
	33, 34, 35,
	//Trzon
	36, 37, 38, 
	39, 38, 36,

	//KORPUS1
	//Front:
	40, 41, 42,
	43, 42, 40,
	//Tyl:
	44, 45, 46,
	47, 46, 44,
	//Lewo:
	48, 49, 50,
	51, 50, 48,
	//Prawo:
	52, 53, 54,
	55, 54, 52,
	//Dol:
	56, 57, 58,
	59, 56, 58,
	//Gora:
	60, 61, 63,
	62, 63, 61,

	//KORPUS2
	//Front:
	64, 65, 66,
	67, 66, 64,
	//Tyl:
	68, 69, 70,
	71, 70, 68,
	//Lewo:
	72, 73, 74,
	75, 74, 72,
	//Prawo:
	76, 77, 78,
	79, 78, 76,
	//Dol:
	80, 81, 82,
	83, 80, 82,
	//Gora:
	84, 85, 87,
	86, 87, 85,

	//SIODLO1
	//Front:
	88, 89, 90,
	91, 90, 88,
	//Tyl:
	92, 93, 94,
	95, 94, 92,
	//Lewo:
	96, 97, 98,
	99, 98, 96,
	//Prawo:
	100, 101, 102,
	103, 102, 100,
	//Dol:
	104, 105, 106,
	107, 104, 106,
	//Gora:
	108, 109, 111,
	109, 111, 110,

	//SIODLO2
	//Front:
	112, 113, 114,
	115, 114, 112,
	//Tyl:
	116, 117, 118,
	119, 118, 116,
	//Lewo:
	120, 121, 122,
	123, 122, 120,
	//Prawo:
	124, 125, 126,
	127, 126, 124,
	//Dol:
	128, 129, 130,
	131, 128, 130,
	//Gora:
	132, 133, 135,
	134, 135, 133,

	//KORPUS3
	//Front:
	136, 137, 138,
	139, 138, 136,
	//Tyl:
	140, 141, 142,
	143, 142, 140,
	//Lewo:
	144, 145, 146,
	147, 146, 144,
	//Prawo:
	148, 149, 150,
	151, 150, 148,
	//Dol:
	152, 153, 154,
	155, 152, 154,
	//Gora:
	156, 157, 159,
	158, 159, 157,

		//KORPUS4
	//Tyl:
	161, 162, 160,
	160, 164, 161,
	164, 163, 160,
	163, 167, 160,
	165, 166, 160,
	166, 167, 160,
	//Lewo:
	169, 170, 171,
	172, 171, 169,
	173, 174, 175,
	176, 175, 173,
	//Prawo:
	177, 178, 179,
	180, 179, 177,
	181, 182, 183,
	184, 183, 181,
	//Dol:
	185, 186, 187,
	188, 185, 187,
	//Gora:
	189, 190, 192,
	191, 192, 190,

	//OPARCIE
	//Front:
	193, 194, 195,
	196, 195, 193,
	//Tyl:
	197, 198, 199,
	200, 199, 197,
	//Lewo:
	201, 202, 203,
	204, 203, 201,
	//Prawo:
	205, 206, 207,
	208, 207, 205,
	//Gora:
	209, 210, 212,
	211, 212, 210,

	//SCIECIE GORNE
	//Tyl:
	213, 214, 215,
	//Lewo:
	216, 217, 218,
	//Prawo:
	219, 220, 221,

	//SCIECIE LEWE
	//Tyl:
	222, 223, 224,
	//Lewo:
	225, 226, 227,
	//Prawo:
	228, 229, 230,
	
	//SCIECIE PRAWE
	//Tyl:
	231, 232, 233,
	//Lewo:
	234, 235, 236,
	//Prawo:
	237, 238, 239,

	//TYLNY LACZNIK
	//Tyl:
	240, 241, 242,
	243, 242, 240,
	//Lewo:
	244, 245, 246,
	//Prawo:
	247, 248, 249,

	//PANEL
	//Tyl:
	250, 251, 252,
	253, 252, 250,
	//Lewo:
	254, 255, 256,
	//Prawo:
	257, 258, 259,
	//Front:
	260, 261, 262,
	263, 262, 260,

	//LAMPA
	//Gora:
	264, 265, 266,
	267, 266, 264,
	//Lewo:
	268, 269, 270,
	//Prawo:
	271, 272, 273,
	//Lewo2:
	274, 275, 276,
	//Prawo2:
	277, 278, 279,
	//Lewo3:
	280, 281, 282,
	//Prawo3:
	283, 284, 285,
	//Lewo4:
	286, 287, 288,
	//Prawo4:
	289, 290, 291,
	//Lewo5:
	292, 293, 294,
	//Prawo5:
	295, 296, 297,
	//Lewo6:
	298, 299, 300,
	//Prawo6:
	301, 302, 303,
	//Dolny front:
	304, 305, 306,
	//Srodkowy front:
	307, 308, 309,
	//Gorny front:
	310, 311, 312,
	313, 312, 310,

	//OBUDOWA TYLU SILNIKA
	//Gora:
	314, 315, 316,
	317, 316, 314,
	//Lewy gorny:
	318, 319, 320,
	321, 320, 318,
	//Prawy gorny:
	322, 323, 324,
	325, 324, 322,
	//Dolny:
	326, 327, 328,
	329, 328, 326,
	//Lewy dolny:
	330, 331, 332,
	333, 332, 330,
	//Prawy dolny:
	334, 335, 336,
	337, 336, 334,


	//MONTOWANIE PEDALOW
	//Dol:
	338, 339, 340,
	341, 340, 338,
	//Front:
	342, 343, 344,
	345, 344, 342,
	//Tyl:
	346, 347, 348,
	349, 348, 346,
	//Lewy:
	350, 351, 352,
	353, 352, 350,
	//Prawy:
	354, 355, 356,
	357, 356, 354,

	//PEDALY
		//LACZNIK LEWY
	//Front:
	358, 359, 360,
	361, 360, 358,
	//Tyl:
	362, 363, 364,
	365, 364, 362,
	//Dol:
	366, 367, 368,
	369, 368, 366,
	//Gora:
	370, 371, 372,
	373, 372, 370,
		//PEDAL LEWY
	//Front
	374, 375, 376,
	377, 376, 374,
	//Tyl
	378, 379, 380,
	381, 380, 378,
	//Lewy
	382, 383, 384,
	385, 384, 382,
	//Prawy
	386, 387, 388,
	389, 388, 386,
	//Dol
	390, 391, 392,
	393, 392, 390,
	//Gora
	394, 395, 396,
	397, 396, 394,
		//LACZNIK PRAWY
	//Front:
	398, 399, 400,
	401, 400, 398,
	//Tyl:
	402, 403, 404,
	405, 404, 402,
	//Dol:
	406, 407, 408,
	409, 408, 406,
	//Gora:
	410, 411, 412,
	413, 412, 410,
		//PEDAL PRAWY
	//Front
	414, 415, 416,
	417, 416, 414,
	//Tyl
	418, 419, 420,
	421, 420, 418,
	//Lewy
	422, 423, 424,
	425, 424, 422,
	//Prawy
	426, 427, 428,
	429, 428, 426,
	//Dol
	430, 431, 432,
	433, 432, 430,
	//Gora
	434, 435, 436,
	437, 436, 434,


	//KIEROWNICA
		//LACZNIK
	//Lewy
	438, 439, 440,
	441, 440, 438,
	//Prawy
	442, 443, 444,
	445, 444, 442,
	//Dol
	446, 447, 448,
	449, 448, 446,
	//Gora
	450, 451, 452,
	453, 452, 450,
		//CENTRUM
	//Front
	454, 455, 456,
	457, 456, 454,
	//Tyl
	458, 459, 460,
	461, 460, 458,
	//Lewy
	462, 463, 464,
	465, 464, 462,
	//Prawy
	466, 467, 468,
	469, 468, 466,
	//Dol
	470, 471, 472,
	473, 472, 470,
	//Gora
	474, 475, 476,
	477, 476, 474,
		//LEWY UCHWYT 1
	//Front
	478, 479, 480,
	481, 480, 478,
	//Tyl
	482, 483, 484,
	485, 484, 482,
	//Dol
	486, 487, 488,
	489, 488, 486,
	//Gora
	490, 491, 492,
	493, 492, 490,
		//LEWY UCHWYT 2
	//Front
	494, 495, 496,
	497, 496, 494,
	//Tyl
	498, 499, 500,
	501, 500, 498,
	//Lewo
	502, 503, 504,
	505, 504, 502,
	//Dol
	506, 507, 508,
	509, 508, 506,
	//Gora
	513, 512, 510,
	512, 511, 510,
		//PRAWY UCHWYT 1
	//Front
	514, 515, 516,
	517, 516, 514,
	//Tyl
	518, 519, 520,
	521, 520, 518,
	//Dol
	522, 523, 524,
	525, 524, 522,
	//Gora
	526, 527, 528,
	529, 528, 526,
		//PRAWY UCHWYT 2
	//Front
	530, 531, 532,
	533, 532, 530,
	//Tyl
	534, 535, 536,
	537, 536, 534,
	//Lewo
	538, 539, 540,
	541, 540, 538,
	//Dol
	542, 543, 544,
	545, 544, 542,
	//Gora
	546, 547, 548,
	549, 548, 546,


	//ODPYCHANIE BOCZNE
		//LACZNIK LEWY
	//Front:
	550, 551, 552,
	553, 552, 550,
	//Tyl:
	554, 555, 556,
	557, 556, 554,
	//Dol:
	558, 559, 560,
	561, 560, 558,
	//Gora:
	562, 563, 564,
	565, 564, 562,
		//LACZNIK PRAWY
	//Front:
	566, 567, 568,
	569, 568, 566,
	//Tyl:
	570, 571, 572,
	573, 572, 570,
	//Dol:
	574, 575, 576,
	577, 576, 574,
	//Gora:
	578, 579, 580,
	581, 580, 578,

	//MONITO-WYSWIETLACZ-ELEMENTY_START:

		//RAMA
			//GORNA
	//Front:
	582, 583, 584,
	585, 584, 582,
	//Gora:
	586, 587, 588,
	589, 588, 586,
	//Dol:
	590, 591, 592,
	593, 592, 590,
			//DOL
	//Front:
	594, 595, 596,
	597, 596, 594,
	//Gora:
	598, 599, 600,
	601, 600, 598,
	//Dol:
	602, 603, 604,
	605, 604, 602,
			//LEWA
	//Front:
	606, 607, 608,
	609, 608, 606,
	//Gora:
	610, 611, 612,
	613, 612, 610,
	//Dol:
	614, 615, 616,
	617, 616, 614,
			//PRAWA
	//Front:
	618, 619, 620,
	621, 620, 618,
	//Gora:
	622, 623, 624,
	625, 624, 622,
	//Dol:
	626, 627, 628,
	629, 628, 626,

};

//Na monitorze (odczyty):
GLfloat Mon_Vertices[] =
{
	//Pozycja XYZ			Kolory						Wspolrzedne tekstury ze zrodla 2D		Normalne wektory

	//WSKAZNIK KIERUNKU: CENTRUM
	-0.07f, 0.02f, 0.0f,	1.0f, 1.0f, 0.0f,			0.45f, 0.25f,							0.0f, 0.0f, 1.0f,
	0.0f, 0.02f, -0.07f,	1.0f, 1.0f, 0.0f,			0.45f, 0.35f,							0.0f, 0.0f, 1.0f,
	0.07f, 0.02f, 0.0f,		1.0f, 1.0f, 0.0f,			0.55f, 0.35f,							0.0f, 0.0f, 1.0f,
	0.0f, 0.02f, 0.07f,		1.0f, 1.0f, 0.0f,			0.55f, 0.25f,							0.0f, 0.0f, 1.0f,
	//WSKAZNIK KIERUNKU: WSKAZOWKA
	-0.03f, 0.015f, 0.0f,	1.0f, 0.0f, 0.0f,			0.45f, 0.25f,							0.0f, 0.0f, 1.0f,
	0.0f, 0.015f, 0.35f,	1.0f, 0.0f, 0.0f,			0.50f, 0.35f,							0.0f, 0.0f, 1.0f,
	0.03f, 0.015f, 0.0f,	1.0f, 0.0f, 0.0f,			0.55f, 0.25f,							0.0f, 0.0f, 1.0f,

	//WSKAZNIK ENERGII: CENTRUM
	-0.07f, 0.02f, 0.0f,	0.2f, 0.0f, 1.0f,			0.45f, 0.25f,							0.0f, 0.0f, 1.0f,
	0.0f, 0.02f, -0.07f,	0.2f, 0.0f, 1.0f,			0.45f, 0.35f,							0.0f, 0.0f, 1.0f,
	0.07f, 0.02f, 0.0f,		0.2f, 0.0f, 1.0f,			0.55f, 0.35f,							0.0f, 0.0f, 1.0f,
	0.0f, 0.02f, 0.07f,		0.2f, 0.0f, 1.0f,			0.55f, 0.25f,							0.0f, 0.0f, 1.0f,
	//WSKAZNIK ENERGII: WSKAZOWKA
	-0.03f, 0.015f, 0.0f,	1.0f, 0.0f, 0.0f,			0.45f, 0.25f,							0.0f, 0.0f, 1.0f,
	0.0f, 0.015f, 0.35f,	1.0f, 0.0f, 0.0f,			0.50f, 0.35f,							0.0f, 0.0f, 1.0f,
	0.03f, 0.015f, 0.0f,	1.0f, 0.0f, 0.0f,			0.55f, 0.25f,							0.0f, 0.0f, 1.0f,
	//WSKAZNIK ENERGII: IKONA
	0.0f, 0.005f, 0.0f,		1.0f, 1.0f, 0.0f,			0.5f, 0.3f,								0.0f, 0.0f, 1.0f,
	0.16f, 0.005f, -0.05f,	1.0f, 1.0f, 0.0f,			0.55f, 0.3f,							0.0f, 0.0f, 1.0f,
	0.0f, 0.005f, 0.35f,	1.0f, 1.0f, 0.0f,			0.5f, 0.35f,							0.0f, 0.0f, 1.0f,
	-0.16f, 0.005f, 0.05f,	1.0f, 1.0f, 0.0f,			0.45f, 0.3f,							0.0f, 0.0f, 1.0f,
	0.0f, 0.005f, -0.35f,	1.0f, 1.0f, 0.0f,			0.5f, 0.25f,							0.0f, 0.0f, 1.0f,
	//WSKAZNIK ENERGII: LINIA
	0.0f, 0.01f, 0.0f,		0.1f, 0.1f, 0.1f,			0.0f, 0.0f,								0.0f, 0.0f, 1.0f,
	0.04f, 0.01f, -0.4f,	0.1f, 0.1f, 0.1f,			0.0f, 0.2f,								0.0f, 0.0f, 1.0f,
	-0.04f, 0.01f, -0.4f,	0.1f, 0.1f, 0.1f,			1.0f, 0.0f,								0.0f, 0.0f, 1.0f,

	//WSKAZNIK KIERUNKU: ROZA
		//DUZE STRZALKI
	-0.03f, 0.005f, 0.03f,	0.0f, 1.0f, 0.0f,			0.45f, 0.25f,							0.0f, 0.0f, 1.0f,
	0.0f, 0.005f, 0.3f,		0.0f, 1.0f, 0.0f,			0.5f, 0.35f,							0.0f, 0.0f, 1.0f,
	0.03f, 0.005f, 0.03f,	0.0f, 1.0f, 0.0f,			0.55f, 0.25f,							0.0f, 0.0f, 1.0f,
	0.3f, 0.005f, 0.0f,		0.0f, 1.0f, 0.0f,			0.5f, 0.35f,							0.0f, 0.0f, 1.0f,
	0.03f, 0.005f, -0.03f,	0.0f, 1.0f, 0.0f,			0.45f, 0.25f,							0.0f, 0.0f, 1.0f,
	0.0f, 0.005f, -0.3f,	0.0f, 1.0f, 0.0f,			0.5f, 0.35f,							0.0f, 0.0f, 1.0f,
	-0.03f, 0.005f, -0.03f,	0.0f, 1.0f, 0.0f,			0.55f, 0.25f,							0.0f, 0.0f, 1.0f,
	-0.3f, 0.005f, 0.0f,	0.0f, 1.0f, 0.0f,			0.5f, 0.35f,							0.0f, 0.0f, 1.0f,
		//MALE STRZALKI
	-0.03f, 0.0052f, 0.0f,	0.0f, 1.0f, 0.0f,			0.45f, 0.25f,							0.0f, 0.0f, 1.0f,
	-0.15f, 0.0052f, 0.15f,	0.0f, 1.0f, 0.0f,			0.5f, 0.35f,							0.0f, 0.0f, 1.0f,
	0.0f, 0.0052f, 0.03f,	0.0f, 1.0f, 0.0f,			0.55f, 0.25f,							0.0f, 0.0f, 1.0f,
	0.15f, 0.0052f, 0.15f,	0.0f, 1.0f, 0.0f,			0.5f, 0.35f,							0.0f, 0.0f, 1.0f,
	0.03f, 0.0052f, 0.0f,	0.0f, 1.0f, 0.0f,			0.45f, 0.25f,							0.0f, 0.0f, 1.0f,
	0.15f, 0.0052f, -0.15f,	0.0f, 1.0f, 0.0f,			0.5f, 0.35f,							0.0f, 0.0f, 1.0f,
	0.0f, 0.0052f, -0.03f,	0.0f, 1.0f, 0.0f,			0.55f, 0.25f,							0.0f, 0.0f, 1.0f,
	-0.15f, 0.0052f, -0.15f,0.0f, 1.0f, 0.0f,			0.5f, 0.35f,							0.0f, 0.0f, 1.0f,
		//CENTRUM
	-0.03f, 0.0052f, 0.0f,	0.0f, 1.0f, 0.0f,			0.45f, 0.25f,							0.0f, 0.0f, 1.0f,
	0.0f, 0.0052f, 0.03f,	0.0f, 1.0f, 0.0f,			0.45f, 0.35f,							0.0f, 0.0f, 1.0f,
	0.03f, 0.0052f, 0.0f,	0.0f, 1.0f, 0.0f,			0.55f, 0.35f,							0.0f, 0.0f, 1.0f,
	0.00f, 0.0052f, -0.03f,	0.0f, 1.0f, 0.0f,			0.55f, 0.25f,							0.0f, 0.0f, 1.0f,

	//WSKAZNIK ODLEGLOSCI: CENTRUM
	-0.07f, 0.02f, 0.0f,	0.0f, 1.0f, 0.2f,			0.45f, 0.25f,							0.0f, 0.0f, 1.0f,
	0.0f, 0.02f, -0.07f,	0.0f, 1.0f, 0.2f,			0.45f, 0.35f,							0.0f, 0.0f, 1.0f,
	0.07f, 0.02f, 0.0f,		0.0f, 1.0f, 0.2f,			0.55f, 0.35f,							0.0f, 0.0f, 1.0f,
	0.0f, 0.02f, 0.07f,		0.0f, 1.0f, 0.2f,			0.55f, 0.25f,							0.0f, 0.0f, 1.0f,
	//WSKAZNIK ODLEGLOSCI: WSKAZOWKA
	-0.03f, 0.015f, 0.0f,	1.0f, 0.0f, 0.0f,			0.45f, 0.25f,							0.0f, 0.0f, 1.0f,
	0.0f, 0.015f, 0.35f,	1.0f, 0.0f, 0.0f,			0.50f, 0.35f,							0.0f, 0.0f, 1.0f,
	0.03f, 0.015f, 0.0f,	1.0f, 0.0f, 0.0f,			0.55f, 0.25f,							0.0f, 0.0f, 1.0f,
	//WSKAZNIK ODLEGLOSCI: IKONA
	0.0f, 0.005f, 0.0f,		0.0f, 1.0f, 0.0f,			1.0f, 0.3f,								0.0f, 0.0f, 1.0f,
	0.2f, 0.005f, 0.1f,		0.0f, 1.0f, 0.0f,			0.0f, 0.25f,							0.0f, 0.0f, 1.0f,
	0.1f, 0.005f, 0.2f,		0.0f, 1.0f, 0.0f,			0.0f, 0.35f,							0.0f, 0.0f, 1.0f,
	-0.1f, 0.005f, 0.2f,	0.0f, 1.0f, 0.0f,			0.0f, 0.25f,							0.0f, 0.0f, 1.0f,
	-0.2f, 0.005f, 0.1f,	0.0f, 1.0f, 0.0f,			0.0f, 0.35f,							0.0f, 0.0f, 1.0f,
	-0.2f, 0.005f, -0.1f,	0.0f, 1.0f, 0.0f,			0.0f, 0.25f,							0.0f, 0.0f, 1.0f,
	-0.1f, 0.005f, -0.2f,	0.0f, 1.0f, 0.0f,			0.0f, 0.35f,							0.0f, 0.0f, 1.0f,
	0.1f, 0.005f, -0.2f,	0.0f, 1.0f, 0.0f,			0.0f, 0.25f,							0.0f, 0.0f, 1.0f,
	0.2f, 0.005f, -0.1f,	0.0f, 1.0f, 0.0f,			0.0f, 0.35f,							0.0f, 0.0f, 1.0f,
	//WSKAZNIK ODLEGLOSCI: LINIA
	0.0f, 0.01f, 0.0f,		0.1f, 0.1f, 0.1f,			0.0f, 0.0f,								0.0f, 0.0f, 1.0f,
	0.04f, 0.01f, -0.4f,	0.1f, 0.1f, 0.1f,			0.0f, 1.0f,								0.0f, 0.0f, 1.0f,
	-0.04f, 0.01f, -0.4f,	0.1f, 0.1f, 0.1f,			0.0f, 0.0f,								0.0f, 0.0f, 1.0f,

	//WSKAZNIK PREDKOSCI: CENTRUM
	-0.07f, 0.02f, 0.0f,	1.0f, 0.0f, 0.0f,			0.45f, 0.25f,							0.0f, 0.0f, 1.0f,
	0.0f, 0.02f, -0.07f,	1.0f, 0.0f, 0.0f,			0.45f, 0.35f,							0.0f, 0.0f, 1.0f,
	0.07f, 0.02f, 0.0f,		1.0f, 0.0f, 0.0f,			0.55f, 0.35f,							0.0f, 0.0f, 1.0f,
	0.0f, 0.02f, 0.07f,		1.0f, 0.0f, 0.0f,			0.55f, 0.25f,							0.0f, 0.0f, 1.0f,
	//WSKAZNIK PREDKOSCI: WSKAZOWKA
	-0.03f, 0.015f, 0.0f,	1.0f, 0.0f, 0.0f,			0.45f, 0.25f,							0.0f, 0.0f, 1.0f,
	0.0f, 0.015f, 0.35f,	1.0f, 0.0f, 0.0f,			0.50f, 0.35f,							0.0f, 0.0f, 1.0f,
	0.03f, 0.015f, 0.0f,	1.0f, 0.0f, 0.0f,			0.55f, 0.25f,							0.0f, 0.0f, 1.0f,
	//WSKAZNIK PREDKOSCI: IKONA
	0.2f, 0.005f, 0.0f,		1.0f, 1.0f, 0.0f,			0.45f, 0.25f,							0.0f, 0.0f, 1.0f,
	0.0f, 0.005f, 0.2f,		1.0f, 1.0f, 0.0f,			0.5f, 0.35f,							0.0f, 0.0f, 1.0f,
	-0.2f, 0.005f, 0.0f,	1.0f, 1.0f, 0.0f,			0.55f, 0.25f,							0.0f, 0.0f, 1.0f,
	0.2f, 0.005f, -0.2f,	1.0f, 1.0f, 0.0f,			0.45f, 0.25f,							0.0f, 0.0f, 1.0f,
	0.0f, 0.005f, 0.0f,		1.0f, 1.0f, 0.0f,			0.5f, 0.35f,							0.0f, 0.0f, 1.0f,
	-0.2f, 0.005f, -0.2f,	1.0f, 1.0f, 0.0f,			0.55f, 0.25f,							0.0f, 0.0f, 1.0f,
	//WSKAZNIK PREDKOSCI: LINIA
	0.0f, 0.01f, 0.0f,		0.1f, 0.1f, 0.1f,			0.0f, 0.0f,								0.0f, 0.0f, 1.0f,
	0.04f, 0.01f, -0.4f,	0.1f, 0.1f, 0.1f,			0.0f, 0.2f,								0.0f, 0.0f, 1.0f,
	-0.04f, 0.01f, -0.4f,	0.1f, 0.1f, 0.1f,			1.0f, 0.0f,								0.0f, 0.0f, 1.0f,

};

GLuint Mon_Indices[] =
{
	//WSKAZNIK KIERUNKU: CENTRUM
	0, 1, 2,
	0, 2, 3,
	//WSKAZNIK KIERUNKU: WSKAZOWKA
	4, 5, 6,

	//WSKAZNIK ENERGII: CENTRUM
	7, 8, 9,
	7, 9, 10,
	//WSKAZNIK ENERGII: WSKAZOWKA
	11, 12, 13,
	//WSKAZNIK ENERGII: IKONA
	14, 15, 16,
	14, 17, 18,
	//WSKAZNIK ENERGII: LINIA
	19, 20, 21,

	//WSKAZNIK KIERUNKU: ROZA DUZA
	22, 23, 24,
	24, 25, 26,
	26, 27, 28,
	28, 29, 22,
	//WSKAZNIK KIERUNKU: ROZA MALA
	30, 31, 32,
	32, 33, 34,
	34, 35, 36,
	36, 37, 30,
	//WSKAZNIK KIERUNKU: ROZA CENTRUM
	38, 39, 40,
	38, 40, 41,

	//WSKAZNIK ODLEGLOSCI: CENTRUM
	42, 43, 44,
	42, 44, 45,
	//WSKAZNIK ODLEGLOSCI: WSKAZOWKA
	46, 47, 48,
	//WSKAZNIK ODLEGLOSCI: IKONA
	50, 49, 51,
	52, 49, 53,
	54, 49, 55,
	56, 49, 57,
	//WSKAZNIK ODLEGLOSCI: LINIA
	58, 59, 60,

	//WSKAZNIK PREDKOSC: CENTRUM
	61, 62, 63,
	61, 63, 64,
	//WSKAZNIK PREDKOSC: WSKAZOWKA
	65, 66, 67,
	//WSKAZNIK PREDKOSC: IKONA
	68, 69, 70,
	71, 72, 73,
	//WSKAZNIK PREDKOSC: LINIA
	74, 75, 76,

};


//KIEROWCA!!!
GLfloat Ty_Vertices[] =
{
	//Pozycja XYZ				Kolory						Wspolrzedne tekstury ze zrodla 2D	Normalne wektory

	//LEWY BUT
		//SPOD:
	-2.75f, -1.13f, -10.0f,		0.2f, 0.2f, 1.0f,			1.0f, 0.7f,							0.0f, 0.0f, 1.0f,
	-2.0f, -1.48f, -13.0f,		0.2f, 0.2f, 1.0f,			0.33f, 0.8f,						0.0f, 0.0f, 1.0f,
	-3.5f, -1.38f, -13.0f,		0.2f, 0.2f, 1.0f,			0.33f, 0.6f,						0.0f, 0.0f, 1.0f,
	-3.0f, -1.505f, -14.0f,		0.2f, 0.2f, 1.0f,			0.0f, 0.65f,						0.0f, 0.0f, 1.0f,
	-2.5f, -1.555f, -14.0f,		0.2f, 0.2f, 1.0f,			0.0f, 0.75f,						0.0f, 0.0f, 1.0f,
	//Dol - boki:
	-2.75f, -1.13f, -10.0f,		0.3f, 0.0f, 0.7f,			3.0f, 0.8f,							0.0f, 0.0f, 1.0f,
	-2.0f, -1.48f, -13.0f,		0.3f, 0.0f, 0.7f,			1.0f, 0.8f,							0.0f, 0.0f, 1.0f,
	-3.5f, -1.38f, -13.0f,		0.3f, 0.0f, 0.7f,			1.0f, 0.8f,							0.0f, 0.0f, 1.0f,
	-3.0f, -1.505f, -14.0f,		0.3f, 0.0f, 0.7f,			0.00f, 0.8f,						0.0f, 0.0f, 1.0f,
	-2.5f, -1.555f, -14.0f,		0.3f, 0.0f, 0.7f,			0.0f, 0.8f,							0.0f, 0.0f, 1.0f,
	//Gora - boki:
	-2.5f, -0.655f, -12.5f,		0.3f, 0.0f, 0.7f,			1.0f, 1.0f,							0.0f, 0.0f, 1.0f,
	-3.0f, -0.605f, -12.5f,		0.3f, 0.0f, 0.7f,			1.0f, 1.0f,							0.0f, 0.0f, 1.0f,
	-2.25f, -0.6675f, -13.0f,	0.3f, 0.0f, 0.7f,			0.5f, 1.0f,							0.0f, 0.0f, 1.0f,
	-3.25f, -0.5925f, -13.0f,	0.3f, 0.0f, 0.7f,			0.5f, 1.0f,							0.0f, 0.0f, 1.0f,
	-3.0f, -0.605f, -13.75f,	0.3f, 0.0f, 0.7f,			0.0f, 1.0f,							0.0f, 0.0f, 1.0f,
	-2.5f, -0.655f, -13.75f,	0.3f, 0.0f, 0.7f,			0.0f, 1.0f,							0.0f, 0.0f, 1.0f,
	//Lacznik:
	-2.75f, -0.555f, -12.6f,	0.0f, 0.0f, 0.0f,			1.0f, 0.8f,							0.0f, 0.0f, 1.0f,
	-2.375f, -0.6175f, -13.0f,	0.0f, 0.0f, 0.0f,			0.5f, 0.8f,							0.0f, 0.0f, 1.0f,
	-3.125f, -0.5425f, -13.0f,	0.0f, 0.0f, 0.0f,			0.5f, 0.8f,							0.0f, 0.0f, 1.0f,
	-2.75f, -0.63f, -13.7f,		0.0f, 0.0f, 0.0f,			0.0f, 0.8f,							0.0f, 0.0f, 1.0f,


	//PRAWY BUT
	//Spod:
	2.75f, -1.13f, -10.0f,		0.2f, 0.2f, 1.0f,			1.0f, 0.7f,							0.0f, 0.0f, 1.0f,
	2.0f, -1.48f, -13.0f,		0.2f, 0.2f, 1.0f,			0.33f, 0.8f,						0.0f, 0.0f, 1.0f,
	3.5f, -1.38f, -13.0f,		0.2f, 0.2f, 1.0f,			0.33f, 0.6f,						0.0f, 0.0f, 1.0f,
	3.0f, -1.505f, -14.0f,		0.2f, 0.2f, 1.0f,			0.0f, 0.65f,						0.0f, 0.0f, 1.0f,
	2.5f, -1.555f, -14.0f,		0.2f, 0.2f, 1.0f,			0.0f, 0.75f,						0.0f, 0.0f, 1.0f,
	//Dol - boki:
	2.75f, -1.13f, -10.0f,		0.3f, 0.0f, 0.7f,			3.0f, 0.8f,							0.0f, 0.0f, 1.0f,
	2.0f, -1.48f, -13.0f,		0.3f, 0.0f, 0.7f,			1.0f, 0.8f,							0.0f, 0.0f, 1.0f,
	3.5f, -1.38f, -13.0f,		0.3f, 0.0f, 0.7f,			1.0f, 0.8f,							0.0f, 0.0f, 1.0f,
	3.0f, -1.505f, -14.0f,		0.3f, 0.0f, 0.7f,			0.00f, 0.8f,						0.0f, 0.0f, 1.0f,
	2.5f, -1.555f, -14.0f,		0.3f, 0.0f, 0.7f,			0.0f, 0.8f,							0.0f, 0.0f, 1.0f,
	//Gora - boki:
	2.5f, -0.655f, -12.5f,		0.3f, 0.0f, 0.7f,			1.0f, 1.0f,							0.0f, 0.0f, 1.0f,
	3.0f, -0.605f, -12.5f,		0.3f, 0.0f, 0.7f,			1.0f, 1.0f,							0.0f, 0.0f, 1.0f,
	2.25f, -0.6675f, -13.0f,	0.3f, 0.0f, 0.7f,			0.5f, 1.0f,							0.0f, 0.0f, 1.0f,
	3.25f, -0.5925f, -13.0f,	0.3f, 0.0f, 0.7f,			0.5f, 1.0f,							0.0f, 0.0f, 1.0f,
	3.0f, -0.605f, -13.75f,		0.3f, 0.0f, 0.7f,			0.0f, 1.0f,							0.0f, 0.0f, 1.0f,
	2.5f, -0.655f, -13.75f,		0.3f, 0.0f, 0.7f,			0.0f, 1.0f,							0.0f, 0.0f, 1.0f,
	//Lacznik:
	2.75f, -0.555f, -12.6f,		0.0f, 0.0f, 0.0f,			1.0f, 0.8f,							0.0f, 0.0f, 1.0f,
	2.375f, -0.6175f, -13.0f,	0.0f, 0.0f, 0.0f,			0.5f, 0.8f,							0.0f, 0.0f, 1.0f,
	3.125f, -0.5425f, -13.0f,	0.0f, 0.0f, 0.0f,			0.5f, 0.8f,							0.0f, 0.0f, 1.0f,
	2.75f, -0.63f, -13.7f,		0.0f, 0.0f, 0.0f,			0.0f, 0.8f,							0.0f, 0.0f, 1.0f,


	//LEWA NOGA 1
	//Dol:
	-2.75f, -0.555f, -12.6f,	0.3f, 0.0f, 0.7f,			1.0f, 0.8f,							0.0f, 0.0f, 1.0f,
	-2.375f, -0.6175f, -13.0f,	0.3f, 0.0f, 0.7f,			0.5f, 0.8f,							0.0f, 0.0f, 1.0f,
	-3.125f, -0.5425f, -13.0f,	0.3f, 0.0f, 0.7f,			0.5f, 0.8f,							0.0f, 0.0f, 1.0f,
	-2.75f, -0.63f, -13.7f,		0.3f, 0.0f, 0.7f,			0.0f, 0.8f,							0.0f, 0.0f, 1.0f,
	//Gora:
	-2.45f, 1.445f, -14.65f,	0.3f, 0.0f, 0.7f,			1.0f, 1.0f,							0.0f, 0.0f, 1.0f,
	-1.775f, 1.3825f, -14.8f,	0.3f, 0.0f, 0.7f,			0.5f, 1.0f,							0.0f, 0.0f, 1.0f,
	-2.725f, 1.4575f, -15.2f,	0.3f, 0.0f, 0.7f,			0.5f, 1.0f,							0.0f, 0.0f, 1.0f,
	-2.05f, 1.37f, -15.6f,		0.3f, 0.0f, 0.7f,			0.0f, 1.0f,							0.0f, 0.0f, 1.0f,
	//Boki:
	-2.15f, 0.445f, -13.7f,		0.3f, 0.0f, 0.7f,			0.75f, 0.93f,						0.0f, 0.0f, 1.0f,
	-2.85f, 0.3825f, -13.7f,	0.3f, 0.0f, 0.7f,			0.75f, 0.93f,						0.0f, 0.0f, 1.0f,
	-2.15f, 0.4575f, -14.5f,	0.3f, 0.0f, 0.7f,			0.25f, 0.93f,						0.0f, 0.0f, 1.0f,
	-2.85f, 0.37f, -14.5f,		0.3f, 0.0f, 0.7f,			0.25f, 0.93f,						0.0f, 0.0f, 1.0f,


	//LEWA NOGA 2
	//Przod
	-2.05f, 1.37f, -15.6f,		0.3f, 0.0f, 0.7f,			0.0f, 0.8f,							0.0f, 0.0f, 1.0f,
	-2.55f, 1.77f, -15.8f,		0.3f, 0.0f, 0.7f,			0.0f, 0.9f,							0.0f, 0.0f, 1.0f,
	-1.55f, 1.77f, -15.4f,		0.3f, 0.0f, 0.7f,			0.0f, 0.9f,							0.0f, 0.0f, 1.0f,
	-2.05f, 2.27f, -15.6f,		0.3f, 0.0f, 0.7f,			0.0f, 1.0f,							0.0f, 0.0f, 1.0f,
	//Tyl
	-0.7f, 0.8f, -18.0f,		0.3f, 0.0f, 0.7f,			1.0f, 0.8f,							0.0f, 0.0f, 1.0f,
	-1.3f, 1.25f, -18.5f,		0.3f, 0.0f, 0.7f,			1.0f, 0.9f,							0.0f, 0.0f, 1.0f,
	-0.1f, 1.25f, -17.5f,		0.3f, 0.0f, 0.7f,			1.0f, 0.9f,							0.0f, 0.0f, 1.0f,
	-0.9f, 1.7f, -18.0f,		0.3f, 0.0f, 0.7f,			1.0f, 1.0f,							0.0f, 0.0f, 1.0f,
	//Boki
	-1.95f, 1.17f, -16.8f,		0.3f, 0.0f, 0.7f,			0.5f, 0.85f,						0.0f, 0.0f, 1.0f,
	-1.25f, 1.15f, -16.6f,		0.3f, 0.0f, 0.7f,			0.5f, 0.85f,						0.0f, 0.0f, 1.0f,
	-1.85f, 1.92f, -16.7f,		0.3f, 0.0f, 0.7f,			0.5f, 0.95f,						0.0f, 0.0f, 1.0f,
	-1.35f, 2.02f, -16.6f,		0.3f, 0.0f, 0.7f,			0.5f, 0.95f,						0.0f, 0.0f, 1.0f,


	//LEWE KOLANO
	//Spod:
	-2.45f, 1.445f, -14.65f,	0.3f, 0.0f, 0.7f,			1.0f, 0.8f,							0.0f, 0.0f, 1.0f,
	-1.775f, 1.3825f, -14.8f,	0.3f, 0.0f, 0.7f,			0.5f, 0.8f,							0.0f, 0.0f, 1.0f,
	-2.725f, 1.4575f, -15.2f,	0.3f, 0.0f, 0.7f,			0.5f, 0.8f,							0.0f, 0.0f, 1.0f,
	-2.05f, 1.37f, -15.6f,		0.3f, 0.0f, 0.7f,			0.0f, 0.8f,							0.0f, 0.0f, 1.0f,
	//Tyl
	-2.05f, 1.37f, -15.6f,		0.3f, 0.0f, 0.7f,			0.0f, 0.8f,							0.0f, 0.0f, 1.0f,
	-2.55f, 1.77f, -15.8f,		0.3f, 0.0f, 0.7f,			0.0f, 0.9f,							0.0f, 0.0f, 1.0f,
	-1.55f, 1.77f, -15.4f,		0.3f, 0.0f, 0.7f,			0.0f, 0.9f,							0.0f, 0.0f, 1.0f,
	-2.05f, 2.27f, -15.6f,		0.3f, 0.0f, 0.7f,			0.0f, 1.0f,							0.0f, 0.0f, 1.0f,
	//Centrum
	-2.25f, 2.07f, -15.2f,		0.3f, 0.0f, 0.7f,			0.3f, 1.0f,							0.0f, 0.0f, 1.0f,
	-2.30f, 1.87f, -14.9f,		0.3f, 0.0f, 0.7f,			0.1f, 1.0f,							0.0f, 0.0f, 1.0f,


	//PRAWA NOGA 1
	//Dol:
	2.75f, -0.555f, -12.6f,		0.3f, 0.0f, 0.7f,			1.0f, 0.8f,							0.0f, 0.0f, 1.0f,
	2.375f, -0.6175f, -13.0f,	0.3f, 0.0f, 0.7f,			0.5f, 0.8f,							0.0f, 0.0f, 1.0f,
	3.125f, -0.5425f, -13.0f,	0.3f, 0.0f, 0.7f,			0.5f, 0.8f,							0.0f, 0.0f, 1.0f,
	2.75f, -0.63f, -13.7f,		0.3f, 0.0f, 0.7f,			0.0f, 0.8f,							0.0f, 0.0f, 1.0f,
	//Gora:
	2.45f, 1.445f, -14.65f,		0.3f, 0.0f, 0.7f,			1.0f, 1.0f,							0.0f, 0.0f, 1.0f,
	1.775f, 1.3825f, -14.8f,	0.3f, 0.0f, 0.7f,			0.5f, 1.0f,							0.0f, 0.0f, 1.0f,
	2.725f, 1.4575f, -15.2f,	0.3f, 0.0f, 0.7f,			0.5f, 1.0f,							0.0f, 0.0f, 1.0f,
	2.05f, 1.37f, -15.6f,		0.3f, 0.0f, 0.7f,			0.0f, 1.0f,							0.0f, 0.0f, 1.0f,
	//Boki:
	2.15f, 0.445f, -13.7f,		0.3f, 0.0f, 0.7f,			0.75f, 0.93f,						0.0f, 0.0f, 1.0f,
	2.85f, 0.3825f, -13.7f,		0.3f, 0.0f, 0.7f,			0.75f, 0.93f,						0.0f, 0.0f, 1.0f,
	2.15f, 0.4575f, -14.5f,		0.3f, 0.0f, 0.7f,			0.25f, 0.93f,						0.0f, 0.0f, 1.0f,
	2.85f, 0.37f, -14.5f,		0.3f, 0.0f, 0.7f,			0.25f, 0.93f,						0.0f, 0.0f, 1.0f,


	//PRAWA NOGA 2
	//Przod
	2.05f, 1.37f, -15.6f,		0.3f, 0.0f, 0.7f,			0.0f, 0.8f,							0.0f, 0.0f, 1.0f,
	2.55f, 1.77f, -15.8f,		0.3f, 0.0f, 0.7f,			0.0f, 0.9f,							0.0f, 0.0f, 1.0f,
	1.55f, 1.77f, -15.4f,		0.3f, 0.0f, 0.7f,			0.0f, 0.9f,							0.0f, 0.0f, 1.0f,
	2.05f, 2.27f, -15.6f,		0.3f, 0.0f, 0.7f,			0.0f, 1.0f,							0.0f, 0.0f, 1.0f,
	//Tyl
	0.7f, 0.8f, -18.0f,			0.3f, 0.0f, 0.7f,			1.0f, 0.8f,							0.0f, 0.0f, 1.0f,
	1.3f, 1.25f, -18.5f,		0.3f, 0.0f, 0.7f,			1.0f, 0.9f,							0.0f, 0.0f, 1.0f,
	0.1f, 1.25f, -17.5f,		0.3f, 0.0f, 0.7f,			1.0f, 0.9f,							0.0f, 0.0f, 1.0f,
	0.9f, 1.7f, -18.0f,			0.3f, 0.0f, 0.7f,			1.0f, 1.0f,							0.0f, 0.0f, 1.0f,
	//Boki
	1.95f, 1.17f, -16.8f,		0.3f, 0.0f, 0.7f,			0.5f, 0.85f,						0.0f, 0.0f, 1.0f,
	1.25f, 1.15f, -16.6f,		0.3f, 0.0f, 0.7f,			0.5f, 0.85f,						0.0f, 0.0f, 1.0f,
	1.85f, 1.92f, -16.7f,		0.3f, 0.0f, 0.7f,			0.5f, 0.95f,						0.0f, 0.0f, 1.0f,
	1.35f, 2.02f, -16.6f,		0.3f, 0.0f, 0.7f,			0.5f, 0.95f,						0.0f, 0.0f, 1.0f,


	//PRAWA KOLANO
	//Spod:
	2.45f, 1.445f, -14.65f,		0.3f, 0.0f, 0.7f,			1.0f, 0.8f,							0.0f, 0.0f, 1.0f,
	1.775f, 1.3825f, -14.8f,	0.3f, 0.0f, 0.7f,			0.5f, 0.8f,							0.0f, 0.0f, 1.0f,
	2.725f, 1.4575f, -15.2f,	0.3f, 0.0f, 0.7f,			0.5f, 0.8f,							0.0f, 0.0f, 1.0f,
	2.05f, 1.37f, -15.6f,		0.3f, 0.0f, 0.7f,			0.0f, 0.8f,							0.0f, 0.0f, 1.0f,
	//Tyl
	2.05f, 1.37f, -15.6f,		0.3f, 0.0f, 0.7f,			0.0f, 0.8f,							0.0f, 0.0f, 1.0f,
	2.55f, 1.77f, -15.8f,		0.3f, 0.0f, 0.7f,			0.0f, 0.9f,							0.0f, 0.0f, 1.0f,
	1.55f, 1.77f, -15.4f,		0.3f, 0.0f, 0.7f,			0.0f, 0.9f,							0.0f, 0.0f, 1.0f,
	2.05f, 2.27f, -15.6f,		0.3f, 0.0f, 0.7f,			0.0f, 1.0f,							0.0f, 0.0f, 1.0f,
	//Centrum
	2.25f, 2.07f, -15.2f,		0.3f, 0.0f, 0.7f,			0.3f, 1.0f,							0.0f, 0.0f, 1.0f,
	2.30f, 1.87f, -14.9f,		0.3f, 0.0f, 0.7f,			0.1f, 1.0f,							0.0f, 0.0f, 1.0f,

	//kopie-lacznik-but
	//lewy:
	-2.5f, -0.655f, -12.5f,		0.3f, 0.0f, 0.7f,			1.0f, 1.0f,							0.0f, 0.0f, 1.0f,
	//prawy:
	2.5f, -0.655f, -12.5f,		0.3f, 0.0f, 0.7f,			1.0f, 1.0f,							0.0f, 0.0f, 1.0f,

	////Tyl
	//-0.5f, -0.5f, -7.5f,	0.0f, 0.5f, 1.0f,			1.0f, 0.8f,								0.0f, 0.0f, -1.0f,
	//-0.5f, 0.5f, -7.5f,		0.0f, 1.0f, 1.0f,			1.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	// 0.5f, 0.5f, -7.5f,		1.0f, 1.0f, 0.0f,			0.0f, 1.0f,								0.0f, 0.0f, -1.0f,
	// 0.5f, -0.5f, -7.5f,	1.0f, 0.5f, 0.0f,			0.0f, 0.8f,								0.0f, 0.0f, -1.0f

};

GLuint Ty_Indices[] =
{
	//BUT LEWY
		//Spod
	0, 1, 2,
	2, 3, 1,
	1, 4, 3,
		//Front
	6, 5, 10,
	10, 5, 11,
	11, 5, 7,
		//Przednie boki
	6, 12, 10,
	7, 13, 11,
		//Boki
	6, 12, 15,
	7, 13, 14,
		//Pieta
	9, 6, 15,
	8, 7, 14,
	14, 8, 9,
	15, 14, 9,
		//Lacznik
	10, 11, 16,
	10, 12, 16,
	11, 13, 16,
	17, 16, 12,
	16, 18, 13,
	19, 12, 17,
	18, 13, 19,
	12, 19, 15,
	13, 19, 14,
	14, 19, 15,


	//BUT PRAWY
		//Spod
	20, 21, 22,
	22, 23, 21,
	21, 24, 23,
		//Front
	26, 25, 30,
	30, 25, 31,
	31, 25, 27,
		//Przednie boki
	26, 32, 30,
	27, 33, 31,
		//Boki
	26, 32, 35,
	27, 33, 34,
		//Pieta
	29, 26, 35,
	28, 27, 34,
	29, 28, 34,
	35, 34, 29,
		//Lacznik
	31, 30, 36,
	30, 32, 36,
	31, 33, 36,
	36, 37, 32,
	36, 38, 33,
	37, 32, 39,
	38, 33, 39,
	32, 39, 35,
	33, 39, 34,
	34, 39, 35,


	//LEWA NOGA 1
	40, 41, 48,
	48, 44, 45,
	40, 48, 44,
	41, 48, 45,

	40, 42, 49,
	49, 44, 46,
	40, 49, 44,
	42, 49, 46,

	43, 41, 50,
	50, 47, 45,
	43, 50, 47,
	41, 50, 45,

	43, 42, 51,
	51, 47, 46,
	43, 51, 47,
	42, 51, 46,


	//LEWA NOGA 2
	52, 53, 60,
	60, 56, 57,
	52, 60, 56,
	53, 60, 57,

	52, 54, 61,
	61, 56, 58,
	52, 61, 56,
	54, 61, 58,

	55, 53, 62,
	62, 59, 57,
	55, 62, 59,
	53, 62, 57,

	55, 54, 63,
	63, 59, 58,
	55, 63, 59,
	54, 63, 58,


	//LEWE KOLANO
		//spod
	66, 68, 69,
	65, 68, 70,
		//Gora
	69, 71, 72,
	70, 71, 72,
		//Dol
	64, 65, 73,
	64, 66, 73,
		//Centrum
	65, 70, 73,
	72, 73, 70,
	66, 69, 73,
	72, 73, 69,


	//PRAWA NOGA 1
	74, 75, 82,
	82, 78, 79,
	74, 82, 78,
	75, 82, 79,

	74, 76, 83,
	83, 78, 80,
	74, 83, 78,
	76, 83, 80,

	77, 75, 84,
	84, 81, 79,
	77, 84, 81,
	75, 84, 79,

	77, 76, 85,
	85, 81, 80,
	77, 85, 81,
	76, 85, 80,


	//PRAWA NOGA 2
	86, 87, 94,
	94, 90, 91,
	86, 94, 90,
	87, 94, 91,

	86, 88, 95,
	95, 90, 92,
	86, 95, 90,
	88, 95, 92,

	89, 87, 96,
	96, 93, 91,
	89, 96, 93,
	87, 96, 91,

	89, 88, 97,
	97, 93, 92,
	89, 97, 93,
	88, 97, 92,


	//PRAWE KOLANO
		//spod
	100, 102, 103,
	99, 102, 104,
		//Gora
	103, 105, 106,
	104, 105, 106,
		//Dol
	98, 99, 107,
	98, 100, 107,
		//Centrum
	99, 104, 107,
	106, 107, 104,
	100, 103, 107,
	106, 107, 103,




};


//Swiatlo:

GLfloat lightVertices[] =
{ // COORDINATES //
	-0.25f, -0.3f, 1.1f,
	-0.3f, -0.3f, -0.8f,
	0.3f, -0.3f, -0.8f,
	0.25f, -0.3f, 1.1f,
	-0.3f, 0.3f, 0.5f,
	-0.3f, 0.3f, -0.8f,
	0.3f, 0.3f, -0.8f,
	0.3f, 0.3f, 0.5f
};

GLuint lightIndices[] =
{
	0, 1, 2,
	0, 2, 3,
	0, 4, 7,
	0, 7, 3,
	3, 7, 6,
	3, 6, 2,
	2, 6, 5,
	2, 5, 1,
	1, 5, 4,
	1, 4, 0,
	4, 5, 6,
	4, 6, 7
};


//Swiatlo2:

GLfloat lightVertices2[] =
{ // COORDINATES //					COLOR
	0.0f, 0.9f, -5.0f,				1.0f, 1.0f, 1.0f, 0.5f,
	-0.6f, 0.2f, 4.5f,				0.0f, 0.0f, 1.0f, 1.0f,
	-0.95f, 0.9f, 4.5f,				0.0f, 0.0f, 1.0f, 1.0f,
	0.95f, 0.9f, 4.5f,				0.0f, 0.0f, 1.0f, 1.0f,
	0.6f, 0.2f, 4.5f, 				0.0f, 0.0f, 1.0f, 1.0f,
	-0.95f, 0.9f, 4.5f,				0.0f, 0.0f, 1.0f, 1.0f,
	-0.6f, 1.6f, 4.5f,				0.0f, 0.0f, 1.0f, 1.0f,
	0.6f, 1.6f, 4.5f, 				0.0f, 0.0f, 1.0f, 1.0f,
	0.95f, 0.9f, 4.5f,				0.0f, 0.0f, 1.0f, 1.0f
};

GLuint lightIndices2[] =
{
	2, 1, 0,
	1, 4, 0,
	4, 3, 0,
	5, 6, 0,
	6, 7, 0,
	7, 8, 0

};


//Odpychanie centralne:
//-11z
GLfloat pushVertices[66 * 3 + 33 * 3 + 17 * 3 + 9 * 3 + 5 * 3];
GLuint pushIndices[66 * 3 + 33 * 3 * 2 + 17 * 3 * 2 + 9 * 3 * 2 + 5 * 3 * 2];

GLfloat pushVertices_front[66 * 3 + 33 * 3 + 17 * 3 + 9 * 3 + 5 * 3];
GLfloat pushVertices_tyl[66 * 3 + 33 * 3 + 17 * 3 + 9 * 3 + 5 * 3];

//Kule:
//
GLfloat KulaVertices[2 * (66 * 3 + 33 * 3 + 17 * 3 + 9 * 3 + 5 * 3)];
GLuint KulaIndices[2 * (66 * 3 + 33 * 3 * 2 + 17 * 3 * 2 + 9 * 3 * 2 + 5 * 3 * 2)];

//Ramy wskazowek
GLfloat Zeg1Vertices[130 * 11 + 65 * 11 + 130 * 11];
GLuint Zeg1Indices[130 * 3 + 65 * 3 + 130 * 3];

GLfloat Zeg2Vertices[130 * 11 + 65 * 11 + 130 * 11];
GLuint Zeg2Indices[130 * 3 + 65 * 3 + 130 * 3];

GLfloat Zeg3Vertices[130 * 11 + 65 * 11 + 130 * 11];
GLuint Zeg3Indices[130 * 3 + 65 * 3 + 130 * 3];

GLfloat Zeg4Vertices[130 * 11 + 65 * 11 + 130 * 11];
GLuint Zeg4Indices[130 * 3 + 65 * 3 + 130 * 3];


int main()
{
	glfwInit();

	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);

	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

	GLFWwindow* window = glfwCreateWindow(1000, 800, "Okno", NULL, NULL);

	if (window == NULL)
	{
		std::cout << "Blad przy wytwarzaniu okna" << std::endl;
		glfwTerminate();
		return -1;
	}

	glfwMakeContextCurrent(window);

	gladLoadGL();

	glViewport(0, 0, 1000, 800);

	Pakiet_Zmiennych zmienne;//Cos mi extern nie dzialalo tutaj jak w poprzednim projekcie(JG)

	//glEnable(GL_BLEND);
	//glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

	//Inicjacja
	{
		//KOLOR: KADLUB
		for (int i = 0; i < sizeof(vertices) / sizeof(GLfloat); i = i + 11) {
			if (!(
				(i >= 161 * 11 && i <= 167 * 11)
				)) {
				vertices[i + 3] = 0.67f;
				vertices[i + 4] = 0.67f;
				vertices[i + 5] = 0.67f;
			}//WNETRZE TYLU ODRZUTU
			else if (i >= 161 * 11 && i <= 167 * 11) {
				vertices[i + 3] = 0.067f;
				vertices[i + 4] = 0.0f;
				vertices[i + 5] = 0.067f;
			}
		}

			//MONITOR
		//WYZNACZANIE POZYCJI GORNEJ RAMKI ZA POMOCA ROTACJI WEKTOROW
		glm::vec3 vec3pom = glm::vec3(0.0f, 0.0f, 0.0f);
		int start = 582;
		for (int i = 0; i < 12; i++) {
			vec3pom = glm::vec3(
				vertices[(start + i) * 11],
				vertices[(start + i) * 11 + 1],
				vertices[(start + i) * 11 + 2]);
			vec3pom = glm::rotate(vec3pom, -0.5880026035475675512456110806250854276017072460559243537260472078359201315933085f, glm::normalize(glm::vec3(1.0f, 0.0f, 0.0f)));
			vertices[(start + i) * 11 + 1] = vec3pom.y;
			vertices[(start + i) * 11 + 2] = vec3pom.z;
			vec3pom = glm::vec3(0.0f, 0.0f, _JG_DL_RAM_MON_POJ_ / 2.0f);
			vec3pom = glm::rotate(vec3pom, -0.5880026035475675512456110806250854276017072460559243537260472078359201315933085f, glm::normalize(glm::vec3(1.0f, 0.0f, 0.0f)));
			vertices[(start + i) * 11 + 1] = vertices[(start + i) * 11 + 1] + vec3pom.y + 1.6f;
			vertices[(start + i) * 11 + 2] = vertices[(start + i) * 11 + 2] + vec3pom.z - 11.75f;
		}
		//WYZNACZANIE POZYCJI DOLNEJ RAMKI ZA POMOCA ROTACJI WEKTOROW
		start = 594;
		for (int i = 0; i < 12; i++) {
			vec3pom = glm::vec3(
				vertices[(start + i) * 11],
				vertices[(start + i) * 11 + 1],
				vertices[(start + i) * 11 + 2]);
			vec3pom = glm::rotate(vec3pom, -0.5880026035475675512456110806250854276017072460559243537260472078359201315933085f, glm::normalize(glm::vec3(1.0f, 0.0f, 0.0f)));
			vertices[(start + i) * 11 + 1] = vec3pom.y;
			vertices[(start + i) * 11 + 2] = vec3pom.z;
			vec3pom = glm::vec3(0.0f, 0.0f, -_JG_DL_RAM_MON_POJ_ / 2.0f);
			vec3pom = glm::rotate(vec3pom, -0.5880026035475675512456110806250854276017072460559243537260472078359201315933085f, glm::normalize(glm::vec3(1.0f, 0.0f, 0.0f)));
			vertices[(start + i) * 11 + 1] = vertices[(start + i) * 11 + 1] + vec3pom.y + 1.6f;
			vertices[(start + i) * 11 + 2] = vertices[(start + i) * 11 + 2] + vec3pom.z - 11.75f;
		}
		//WYZNACZANIE POZYCJI LEWEJ I PRAWEJ RAMKI ZA POMOCA ROTACJI WEKTOROW
		start = 606;
		for (int i = 0; i < 24; i++) {
			if (abs(vertices[(start + i) * 11]) > 1.05f) {
				vec3pom = glm::vec3(
					vertices[(start + i) * 11],
					vertices[(start + i) * 11 + 1],
					vertices[(start + i) * 11 + 2] * _JG_DL_RAM_MON_POJ_ / 2.0f);
			}
			else {
				vec3pom = glm::vec3(
					vertices[(start + i) * 11],
					vertices[(start + i) * 11 + 1],
					vertices[(start + i) * 11 + 2] * (_JG_DL_RAM_MON_POJ_ - 0.2f) / 2.0f);
			}
			vec3pom = glm::rotate(vec3pom, -0.5880026035475675512456110806250854276017072460559243537260472078359201315933085f, glm::normalize(glm::vec3(1.0f, 0.0f, 0.0f)));
			vertices[(start + i) * 11 + 1] = vec3pom.y + 1.6f;
			vertices[(start + i) * 11 + 2] = vec3pom.z - 11.75f;
		}
		//WYZNACZANIE POZYCJI WSKAZOWKI KIERUNKU
		for (int i = 0; i < 7; i++) {
			vec3pom = glm::vec3(
				Mon_Vertices[(i) * 11],
				Mon_Vertices[(i) * 11 + 1],
				Mon_Vertices[(i) * 11 + 2]);
			vec3pom = glm::rotate(vec3pom, -0.5880026035475675512456110806250854276017072460559243537260472078359201315933085f, glm::normalize(glm::vec3(1.0f, 0.0f, 0.0f)));
			Mon_Vertices[(i) * 11] = vec3pom.x + 0.6f;
			Mon_Vertices[(i) * 11 + 1] = vec3pom.y;
			Mon_Vertices[(i) * 11 + 2] = vec3pom.z;
			vec3pom = glm::vec3(0.0f, 0.0f, (_JG_DL_RAM_MON_POJ_ - 0.2f) / 4.0f);
			vec3pom = glm::rotate(vec3pom, -0.5880026035475675512456110806250854276017072460559243537260472078359201315933085f, glm::normalize(glm::vec3(1.0f, 0.0f, 0.0f)));
			Mon_Vertices[(i) * 11 + 1] = Mon_Vertices[(i) * 11 + 1] + vec3pom.y + 1.6f;
			Mon_Vertices[(i) * 11 + 2] = Mon_Vertices[(i) * 11 + 2] + vec3pom.z - 11.75f;
		}
		//WYZNACZANIE POZYCJI WSKAZOWKI ENERGII
		for (int i = 7; i < 22; i++) {
			vec3pom = glm::vec3(
				Mon_Vertices[(i) * 11],
				Mon_Vertices[(i) * 11 + 1],
				Mon_Vertices[(i) * 11 + 2]);
			vec3pom = glm::rotate(vec3pom, -0.5880026035475675512456110806250854276017072460559243537260472078359201315933085f, glm::normalize(glm::vec3(1.0f, 0.0f, 0.0f)));
			Mon_Vertices[(i) * 11] = vec3pom.x + 0.6f;
			Mon_Vertices[(i) * 11 + 1] = vec3pom.y;
			Mon_Vertices[(i) * 11 + 2] = vec3pom.z;
			vec3pom = glm::vec3(0.0f, 0.0f, -(_JG_DL_RAM_MON_POJ_ - 0.2f) / 4.0f);
			vec3pom = glm::rotate(vec3pom, -0.5880026035475675512456110806250854276017072460559243537260472078359201315933085f, glm::normalize(glm::vec3(1.0f, 0.0f, 0.0f)));
			Mon_Vertices[(i) * 11 + 1] = Mon_Vertices[(i) * 11 + 1] + vec3pom.y + 1.6f;
			Mon_Vertices[(i) * 11 + 2] = Mon_Vertices[(i) * 11 + 2] + vec3pom.z - 11.75f;
		}
		//WYZNACZANIE POZYCJI ROZY KIERUNKOW POD WSKAZNIK KIERUNKU
		for (int i = 22; i < 42; i++) {
			vec3pom = glm::vec3(
				Mon_Vertices[(i) * 11],
				Mon_Vertices[(i) * 11 + 1],
				Mon_Vertices[(i) * 11 + 2]);
			vec3pom = glm::rotate(vec3pom, -0.5880026035475675512456110806250854276017072460559243537260472078359201315933085f, glm::normalize(glm::vec3(1.0f, 0.0f, 0.0f)));
			Mon_Vertices[(i) * 11] = vec3pom.x + 0.6f;
			Mon_Vertices[(i) * 11 + 1] = vec3pom.y;
			Mon_Vertices[(i) * 11 + 2] = vec3pom.z;
			vec3pom = glm::vec3(0.0f, 0.0f, (_JG_DL_RAM_MON_POJ_ - 0.2f) / 4.0f);
			vec3pom = glm::rotate(vec3pom, -0.5880026035475675512456110806250854276017072460559243537260472078359201315933085f, glm::normalize(glm::vec3(1.0f, 0.0f, 0.0f)));
			Mon_Vertices[(i) * 11 + 1] = Mon_Vertices[(i) * 11 + 1] + vec3pom.y + 1.6f;
			Mon_Vertices[(i) * 11 + 2] = Mon_Vertices[(i) * 11 + 2] + vec3pom.z - 11.75f;
		}
		//WYZNACZANIE POZYCJI WSKAZOWKI ODLEGLOSCI
		for (int i = 42; i < 61; i++) {
			vec3pom = glm::vec3(
				Mon_Vertices[(i) * 11],
				Mon_Vertices[(i) * 11 + 1],
				Mon_Vertices[(i) * 11 + 2]);
			vec3pom = glm::rotate(vec3pom, -0.5880026035475675512456110806250854276017072460559243537260472078359201315933085f, glm::normalize(glm::vec3(1.0f, 0.0f, 0.0f)));
			Mon_Vertices[(i) * 11] = vec3pom.x - 0.6f;
			Mon_Vertices[(i) * 11 + 1] = vec3pom.y;
			Mon_Vertices[(i) * 11 + 2] = vec3pom.z;
			vec3pom = glm::vec3(0.0f, 0.0f, (_JG_DL_RAM_MON_POJ_ - 0.2f) / 4.0f);
			vec3pom = glm::rotate(vec3pom, -0.5880026035475675512456110806250854276017072460559243537260472078359201315933085f, glm::normalize(glm::vec3(1.0f, 0.0f, 0.0f)));
			Mon_Vertices[(i) * 11 + 1] = Mon_Vertices[(i) * 11 + 1] + vec3pom.y + 1.6f;
			Mon_Vertices[(i) * 11 + 2] = Mon_Vertices[(i) * 11 + 2] + vec3pom.z - 11.75f;
		}
		//WYZNACZANIE POZYCJI WSKAZOWKI PREDKOSCI
		for (int i = 61; i < 77; i++) {
			vec3pom = glm::vec3(
				Mon_Vertices[(i) * 11],
				Mon_Vertices[(i) * 11 + 1],
				Mon_Vertices[(i) * 11 + 2]);
			vec3pom = glm::rotate(vec3pom, -0.5880026035475675512456110806250854276017072460559243537260472078359201315933085f, glm::normalize(glm::vec3(1.0f, 0.0f, 0.0f)));
			Mon_Vertices[(i) * 11] = vec3pom.x - 0.6f;
			Mon_Vertices[(i) * 11 + 1] = vec3pom.y;
			Mon_Vertices[(i) * 11 + 2] = vec3pom.z;
			vec3pom = glm::vec3(0.0f, 0.0f, -(_JG_DL_RAM_MON_POJ_ - 0.2f) / 4.0f);
			vec3pom = glm::rotate(vec3pom, -0.5880026035475675512456110806250854276017072460559243537260472078359201315933085f, glm::normalize(glm::vec3(1.0f, 0.0f, 0.0f)));
			Mon_Vertices[(i) * 11 + 1] = Mon_Vertices[(i) * 11 + 1] + vec3pom.y + 1.6f;
			Mon_Vertices[(i) * 11 + 2] = Mon_Vertices[(i) * 11 + 2] + vec3pom.z - 11.75f;
		}


		//RAMY "ZEGAROW"

		glm::vec3 vec3A = glm::normalize(glm::vec3(0.0f, 1.5f, -1.0f));
		//Pozycja
		Zeg1Vertices[(130 + 65) * 11 + 0] = 0.0f;
		Zeg1Vertices[(130 + 65) * 11 + 1] = 0.003f;
		Zeg1Vertices[(130 + 65) * 11 + 2] = 0.0f;
		//Kolor
		Zeg1Vertices[(130 + 65) * 11 + 3] = 0.25f;
		Zeg1Vertices[(130 + 65) * 11 + 4] = 0.25f;
		Zeg1Vertices[(130 + 65) * 11 + 5] = 0.25f;
		//Tekstury
		Zeg1Vertices[(130 + 65) * 11 + 6] = 0.5f;
		Zeg1Vertices[(130 + 65) * 11 + 7] = 0.3f;
		//Wektor ormalny
		Zeg1Vertices[(130 + 65) * 11 + 8] = vec3A.x;
		Zeg1Vertices[(130 + 65) * 11 + 9] = vec3A.y;
		Zeg1Vertices[(130 + 65) * 11 + 10] = vec3A.z;

		float Przesuniecie_tekstura_zegar = 0.0f;

		vec3pom = glm::vec3(0.0f, 0.02f, 0.4f);
		for (int i = 0; i < 130 * 11; i = i + 11) {
			vec3pom = glm::rotate(vec3pom, glm::radians(360.0f / 128.0f), glm::normalize(glm::vec3(0.0f, -1.0f, 0.0f)));
			//Pozycja
			Zeg1Vertices[i] = vec3pom.x;
			Zeg1Vertices[i + 1] = vec3pom.y;
			Zeg1Vertices[i + 2] = vec3pom.z;
			//Kolor
			Zeg1Vertices[i + 3] = 0.5f;
			Zeg1Vertices[i + 4] = 0.5f;
			Zeg1Vertices[i + 5] = 0.5f;
			//Tekstura
			Zeg1Vertices[i + 6] = 0.5f + vec3pom.x + Przesuniecie_tekstura_zegar;
			Zeg1Vertices[i + 7] = 0.1f + 0.2f * vec3pom.z + Przesuniecie_tekstura_zegar;
			//std::cout << "x = " << Zeg1Vertices[i + 6] << "y = " << Zeg1Vertices[i + 7] << "\n";
		//Wektor normalny
			Zeg1Vertices[i + 8] = vec3A.x;
			Zeg1Vertices[i + 9] = vec3A.y;
			Zeg1Vertices[i + 10] = vec3A.z;

		}
		vec3pom = glm::vec3(0.0f, 0.02f, 0.35f);
		for (int i = 130 * 11; i < 130 * 11 + 65 * 11; i = i + 11) {
			vec3pom = glm::rotate(vec3pom, glm::radians(360.0f / 64.0f), glm::normalize(glm::vec3(0.0f, -1.0f, 0.0f)));
			//Pozycja
			Zeg1Vertices[i] = vec3pom.x;
			Zeg1Vertices[i + 1] = vec3pom.y;
			Zeg1Vertices[i + 2] = vec3pom.z;
			//Kolor
			Zeg1Vertices[i + 3] = 0.20f;
			Zeg1Vertices[i + 4] = 0.0f;
			Zeg1Vertices[i + 5] = 0.20f;
			//Tekstura
			Zeg1Vertices[i + 6] = 0.5f + vec3pom.x + Przesuniecie_tekstura_zegar;
			Zeg1Vertices[i + 7] = 0.1f + 0.2f * vec3pom.z + Przesuniecie_tekstura_zegar;
			//Wektor normalny
			Zeg1Vertices[i + 8] = vec3A.x;
			Zeg1Vertices[i + 9] = vec3A.y;
			Zeg1Vertices[i + 10] = vec3A.z;
		}
		//TARCZA
		float kat = 0.0f;
		vec3pom = glm::vec3(0.0f, 0.003f, 0.395f);
		for (int i = 130 * 11 + 66 * 11; i < 130 * 11 + 66 * 11 + 129 * 11; i = i + 11) {
			vec3pom = glm::rotate(vec3pom, glm::radians(360.0f / 128.0f), glm::normalize(glm::vec3(0.0f, -1.0f, 0.0f)));
			//Pozycja
			Zeg1Vertices[i] = vec3pom.x;
			Zeg1Vertices[i + 1] = vec3pom.y;
			Zeg1Vertices[i + 2] = vec3pom.z;
			//Kolor
			kat = kat + 360.0f / 128.0f;

			//PRAWY - NIEBIESKI
			if (kat < 180.0 - TOL) Zeg1Vertices[i + 5] = 0.75f * kat / 180.0f;
			else Zeg1Vertices[i + 5] = 0.0f;

			//SRODEK - ZIELEN
			if (kat < 90.0 + TOL) Zeg1Vertices[i + 4] = 0.5f - 0.5f * (kat / 90.0f);
			else if (kat > 270.0 - TOL) Zeg1Vertices[i + 4] = 0.5f * (kat - 270.0f) / 96.0f;
			else Zeg1Vertices[i + 4] = 0.0f;

			//LEWY - CZERWONY
			if (kat > 180.0 + TOL) Zeg1Vertices[i + 3] = 0.25f - 0.25f * (kat - 180.0f) / 180.0f;
			else Zeg1Vertices[i + 3] = 0.0f;

			//Tekstura
			Zeg1Vertices[i + 6] = 0.5f + 1.3f * vec3pom.x + Przesuniecie_tekstura_zegar;
			Zeg1Vertices[i + 7] = 0.3f + 0.26f * vec3pom.z + Przesuniecie_tekstura_zegar;
			//Wektor normalny
			Zeg1Vertices[i + 8] = vec3A.x;
			Zeg1Vertices[i + 9] = vec3A.y;
			Zeg1Vertices[i + 10] = vec3A.z;

		}

		int inkr = 0;
		int inkr2 = 0;
		for (int j = 0; j < (129 + 65) * 3; j = j + 9) {
			Zeg1Indices[j] = inkr;
			Zeg1Indices[j + 1] = inkr + 1;
			Zeg1Indices[j + 2] = 129 + inkr2;
			Zeg1Indices[j + 3] = 129 + inkr2;
			Zeg1Indices[j + 4] = inkr + 1;
			Zeg1Indices[j + 5] = 129 + inkr2 + 1;
			Zeg1Indices[j + 6] = inkr + 1;
			Zeg1Indices[j + 7] = 129 + inkr2 + 1;
			Zeg1Indices[j + 8] = inkr + 2;
			inkr = inkr + 2;
			inkr2 = inkr2 + 1;
		}
		//TARCZA
		inkr = 0;
		for (int j = (130 + 66) * 3; j < (130 + 65 + 129) * 3; j = j + 3) {
			Zeg1Indices[j] = 130 + 66 + inkr;
			Zeg1Indices[j + 1] = 130 + 65;
			Zeg1Indices[j + 2] = 130 + 66 + inkr + 1;
			inkr = inkr + 1;
		}

		//KLONOWANIE ZEGAROW
		for (int i = 0; i < sizeof(Zeg1Vertices) / sizeof(float); i++) {
			Zeg2Vertices[i] = Zeg1Vertices[i];
			Zeg3Vertices[i] = Zeg1Vertices[i];
			Zeg4Vertices[i] = Zeg1Vertices[i];
		}
		for (int i = 0; i < sizeof(Zeg1Indices) / sizeof(int); i++) {
			Zeg2Indices[i] = Zeg1Indices[i];
			Zeg3Indices[i] = Zeg1Indices[i];
			Zeg4Indices[i] = Zeg1Indices[i];
		}
		//USUWANIE GRADIENTU Z TARCZY KIERUNKU
		for (int i = 130 * 11 + 66 * 11; i < 130 * 11 + 66 * 11 + 129 * 11; i = i + 11) {
			Zeg1Vertices[i + 3] = 0.44f;
			Zeg1Vertices[i + 4] = 0.33f;
			Zeg1Vertices[i + 5] = 0.0f;
		}


		//WYZNACZANIE POZYCJI RAMY ZEGARA - KIERUNEK
		for (int i = 0; i < sizeof(Zeg1Vertices) / sizeof(float) / 11; i++) {
			vec3pom = glm::vec3(
				Zeg1Vertices[(i) * 11],
				Zeg1Vertices[(i) * 11 + 1],
				Zeg1Vertices[(i) * 11 + 2]);
			vec3pom = glm::rotate(vec3pom, -0.5880026035475675512456110806250854276017072460559243537260472078359201315933085f, glm::normalize(glm::vec3(1.0f, 0.0f, 0.0f)));
			Zeg1Vertices[(i) * 11] = vec3pom.x + 0.6f;
			Zeg1Vertices[(i) * 11 + 1] = vec3pom.y;
			Zeg1Vertices[(i) * 11 + 2] = vec3pom.z;
			vec3pom = glm::vec3(0.0f, 0.0f, (_JG_DL_RAM_MON_POJ_ - 0.2f) / 4.0f);
			vec3pom = glm::rotate(vec3pom, -0.5880026035475675512456110806250854276017072460559243537260472078359201315933085f, glm::normalize(glm::vec3(1.0f, 0.0f, 0.0f)));
			Zeg1Vertices[(i) * 11 + 1] = Zeg1Vertices[(i) * 11 + 1] + vec3pom.y + 1.6f;
			Zeg1Vertices[(i) * 11 + 2] = Zeg1Vertices[(i) * 11 + 2] + vec3pom.z - 11.75f;

		}

		//WYZNACZANIE POZYCJI RAMY ZEGARA - ENERGIA
		for (int i = 0; i < sizeof(Zeg2Vertices) / sizeof(float) / 11; i++) {
			vec3pom = glm::vec3(
				Zeg2Vertices[(i) * 11],
				Zeg2Vertices[(i) * 11 + 1],
				Zeg2Vertices[(i) * 11 + 2]);
			vec3pom = glm::rotate(vec3pom, -0.5880026035475675512456110806250854276017072460559243537260472078359201315933085f, glm::normalize(glm::vec3(1.0f, 0.0f, 0.0f)));
			Zeg2Vertices[(i) * 11] = vec3pom.x + 0.6f;
			Zeg2Vertices[(i) * 11 + 1] = vec3pom.y;
			Zeg2Vertices[(i) * 11 + 2] = vec3pom.z;
			vec3pom = glm::vec3(0.0f, 0.0f, -(_JG_DL_RAM_MON_POJ_ - 0.2f) / 4.0f);
			vec3pom = glm::rotate(vec3pom, -0.5880026035475675512456110806250854276017072460559243537260472078359201315933085f, glm::normalize(glm::vec3(1.0f, 0.0f, 0.0f)));
			Zeg2Vertices[(i) * 11 + 1] = Zeg2Vertices[(i) * 11 + 1] + vec3pom.y + 1.6f;
			Zeg2Vertices[(i) * 11 + 2] = Zeg2Vertices[(i) * 11 + 2] + vec3pom.z - 11.75f;

		}

		//WYZNACZANIE POZYCJI RAMY ZEGARA - ODLEGLOSC
		for (int i = 0; i < sizeof(Zeg3Vertices) / sizeof(float) / 11; i++) {
			vec3pom = glm::vec3(
				Zeg3Vertices[(i) * 11],
				Zeg3Vertices[(i) * 11 + 1],
				Zeg3Vertices[(i) * 11 + 2]);
			vec3pom = glm::rotate(vec3pom, -0.5880026035475675512456110806250854276017072460559243537260472078359201315933085f, glm::normalize(glm::vec3(1.0f, 0.0f, 0.0f)));
			Zeg3Vertices[(i) * 11] = vec3pom.x - 0.6f;
			Zeg3Vertices[(i) * 11 + 1] = vec3pom.y;
			Zeg3Vertices[(i) * 11 + 2] = vec3pom.z;
			vec3pom = glm::vec3(0.0f, 0.0f, (_JG_DL_RAM_MON_POJ_ - 0.2f) / 4.0f);
			vec3pom = glm::rotate(vec3pom, -0.5880026035475675512456110806250854276017072460559243537260472078359201315933085f, glm::normalize(glm::vec3(1.0f, 0.0f, 0.0f)));
			Zeg3Vertices[(i) * 11 + 1] = Zeg3Vertices[(i) * 11 + 1] + vec3pom.y + 1.6f;
			Zeg3Vertices[(i) * 11 + 2] = Zeg3Vertices[(i) * 11 + 2] + vec3pom.z - 11.75f;

		}

		//WYZNACZANIE POZYCJI RAMY ZEGARA - PREDKOSC
		for (int i = 0; i < sizeof(Zeg4Vertices) / sizeof(float) / 11; i++) {
			vec3pom = glm::vec3(
				Zeg4Vertices[(i) * 11],
				Zeg4Vertices[(i) * 11 + 1],
				Zeg4Vertices[(i) * 11 + 2]);
			vec3pom = glm::rotate(vec3pom, -0.5880026035475675512456110806250854276017072460559243537260472078359201315933085f, glm::normalize(glm::vec3(1.0f, 0.0f, 0.0f)));
			Zeg4Vertices[(i) * 11] = vec3pom.x - 0.6f;
			Zeg4Vertices[(i) * 11 + 1] = vec3pom.y;
			Zeg4Vertices[(i) * 11 + 2] = vec3pom.z;
			vec3pom = glm::vec3(0.0f, 0.0f, -(_JG_DL_RAM_MON_POJ_ - 0.2f) / 4.0f);
			vec3pom = glm::rotate(vec3pom, -0.5880026035475675512456110806250854276017072460559243537260472078359201315933085f, glm::normalize(glm::vec3(1.0f, 0.0f, 0.0f)));
			Zeg4Vertices[(i) * 11 + 1] = Zeg4Vertices[(i) * 11 + 1] + vec3pom.y + 1.6f;
			Zeg4Vertices[(i) * 11 + 2] = Zeg4Vertices[(i) * 11 + 2] + vec3pom.z - 11.75f;

		}



		//POLKULE
		pushVertices[0] = 0.f;
		pushVertices[1] = -0.35f;
		pushVertices[2] = 0.f;

		//int j = 0;
		//glm::vec3 vec3pom = glm::vec3(0.0f, 0.0f, 1.0f);
		/*for (int i = 3; i < 66 * 3; i = i + 3) {
			vec3pom = glm::rotate(vec3pom, glm::radians(360.0f / 64.0f), glm::normalize(glm::vec3(0.0f, -1.0f, 0.0f)));
			pushVertices[i] = vec3pom.x;
			pushVertices[i + 1] = vec3pom.y;
			pushVertices[i + 2] = vec3pom.z;

			pushIndices[i - 3] = j + 1;
			pushIndices[i - 2] = j + 2;
			pushIndices[i - 1] = 0;
			j = j + 1;
		}*/

		vec3pom = glm::vec3(0.0f, 0.0f, 1.0f);
		for (int i = 3; i < 66 * 3; i = i + 3) {
			vec3pom = glm::rotate(vec3pom, glm::radians(360.0f / 64.0f), glm::normalize(glm::vec3(0.0f, -1.0f, 0.0f)));
			pushVertices[i] = vec3pom.x;
			pushVertices[i + 1] = vec3pom.y;
			pushVertices[i + 2] = vec3pom.z;
		}
		vec3pom = glm::vec3(0.0f, -0.15f, 0.8f);
		for (int i = 66 * 3; i < 66 * 3 + 33 * 3; i = i + 3) {
			vec3pom = glm::rotate(vec3pom, glm::radians(360.0f / 32.0f), glm::normalize(glm::vec3(0.0f, -1.0f, 0.0f)));
			pushVertices[i] = vec3pom.x;
			pushVertices[i + 1] = vec3pom.y;
			pushVertices[i + 2] = vec3pom.z;
		}
		vec3pom = glm::vec3(0.0f, -0.25f, 0.6f);
		for (int i = 66 * 3 + 33 * 3; i < 66 * 3 + 33 * 3 + 17 * 3; i = i + 3) {
			vec3pom = glm::rotate(vec3pom, glm::radians(360.0f / 16.0f), glm::normalize(glm::vec3(0.0f, -1.0f, 0.0f)));
			pushVertices[i] = vec3pom.x;
			pushVertices[i + 1] = vec3pom.y;
			pushVertices[i + 2] = vec3pom.z;
		}
		vec3pom = glm::vec3(0.0f, -0.30f, 0.4f);
		for (int i = 66 * 3 + 33 * 3 + 17 * 3; i < 66 * 3 + 33 * 3 + 17 * 3 + 9 * 3; i = i + 3) {
			vec3pom = glm::rotate(vec3pom, glm::radians(360.0f / 8.0f), glm::normalize(glm::vec3(0.0f, -1.0f, 0.0f)));
			pushVertices[i] = vec3pom.x;
			pushVertices[i + 1] = vec3pom.y;
			pushVertices[i + 2] = vec3pom.z;
		}
		vec3pom = glm::vec3(0.0f, -0.33f, 0.2f);
		for (int i = 66 * 3 + 33 * 3 + 17 * 3 + 9 * 3; i < 66 * 3 + 33 * 3 + 17 * 3 + 9 * 3 + 5 * 3; i = i + 3) {
			vec3pom = glm::rotate(vec3pom, glm::radians(360.0f / 4.0f), glm::normalize(glm::vec3(0.0f, -1.0f, 0.0f)));
			pushVertices[i] = vec3pom.x;
			pushVertices[i + 1] = vec3pom.y;
			pushVertices[i + 2] = vec3pom.z;
		}

		inkr = 1;
		inkr2 = 0;
		for (int j = 0; j < (65 + 33) * 3; j = j + 9) {
			pushIndices[j] = inkr;
			pushIndices[j + 1] = inkr + 1;
			pushIndices[j + 2] = 65 + inkr2;
			pushIndices[j + 3] = 65 + inkr2;
			pushIndices[j + 4] = inkr + 1;
			pushIndices[j + 5] = 65 + inkr2 + 1;
			pushIndices[j + 6] = inkr + 1;
			pushIndices[j + 7] = 65 + inkr2 + 1;
			pushIndices[j + 8] = inkr + 2;
			inkr = inkr + 2;
			inkr2 = inkr2 + 1;


			/*std::cout << pushIndices[j] << "\t" << pushVertices[pushIndices[j] * 3] << "\t" << pushVertices[pushIndices[j] * 3 + 1] << "\t" << pushVertices[pushIndices[j] * 3 + 2] <<  "\n";
			std::cout << pushIndices[j + 1] << "\t" << pushVertices[pushIndices[j + 1] * 3] << "\t" << pushVertices[pushIndices[j + 1] * 3 + 1] << "\t" << pushVertices[pushIndices[j + 1] * 3 + 2] << "\n";
			std::cout << pushIndices[j + 2] << "\t" << pushVertices[pushIndices[j + 2] * 3] << "\t" << pushVertices[pushIndices[j + 2] * 3 + 1] << "\t" << pushVertices[pushIndices[j + 2] * 3 + 2] << "\n";
			std::cout << pushIndices[j + 3] << "\t" << pushVertices[pushIndices[j + 3] * 3] << "\t" << pushVertices[pushIndices[j + 3] * 3 + 1] << "\t" << pushVertices[pushIndices[j + 3] * 3 + 2] << "\n";
			std::cout << pushIndices[j + 4] << "\t" << pushVertices[pushIndices[j + 4] * 3] << "\t" << pushVertices[pushIndices[j + 4] * 3 + 1] << "\t" << pushVertices[pushIndices[j + 4] * 3 + 2] << "\n";
			std::cout << pushIndices[j + 5] << "\t" << pushVertices[pushIndices[j + 5] * 3] << "\t" << pushVertices[pushIndices[j + 5] * 3 + 1] << "\t" << pushVertices[pushIndices[j + 5] * 3 + 2] << "\n";
			std::cout << pushIndices[j + 6] << "\t" << pushVertices[pushIndices[j + 6] * 3] << "\t" << pushVertices[pushIndices[j + 6] * 3 + 1] << "\t" << pushVertices[pushIndices[j + 6] * 3 + 2] << "\n";
			std::cout << pushIndices[j + 7] << "\t" << pushVertices[pushIndices[j + 7] * 3] << "\t" << pushVertices[pushIndices[j + 7] * 3 + 1] << "\t" << pushVertices[pushIndices[j + 7] * 3 + 2] << "\n";
			std::cout << pushIndices[j + 8] << "\t" << pushVertices[pushIndices[j + 8] * 3] << "\t" << pushVertices[pushIndices[j + 8] * 3 + 1] << "\t" << pushVertices[pushIndices[j + 8] * 3 + 2] << "\n";
			std::cout << "\n\n";*/
		}

		inkr = 0;
		inkr2 = 0;
		for (int j = (65 + 33) * 3; j < (65 + 2 * 33 + 17) * 3; j = j + 9) {
			pushIndices[j] = 65 + inkr;
			pushIndices[j + 1] = 65 + inkr + 1;
			pushIndices[j + 2] = 98 + inkr2;
			pushIndices[j + 3] = 98 + inkr2;
			pushIndices[j + 4] = 65 + inkr + 1;
			pushIndices[j + 5] = 98 + inkr2 + 1;
			pushIndices[j + 6] = 65 + inkr + 1;
			pushIndices[j + 7] = 98 + inkr2 + 1;
			pushIndices[j + 8] = 65 + inkr + 2;
			inkr = inkr + 2;
			inkr2 = inkr2 + 1;
		}
		inkr = 0;
		inkr2 = 0;
		for (int j = (65 + 33 * 2 + 17) * 3; j < (65 + 2 * 33 + 2 * 17 + 9) * 3; j = j + 9) {
			pushIndices[j] = 98 + inkr;
			pushIndices[j + 1] = 98 + inkr + 1;
			pushIndices[j + 2] = 115 + inkr2;
			pushIndices[j + 3] = 115 + inkr2;
			pushIndices[j + 4] = 98 + inkr + 1;
			pushIndices[j + 5] = 115 + inkr2 + 1;
			pushIndices[j + 6] = 98 + inkr + 1;
			pushIndices[j + 7] = 115 + inkr2 + 1;
			pushIndices[j + 8] = 98 + inkr + 2;
			inkr = inkr + 2;
			inkr2 = inkr2 + 1;
		}
		inkr = 0;
		inkr2 = 0;
		for (int j = (65 + 33 * 2 + 2 * 17 + 9) * 3; j < (65 + 2 * 33 + 2 * 17 + 2 * 9 + 5) * 3; j = j + 9) {
			pushIndices[j] = 115 + inkr;
			pushIndices[j + 1] = 115 + inkr + 1;
			pushIndices[j + 2] = 124 + inkr2;
			pushIndices[j + 3] = 124 + inkr2;
			pushIndices[j + 4] = 115 + inkr + 1;
			pushIndices[j + 5] = 124 + inkr2 + 1;
			pushIndices[j + 6] = 115 + inkr + 1;
			pushIndices[j + 7] = 124 + inkr2 + 1;
			pushIndices[j + 8] = 115 + inkr + 2;
			inkr = inkr + 2;
			inkr2 = inkr2 + 1;
		}
		inkr = 0;
		inkr2 = 0;
		for (int j = (65 + 33 * 2 + 2 * 17 + 9 * 2 + 5) * 3; j < (65 + 2 * 33 + 2 * 17 + 2 * 9 + 2 * 5) * 3; j = j + 3) {
			pushIndices[j] = 124 + inkr;
			pushIndices[j + 1] = 124 + inkr + 1;
			pushIndices[j + 2] = 0;
			inkr = inkr + 1;
		}

		//Tworzenie zblizonych o innej skali/polozeniu
		for (int i = 0; i < 66 * 3 + 33 * 3 + 17 * 3 + 9 * 3 + 5 * 3; i = i + 3) {
			pushVertices_front[i] = pushVertices[i] * 0.5;//x
			pushVertices_front[i + 1] = pushVertices[i + 1] * 0.5;//y
			pushVertices_front[i + 2] = pushVertices[i + 2] * 0.5;//z

			pushVertices_tyl[i] = pushVertices[i] * 1.2;//x
			pushVertices_tyl[i + 1] = pushVertices[i + 1] * 1.2;//y
			pushVertices_tyl[i + 2] = pushVertices[i + 2] * 1.2;//z
		}




		//KULA

		KulaVertices[0] = 0.f;
		KulaVertices[1] = -0.6f;
		KulaVertices[2] = 0.f;
		int J = 130;
		int X = 390;
		int G = 579;
		KulaVertices[X] = 0.f;
		KulaVertices[X + 1] = 0.6f;
		KulaVertices[X + 2] = 0.f;

		vec3pom = glm::vec3(0.0f, 0.0f, 0.6f);
		glm::vec3 vec3pom_kopia = vec3pom;
		for (int i = 3; i < 66 * 3; i = i + 3) {
			vec3pom = glm::rotate(vec3pom, glm::radians(360.0f / 64.0f), glm::normalize(glm::vec3(0.0f, -1.0f, 0.0f)));
			KulaVertices[i] = vec3pom.x;
			KulaVertices[i + 1] = vec3pom.y;
			KulaVertices[i + 2] = vec3pom.z;

			KulaVertices[X + i] = vec3pom.x;
			KulaVertices[X + i + 1] = -1.f * vec3pom.y;
			KulaVertices[X + i + 2] = vec3pom.z;
		}
		vec3pom = glm::rotate(vec3pom_kopia, glm::radians(90.0f / 5.0f), glm::normalize(glm::vec3(1.0f, 0.0f, 0.0f)));
		vec3pom_kopia = vec3pom;
		for (int i = 66 * 3; i < 66 * 3 + 33 * 3; i = i + 3) {
			vec3pom = glm::rotate(vec3pom, glm::radians(360.0f / 32.0f), glm::normalize(glm::vec3(0.0f, -1.0f, 0.0f)));
			KulaVertices[i] = vec3pom.x;
			KulaVertices[i + 1] = vec3pom.y;
			KulaVertices[i + 2] = vec3pom.z;

			KulaVertices[X + i] = vec3pom.x;
			KulaVertices[X + i + 1] = -1.f * vec3pom.y;
			KulaVertices[X + i + 2] = vec3pom.z;
		}
		vec3pom = glm::rotate(vec3pom_kopia, glm::radians(90.0f / 5.0f), glm::normalize(glm::vec3(1.0f, 0.0f, 0.0f)));
		vec3pom_kopia = vec3pom;
		for (int i = 66 * 3 + 33 * 3; i < 66 * 3 + 33 * 3 + 17 * 3; i = i + 3) {
			vec3pom = glm::rotate(vec3pom, glm::radians(360.0f / 16.0f), glm::normalize(glm::vec3(0.0f, -1.0f, 0.0f)));
			KulaVertices[i] = vec3pom.x;
			KulaVertices[i + 1] = vec3pom.y;
			KulaVertices[i + 2] = vec3pom.z;

			KulaVertices[X + i] = vec3pom.x;
			KulaVertices[X + i + 1] = -1.f * vec3pom.y;
			KulaVertices[X + i + 2] = vec3pom.z;
		}
		vec3pom = glm::rotate(vec3pom_kopia, glm::radians(90.0f / 5.0f), glm::normalize(glm::vec3(1.0f, 0.0f, 0.0f)));
		vec3pom_kopia = vec3pom;
		for (int i = 66 * 3 + 33 * 3 + 17 * 3; i < 66 * 3 + 33 * 3 + 17 * 3 + 9 * 3; i = i + 3) {
			vec3pom = glm::rotate(vec3pom, glm::radians(360.0f / 8.0f), glm::normalize(glm::vec3(0.0f, -1.0f, 0.0f)));
			KulaVertices[i] = vec3pom.x;
			KulaVertices[i + 1] = vec3pom.y;
			KulaVertices[i + 2] = vec3pom.z;

			KulaVertices[X + i] = vec3pom.x;
			KulaVertices[X + i + 1] = -1.f * vec3pom.y;
			KulaVertices[X + i + 2] = vec3pom.z;
		}
		vec3pom = glm::rotate(vec3pom_kopia, glm::radians(90.0f / 5.0f), glm::normalize(glm::vec3(1.0f, 0.0f, 0.0f)));
		vec3pom_kopia = vec3pom;
		for (int i = 66 * 3 + 33 * 3 + 17 * 3 + 9 * 3; i < 66 * 3 + 33 * 3 + 17 * 3 + 9 * 3 + 5 * 3; i = i + 3) {
			vec3pom = glm::rotate(vec3pom, glm::radians(360.0f / 4.0f), glm::normalize(glm::vec3(0.0f, -1.0f, 0.0f)));
			KulaVertices[i] = vec3pom.x;
			KulaVertices[i + 1] = vec3pom.y;
			KulaVertices[i + 2] = vec3pom.z;

			KulaVertices[X + i] = vec3pom.x;
			KulaVertices[X + i + 1] = -1.f * vec3pom.y;
			KulaVertices[X + i + 2] = vec3pom.z;
		}

		inkr = 1;
		inkr2 = 0;
		for (int j = 0; j < (65 + 33) * 3; j = j + 9) {
			KulaIndices[j] = inkr;
			KulaIndices[j + 1] = inkr + 1;
			KulaIndices[j + 2] = 65 + inkr2;
			KulaIndices[j + 3] = 65 + inkr2;
			KulaIndices[j + 4] = inkr + 1;
			KulaIndices[j + 5] = 65 + inkr2 + 1;
			KulaIndices[j + 6] = inkr + 1;
			KulaIndices[j + 7] = 65 + inkr2 + 1;
			KulaIndices[j + 8] = inkr + 2;

			KulaIndices[G + j] = J + inkr;
			KulaIndices[G + j + 1] = J + inkr + 1;
			KulaIndices[G + j + 2] = J + 65 + inkr2;
			KulaIndices[G + j + 3] = J + 65 + inkr2;
			KulaIndices[G + j + 4] = J + inkr + 1;
			KulaIndices[G + j + 5] = J + 65 + inkr2 + 1;
			KulaIndices[G + j + 6] = J + inkr + 1;
			KulaIndices[G + j + 7] = J + 65 + inkr2 + 1;
			KulaIndices[G + j + 8] = J + inkr + 2;

			inkr = inkr + 2;
			inkr2 = inkr2 + 1;



			/*std::cout << KulaIndices[G + j] << "\t" << KulaVertices[KulaIndices[G + j] * 3] << "\t" << KulaVertices[KulaIndices[G + j] * 3 + 1] << "\t" << KulaVertices[KulaIndices[G + j] * 3 + 2] << "\n";
			std::cout << KulaIndices[G + j + 1] << "\t" << KulaVertices[KulaIndices[G + j + 1] * 3] << "\t" << KulaVertices[KulaIndices[G + j + 1] * 3 + 1] << "\t" << KulaVertices[KulaIndices[G + j + 1] * 3 + 2] << "\n";
			std::cout << KulaIndices[G + j + 2] << "\t" << KulaVertices[KulaIndices[G + j + 2] * 3] << "\t" << KulaVertices[KulaIndices[G + j + 2] * 3 + 1] << "\t" << KulaVertices[KulaIndices[G + j + 2] * 3 + 2] << "\n";
			std::cout << KulaIndices[G + j + 3] << "\t" << KulaVertices[KulaIndices[G + j + 3] * 3] << "\t" << KulaVertices[KulaIndices[G + j + 3] * 3 + 1] << "\t" << KulaVertices[KulaIndices[G + j + 3] * 3 + 2] << "\n";
			std::cout << KulaIndices[G + j + 4] << "\t" << KulaVertices[KulaIndices[G + j + 4] * 3] << "\t" << KulaVertices[KulaIndices[G + j + 4] * 3 + 1] << "\t" << KulaVertices[KulaIndices[G + j + 4] * 3 + 2] << "\n";
			std::cout << KulaIndices[G + j + 5] << "\t" << KulaVertices[KulaIndices[G + j + 5] * 3] << "\t" << KulaVertices[KulaIndices[G + j + 5] * 3 + 1] << "\t" << KulaVertices[KulaIndices[G + j + 5] * 3 + 2] << "\n";
			std::cout << KulaIndices[G + j + 6] << "\t" << KulaVertices[KulaIndices[G + j + 6] * 3] << "\t" << KulaVertices[KulaIndices[G + j + 6] * 3 + 1] << "\t" << KulaVertices[KulaIndices[G + j + 6] * 3 + 2] << "\n";
			std::cout << KulaIndices[G + j + 7] << "\t" << KulaVertices[KulaIndices[G + j + 7] * 3] << "\t" << KulaVertices[KulaIndices[G + j + 7] * 3 + 1] << "\t" << KulaVertices[KulaIndices[G + j + 7] * 3 + 2] << "\n";
			std::cout << KulaIndices[G + j + 8] << "\t" << KulaVertices[KulaIndices[G + j + 8] * 3] << "\t" << KulaVertices[KulaIndices[G + j + 8] * 3 + 1] << "\t" << KulaVertices[KulaIndices[G + j + 8] * 3 + 2] << "\n";
			std::cout << "\n\n";*/

		}


		inkr = 0;
		inkr2 = 0;
		for (int j = (65 + 33) * 3; j < (65 + 2 * 33 + 17) * 3; j = j + 9) {
			KulaIndices[j] = 65 + inkr;
			KulaIndices[j + 1] = 65 + inkr + 1;
			KulaIndices[j + 2] = 98 + inkr2;
			KulaIndices[j + 3] = 98 + inkr2;
			KulaIndices[j + 4] = 65 + inkr + 1;
			KulaIndices[j + 5] = 98 + inkr2 + 1;
			KulaIndices[j + 6] = 65 + inkr + 1;
			KulaIndices[j + 7] = 98 + inkr2 + 1;
			KulaIndices[j + 8] = 65 + inkr + 2;

			KulaIndices[G + j] = J + 65 + inkr;
			KulaIndices[G + j + 1] = J + 65 + inkr + 1;
			KulaIndices[G + j + 2] = J + 98 + inkr2;
			KulaIndices[G + j + 3] = J + 98 + inkr2;
			KulaIndices[G + j + 4] = J + 65 + inkr + 1;
			KulaIndices[G + j + 5] = J + 98 + inkr2 + 1;
			KulaIndices[G + j + 6] = J + 65 + inkr + 1;
			KulaIndices[G + j + 7] = J + 98 + inkr2 + 1;
			KulaIndices[G + j + 8] = J + 65 + inkr + 2;
			inkr = inkr + 2;
			inkr2 = inkr2 + 1;
		}
		inkr = 0;
		inkr2 = 0;
		for (int j = (65 + 33 * 2 + 17) * 3; j < (65 + 2 * 33 + 2 * 17 + 9) * 3; j = j + 9) {
			KulaIndices[j] = 98 + inkr;
			KulaIndices[j + 1] = 98 + inkr + 1;
			KulaIndices[j + 2] = 115 + inkr2;
			KulaIndices[j + 3] = 115 + inkr2;
			KulaIndices[j + 4] = 98 + inkr + 1;
			KulaIndices[j + 5] = 115 + inkr2 + 1;
			KulaIndices[j + 6] = 98 + inkr + 1;
			KulaIndices[j + 7] = 115 + inkr2 + 1;
			KulaIndices[j + 8] = 98 + inkr + 2;

			KulaIndices[G + j] = J + 98 + inkr;
			KulaIndices[G + j + 1] = J + 98 + inkr + 1;
			KulaIndices[G + j + 2] = J + 115 + inkr2;
			KulaIndices[G + j + 3] = J + 115 + inkr2;
			KulaIndices[G + j + 4] = J + 98 + inkr + 1;
			KulaIndices[G + j + 5] = J + 115 + inkr2 + 1;
			KulaIndices[G + j + 6] = J + 98 + inkr + 1;
			KulaIndices[G + j + 7] = J + 115 + inkr2 + 1;
			KulaIndices[G + j + 8] = J + 98 + inkr + 2;
			inkr = inkr + 2;
			inkr2 = inkr2 + 1;
		}
		inkr = 0;
		inkr2 = 0;
		for (int j = (65 + 33 * 2 + 2 * 17 + 9) * 3; j < (65 + 2 * 33 + 2 * 17 + 2 * 9 + 5) * 3; j = j + 9) {
			KulaIndices[j] = 115 + inkr;
			KulaIndices[j + 1] = 115 + inkr + 1;
			KulaIndices[j + 2] = 124 + inkr2;
			KulaIndices[j + 3] = 124 + inkr2;
			KulaIndices[j + 4] = 115 + inkr + 1;
			KulaIndices[j + 5] = 124 + inkr2 + 1;
			KulaIndices[j + 6] = 115 + inkr + 1;
			KulaIndices[j + 7] = 124 + inkr2 + 1;
			KulaIndices[j + 8] = 115 + inkr + 2;

			KulaIndices[G + j] = J + 115 + inkr;
			KulaIndices[G + j + 1] = J + 115 + inkr + 1;
			KulaIndices[G + j + 2] = J + 124 + inkr2;
			KulaIndices[G + j + 3] = J + 124 + inkr2;
			KulaIndices[G + j + 4] = J + 115 + inkr + 1;
			KulaIndices[G + j + 5] = J + 124 + inkr2 + 1;
			KulaIndices[G + j + 6] = J + 115 + inkr + 1;
			KulaIndices[G + j + 7] = J + 124 + inkr2 + 1;
			KulaIndices[G + j + 8] = J + 115 + inkr + 2;
			inkr = inkr + 2;
			inkr2 = inkr2 + 1;
		}
		inkr = 0;
		inkr2 = 0;
		for (int j = (65 + 33 * 2 + 2 * 17 + 9 * 2 + 5) * 3; j < (65 + 2 * 33 + 2 * 17 + 2 * 9 + 2 * 5) * 3; j = j + 3) {
			KulaIndices[j] = 124 + inkr;
			KulaIndices[j + 1] = 124 + inkr + 1;
			KulaIndices[j + 2] = 0;

			KulaIndices[G + j] = J + 124 + inkr;
			KulaIndices[G + j + 1] = J + 124 + inkr + 1;
			KulaIndices[G + j + 2] = J + 0;
			inkr = inkr + 1;
		}

		//KONIEC KULA

		//WEKTORY NORMALNE
		{

			int DL = 11;
			//POJAZD
			for (int i = 0; i < sizeof(indices) / sizeof(int); i = i + 3) {
				//CO TROJKAT
				double znak = vertices[indices[i] * DL + 10];
				glm::vec3 A(vertices[indices[i] * DL] - vertices[indices[i + 1] * DL],
					vertices[indices[i] * DL + 1] - vertices[indices[i + 1] * DL + 1],
					vertices[indices[i] * DL + 2] - vertices[indices[i + 1] * DL + 2]);
				glm::vec3 B(vertices[indices[i + 2] * DL] - vertices[indices[i + 1] * DL],
					vertices[indices[i + 2] * DL + 1] - vertices[indices[i + 1] * DL + 1],
					vertices[indices[i + 2] * DL + 2] - vertices[indices[i + 1] * DL + 2]);
				glm::vec3 C = glm::cross(A, B);
				C = glm::vec3(C.x * znak, C.y * znak, C.z * znak);
				//Uzupelnianie
				vertices[indices[i] * DL + 8] = C.x;
				vertices[indices[i] * DL + 9] = C.y;
				vertices[indices[i] * DL + 10] = C.z;

				vertices[indices[i + 1] * DL + 8] = C.x;
				vertices[indices[i + 1] * DL + 9] = C.y;
				vertices[indices[i + 1] * DL + 10] = C.z;

				vertices[indices[i + 2] * DL + 8] = C.x;
				vertices[indices[i + 2] * DL + 9] = C.y;
				vertices[indices[i + 2] * DL + 10] = C.z;

			}
			//KIEROWCA
			for (int i = 0; i < sizeof(Ty_Indices) / sizeof(int); i = i + 3) {
				//CO TROJKAT
				double znak = Ty_Vertices[Ty_Indices[i] * DL + 10];
				glm::vec3 A(Ty_Vertices[Ty_Indices[i] * DL] - Ty_Vertices[Ty_Indices[i + 1] * DL],
					Ty_Vertices[Ty_Indices[i] * DL + 1] - Ty_Vertices[Ty_Indices[i + 1] * DL + 1],
					Ty_Vertices[Ty_Indices[i] * DL + 2] - Ty_Vertices[Ty_Indices[i + 1] * DL + 2]);
				glm::vec3 B(Ty_Vertices[Ty_Indices[i + 2] * DL] - Ty_Vertices[Ty_Indices[i + 1] * DL],
					Ty_Vertices[Ty_Indices[i + 2] * DL + 1] - Ty_Vertices[Ty_Indices[i + 1] * DL + 1],
					Ty_Vertices[Ty_Indices[i + 2] * DL + 2] - Ty_Vertices[Ty_Indices[i + 1] * DL + 2]);
				glm::vec3 C = glm::cross(A, B);
				C = glm::vec3(C.x * znak, C.y * znak, C.z * znak);
				//Uzupelnianie
				Ty_Vertices[Ty_Indices[i] * DL + 8] = C.x;
				Ty_Vertices[Ty_Indices[i] * DL + 9] = C.y;
				Ty_Vertices[Ty_Indices[i] * DL + 10] = C.z;

				Ty_Vertices[Ty_Indices[i + 1] * DL + 8] = C.x;
				Ty_Vertices[Ty_Indices[i + 1] * DL + 9] = C.y;
				Ty_Vertices[Ty_Indices[i + 1] * DL + 10] = C.z;

				Ty_Vertices[Ty_Indices[i + 2] * DL + 8] = C.x;
				Ty_Vertices[Ty_Indices[i + 2] * DL + 9] = C.y;
				Ty_Vertices[Ty_Indices[i + 2] * DL + 10] = C.z;

			}

			//MONITOR
			for (int i = 0; i < sizeof(Mon_Vertices) / sizeof(int); i = i + 11) {
				//Uzupelnianie
				Mon_Vertices[i + 8] = zmienne.Os_zegarow.x;
				Mon_Vertices[i + 9] = zmienne.Os_zegarow.y;
				Mon_Vertices[i + 10] = zmienne.Os_zegarow.z;
			}
			//"ZEGAR1"
			for (int i = 0; i < sizeof(Zeg1Vertices) / sizeof(int); i = i + 11) {
				//Uzupelnianie
				Zeg1Vertices[i + 8] = zmienne.Os_zegarow.x;
				Zeg1Vertices[i + 9] = zmienne.Os_zegarow.y;
				Zeg1Vertices[i + 10] = zmienne.Os_zegarow.z;
			}
			//"ZEGAR2"
			for (int i = 0; i < sizeof(Zeg2Vertices) / sizeof(int); i = i + 11) {
				//Uzupelnianie
				Zeg2Vertices[i + 8] = zmienne.Os_zegarow.x;
				Zeg2Vertices[i + 9] = zmienne.Os_zegarow.y;
				Zeg2Vertices[i + 10] = zmienne.Os_zegarow.z;
			}
			//"ZEGAR3"
			for (int i = 0; i < sizeof(Zeg3Vertices) / sizeof(int); i = i + 11) {
				//Uzupelnianie
				Zeg3Vertices[i + 8] = zmienne.Os_zegarow.x;
				Zeg3Vertices[i + 9] = zmienne.Os_zegarow.y;
				Zeg3Vertices[i + 10] = zmienne.Os_zegarow.z;
			}
			//"ZEGAR4"
			for (int i = 0; i < sizeof(Zeg4Vertices) / sizeof(int); i = i + 11) {
				//Uzupelnianie
				Zeg4Vertices[i + 8] = zmienne.Os_zegarow.x;
				Zeg4Vertices[i + 9] = zmienne.Os_zegarow.y;
				Zeg4Vertices[i + 10] = zmienne.Os_zegarow.z;
			}

		}

	}
	//KONIEC MODYFIKACJI TABLIC V/I
	Shader shaderProgram("default.vert", "default.frag");

	
	VAO VAO1;
	VAO1.Bind();

	VBO VBO1(vertices, sizeof(vertices));
	EBO EBO1(indices, sizeof(indices));

	//Teksturowo:
	VAO1.LinkAttrib(VBO1, 0, 3, GL_FLOAT, 11 * sizeof(float), (void*)0);
	VAO1.LinkAttrib(VBO1, 1, 3, GL_FLOAT, 11 * sizeof(float), (void*)(3 * sizeof(float)));
	VAO1.LinkAttrib(VBO1, 2, 2, GL_FLOAT, 11 * sizeof(float), (void*)(6 * sizeof(float)));
	VAO1.LinkAttrib(VBO1, 3, 3, GL_FLOAT, 11 * sizeof(float), (void*)(8 * sizeof(float)));
	//

	/*VAO1.LinkVBO(VBO1, 0);*/

	VAO1.Unbind(); VBO1.Unbind(); EBO1.Unbind();

	Texture tekstura1("Skladanka.png", GL_TEXTURE_2D, GL_TEXTURE0, GL_RGBA, GL_UNSIGNED_BYTE);
	glBindTexture(GL_TEXTURE_2D, tekstura1.ID);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);

	Texture tekstura2("Skladanka.png", GL_TEXTURE_2D, GL_TEXTURE1, GL_RGBA, GL_UNSIGNED_BYTE);
	glBindTexture(GL_TEXTURE_2D, tekstura2.ID);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);


	tekstura1.texUnit(shaderProgram, "texture1", 0);
	tekstura2.texUnit(shaderProgram, "texture2", 1);

	//DANE NA MONITORZE POJAZDU
	Shader Mon_Program("default.vert", "default.frag");
	
	VAO VAO_Mon;
	VAO_Mon.Bind();

	VBO VBO_Mon(Mon_Vertices, sizeof(Mon_Vertices));
	EBO EBO_Mon(Mon_Indices, sizeof(Mon_Indices));

	VAO_Mon.LinkAttrib(VBO_Mon, 0, 3, GL_FLOAT, 11 * sizeof(float), (void*)0);
	VAO_Mon.LinkAttrib(VBO_Mon, 1, 3, GL_FLOAT, 11 * sizeof(float), (void*)(3 * sizeof(float)));
	VAO_Mon.LinkAttrib(VBO_Mon, 2, 2, GL_FLOAT, 11 * sizeof(float), (void*)(6 * sizeof(float)));
	VAO_Mon.LinkAttrib(VBO_Mon, 3, 3, GL_FLOAT, 11 * sizeof(float), (void*)(8 * sizeof(float)));

	VAO_Mon.Unbind();
	VBO_Mon.Unbind();
	EBO_Mon.Unbind();

	//KIEROWCA
	Shader Man_Program("default.vert", "default.frag");

	VAO VAO_Man;
	VAO_Man.Bind();

	VBO VBO_Man(Ty_Vertices, sizeof(Ty_Vertices));
	EBO EBO_Man(Ty_Indices, sizeof(Ty_Indices));

	VAO_Man.LinkAttrib(VBO_Man, 0, 3, GL_FLOAT, 11 * sizeof(float), (void*)0);
	VAO_Man.LinkAttrib(VBO_Man, 1, 3, GL_FLOAT, 11 * sizeof(float), (void*)(3 * sizeof(float)));
	VAO_Man.LinkAttrib(VBO_Man, 2, 2, GL_FLOAT, 11 * sizeof(float), (void*)(6 * sizeof(float)));
	VAO_Man.LinkAttrib(VBO_Man, 3, 3, GL_FLOAT, 11 * sizeof(float), (void*)(8 * sizeof(float)));

	VAO_Man.Unbind();
	VBO_Man.Unbind();
	EBO_Man.Unbind();

	//DANE NA MONITORZE POJAZDU: TARCZA KIERUNKU
	Shader Zeg1_Program("default.vert", "default.frag");

	VAO VAO_Zeg1;
	VAO_Zeg1.Bind();

	VBO VBO_Zeg1(Zeg1Vertices, sizeof(Zeg1Vertices));
	EBO EBO_Zeg1(Zeg1Indices, sizeof(Zeg1Indices));

	VAO_Zeg1.LinkAttrib(VBO_Zeg1, 0, 3, GL_FLOAT, 11 * sizeof(float), (void*)0);
	VAO_Zeg1.LinkAttrib(VBO_Zeg1, 1, 3, GL_FLOAT, 11 * sizeof(float), (void*)(3 * sizeof(float)));
	VAO_Zeg1.LinkAttrib(VBO_Zeg1, 2, 2, GL_FLOAT, 11 * sizeof(float), (void*)(6 * sizeof(float)));
	VAO_Zeg1.LinkAttrib(VBO_Zeg1, 3, 3, GL_FLOAT, 11 * sizeof(float), (void*)(8 * sizeof(float)));

	VAO_Zeg1.Unbind();
	VBO_Zeg1.Unbind();
	EBO_Zeg1.Unbind();

	//DANE NA MONITORZE POJAZDU: TARCZA ENERGII
	Shader Zeg2_Program("default.vert", "default.frag");

	VAO VAO_Zeg2;
	VAO_Zeg2.Bind();

	VBO VBO_Zeg2(Zeg2Vertices, sizeof(Zeg2Vertices));
	EBO EBO_Zeg2(Zeg2Indices, sizeof(Zeg2Indices));

	VAO_Zeg2.LinkAttrib(VBO_Zeg2, 0, 3, GL_FLOAT, 11 * sizeof(float), (void*)0);
	VAO_Zeg2.LinkAttrib(VBO_Zeg2, 1, 3, GL_FLOAT, 11 * sizeof(float), (void*)(3 * sizeof(float)));
	VAO_Zeg2.LinkAttrib(VBO_Zeg2, 2, 2, GL_FLOAT, 11 * sizeof(float), (void*)(6 * sizeof(float)));
	VAO_Zeg2.LinkAttrib(VBO_Zeg2, 3, 3, GL_FLOAT, 11 * sizeof(float), (void*)(8 * sizeof(float)));

	VAO_Zeg2.Unbind();
	VBO_Zeg2.Unbind();
	EBO_Zeg2.Unbind();

	//DANE NA MONITORZE POJAZDU: TARCZA ODLEGLOSCI
	Shader Zeg3_Program("default.vert", "default.frag");

	VAO VAO_Zeg3;
	VAO_Zeg3.Bind();

	VBO VBO_Zeg3(Zeg3Vertices, sizeof(Zeg3Vertices));
	EBO EBO_Zeg3(Zeg3Indices, sizeof(Zeg3Indices));

	VAO_Zeg3.LinkAttrib(VBO_Zeg3, 0, 3, GL_FLOAT, 11 * sizeof(float), (void*)0);
	VAO_Zeg3.LinkAttrib(VBO_Zeg3, 1, 3, GL_FLOAT, 11 * sizeof(float), (void*)(3 * sizeof(float)));
	VAO_Zeg3.LinkAttrib(VBO_Zeg3, 2, 2, GL_FLOAT, 11 * sizeof(float), (void*)(6 * sizeof(float)));
	VAO_Zeg3.LinkAttrib(VBO_Zeg3, 3, 3, GL_FLOAT, 11 * sizeof(float), (void*)(8 * sizeof(float)));

	VAO_Zeg3.Unbind();
	VBO_Zeg3.Unbind();
	EBO_Zeg3.Unbind();

	//DANE NA MONITORZE POJAZDU: TARCZA PREDKOSCI
	Shader Zeg4_Program("default.vert", "default.frag");

	VAO VAO_Zeg4;
	VAO_Zeg4.Bind();

	VBO VBO_Zeg4(Zeg4Vertices, sizeof(Zeg4Vertices));
	EBO EBO_Zeg4(Zeg4Indices, sizeof(Zeg4Indices));

	VAO_Zeg4.LinkAttrib(VBO_Zeg4, 0, 3, GL_FLOAT, 11 * sizeof(float), (void*)0);
	VAO_Zeg4.LinkAttrib(VBO_Zeg4, 1, 3, GL_FLOAT, 11 * sizeof(float), (void*)(3 * sizeof(float)));
	VAO_Zeg4.LinkAttrib(VBO_Zeg4, 2, 2, GL_FLOAT, 11 * sizeof(float), (void*)(6 * sizeof(float)));
	VAO_Zeg4.LinkAttrib(VBO_Zeg4, 3, 3, GL_FLOAT, 11 * sizeof(float), (void*)(8 * sizeof(float)));

	VAO_Zeg4.Unbind();
	VBO_Zeg4.Unbind();
	EBO_Zeg4.Unbind();



	//swiatlo:
	Shader lightShader("light.vert", "light.frag");
	VAO lightVAO;
	lightVAO.Bind();
	VBO lightVBO(lightVertices, sizeof(lightVertices));
	EBO lightEBO(lightIndices, sizeof(lightIndices));
	lightVAO.LinkAttrib(lightVBO, 0, 3, GL_FLOAT, 3 * sizeof(float), (void*)0);
	lightVAO.Unbind();
	lightVBO.Unbind();
	lightEBO.Unbind();

	glm::vec4 lightColor = glm::vec4(1.0f, 1.0f, 1.0f, 1.0f);
	glm::vec3 lightPos = glm::vec3(0.0f, 1.25f, -8.5f);
	glm::mat4 lightModel = glm::mat4(1.0f);
	lightModel = glm::translate(lightModel, lightPos);
	glm::vec3 cubePos = glm::vec3(0.0f, 0.0f, 0.0f);
	glm::mat4 cubeModel = glm::mat4(1.0f);
	cubeModel = glm::translate(cubeModel, cubePos);

	lightShader.Activate();
	glUniformMatrix4fv(glGetUniformLocation(lightShader.ID, "model"), 1, GL_FALSE, glm::value_ptr(lightModel));
	glUniform4f(glGetUniformLocation(lightShader.ID, "lightColor"), lightColor.x, lightColor.y, lightColor.z, lightColor.w);
	shaderProgram.Activate();
	glUniformMatrix4fv(glGetUniformLocation(shaderProgram.ID, "model"), 1, GL_FALSE, glm::value_ptr(cubeModel));
	glUniform4f(glGetUniformLocation(shaderProgram.ID, "lightColor"), lightColor.x, lightColor.y, lightColor.z, lightColor.w);
	glUniform3f(glGetUniformLocation(shaderProgram.ID, "lightPos"), lightPos.x, lightPos.y, lightPos.z);
	
	Mon_Program.Activate();
	glUniformMatrix4fv(glGetUniformLocation(Mon_Program.ID, "model"), 1, GL_FALSE, glm::value_ptr(cubeModel));
	glUniform4f(glGetUniformLocation(Mon_Program.ID, "lightColor"), lightColor.x, lightColor.y, lightColor.z, lightColor.w);
	glUniform3f(glGetUniformLocation(Mon_Program.ID, "lightPos"), lightPos.x, lightPos.y, lightPos.z);
	Man_Program.Activate();
	glUniformMatrix4fv(glGetUniformLocation(Man_Program.ID, "model"), 1, GL_FALSE, glm::value_ptr(cubeModel));
	glUniform4f(glGetUniformLocation(Man_Program.ID, "lightColor"), lightColor.x, lightColor.y, lightColor.z, lightColor.w);
	glUniform3f(glGetUniformLocation(Man_Program.ID, "lightPos"), lightPos.x, lightPos.y, lightPos.z);
	Zeg1_Program.Activate();
	glUniformMatrix4fv(glGetUniformLocation(Zeg1_Program.ID, "model"), 1, GL_FALSE, glm::value_ptr(cubeModel));
	glUniform4f(glGetUniformLocation(Zeg1_Program.ID, "lightColor"), lightColor.x, lightColor.y, lightColor.z, lightColor.w);
	glUniform3f(glGetUniformLocation(Zeg1_Program.ID, "lightPos"), lightPos.x, lightPos.y, lightPos.z);
	Zeg2_Program.Activate();
	glUniformMatrix4fv(glGetUniformLocation(Zeg2_Program.ID, "model"), 1, GL_FALSE, glm::value_ptr(cubeModel));
	glUniform4f(glGetUniformLocation(Zeg2_Program.ID, "lightColor"), lightColor.x, lightColor.y, lightColor.z, lightColor.w);
	glUniform3f(glGetUniformLocation(Zeg2_Program.ID, "lightPos"), lightPos.x, lightPos.y, lightPos.z);
	Zeg3_Program.Activate();
	glUniformMatrix4fv(glGetUniformLocation(Zeg3_Program.ID, "model"), 1, GL_FALSE, glm::value_ptr(cubeModel));
	glUniform4f(glGetUniformLocation(Zeg3_Program.ID, "lightColor"), lightColor.x, lightColor.y, lightColor.z, lightColor.w);
	glUniform3f(glGetUniformLocation(Zeg3_Program.ID, "lightPos"), lightPos.x, lightPos.y, lightPos.z);
	Zeg4_Program.Activate();
	glUniformMatrix4fv(glGetUniformLocation(Zeg4_Program.ID, "model"), 1, GL_FALSE, glm::value_ptr(cubeModel));
	glUniform4f(glGetUniformLocation(Zeg4_Program.ID, "lightColor"), lightColor.x, lightColor.y, lightColor.z, lightColor.w);
	glUniform3f(glGetUniformLocation(Zeg4_Program.ID, "lightPos"), lightPos.x, lightPos.y, lightPos.z);


	//swiatlo 2:
	Shader lightShader2("light2.vert", "light2.frag");
	VAO light2VAO;
	light2VAO.Bind();
	VBO light2VBO(lightVertices2, sizeof(lightVertices2));
	EBO light2EBO(lightIndices2, sizeof(lightIndices2));
	light2VAO.LinkAttrib(light2VBO, 0, 3, GL_FLOAT, 7 * sizeof(float), (void*)0);
	light2VAO.LinkAttrib(light2VBO, 1, 4, GL_FLOAT, 7 * sizeof(float), (void*)(3 * sizeof(float)));
	light2VAO.Unbind();
	light2VBO.Unbind();
	light2EBO.Unbind();

	glm::vec4 light2Color = glm::vec4(0.1f, 0.1f, 1.0f, 1.0f);
	glm::vec3 light2Pos = glm::vec3(0.0f, 0.0f, -23.8f);
	glm::mat4 light2Model = glm::mat4(1.0f);
	light2Model = glm::translate(light2Model, light2Pos);
	glm::vec3 cube2Pos = glm::vec3(0.0f, 0.0f, 0.0f);
	glm::mat4 cube2Model = glm::mat4(1.0f);
	cube2Model = glm::translate(cube2Model, cube2Pos);

	lightShader2.Activate();
	glUniformMatrix4fv(glGetUniformLocation(lightShader2.ID, "model"), 1, GL_FALSE, glm::value_ptr(light2Model));
	glUniform4f(glGetUniformLocation(lightShader2.ID, "lightColor"), light2Color.x, light2Color.y, light2Color.z, light2Color.w);
	shaderProgram.Activate();
	glUniformMatrix4fv(glGetUniformLocation(shaderProgram.ID, "model2"), 1, GL_FALSE, glm::value_ptr(cube2Model));
	glUniform4f(glGetUniformLocation(shaderProgram.ID, "light2Color"), light2Color.x, light2Color.y, light2Color.z, light2Color.w);
	glUniform3f(glGetUniformLocation(shaderProgram.ID, "light2Pos"), light2Pos.x, light2Pos.y, light2Pos.z);
  
	Mon_Program.Activate();
	glUniformMatrix4fv(glGetUniformLocation(Mon_Program.ID, "model2"), 1, GL_FALSE, glm::value_ptr(cube2Model));
	glUniform4f(glGetUniformLocation(Mon_Program.ID, "light2Color"), light2Color.x, light2Color.y, light2Color.z, light2Color.w);
	glUniform3f(glGetUniformLocation(Mon_Program.ID, "light2Pos"), light2Pos.x, light2Pos.y, light2Pos.z);
	Man_Program.Activate();
	glUniformMatrix4fv(glGetUniformLocation(Man_Program.ID, "model2"), 1, GL_FALSE, glm::value_ptr(cube2Model));
	glUniform4f(glGetUniformLocation(Man_Program.ID, "light2Color"), light2Color.x, light2Color.y, light2Color.z, light2Color.w);
	glUniform3f(glGetUniformLocation(Man_Program.ID, "light2Pos"), light2Pos.x, light2Pos.y, light2Pos.z);
	Zeg1_Program.Activate();
	glUniformMatrix4fv(glGetUniformLocation(Zeg1_Program.ID, "model2"), 1, GL_FALSE, glm::value_ptr(cube2Model));
	glUniform4f(glGetUniformLocation(Zeg1_Program.ID, "light2Color"), light2Color.x, light2Color.y, light2Color.z, light2Color.w);
	glUniform3f(glGetUniformLocation(Zeg1_Program.ID, "light2Pos"), light2Pos.x, light2Pos.y, light2Pos.z);
	Zeg2_Program.Activate();
	glUniformMatrix4fv(glGetUniformLocation(Zeg2_Program.ID, "model2"), 1, GL_FALSE, glm::value_ptr(cube2Model));
	glUniform4f(glGetUniformLocation(Zeg2_Program.ID, "light2Color"), light2Color.x, light2Color.y, light2Color.z, light2Color.w);
	glUniform3f(glGetUniformLocation(Zeg2_Program.ID, "light2Pos"), light2Pos.x, light2Pos.y, light2Pos.z);
	Zeg3_Program.Activate();
	glUniformMatrix4fv(glGetUniformLocation(Zeg3_Program.ID, "model2"), 1, GL_FALSE, glm::value_ptr(cube2Model));
	glUniform4f(glGetUniformLocation(Zeg3_Program.ID, "light2Color"), light2Color.x, light2Color.y, light2Color.z, light2Color.w);
	glUniform3f(glGetUniformLocation(Zeg3_Program.ID, "light2Pos"), light2Pos.x, light2Pos.y, light2Pos.z);
	Zeg4_Program.Activate();
	glUniformMatrix4fv(glGetUniformLocation(Zeg4_Program.ID, "model2"), 1, GL_FALSE, glm::value_ptr(cube2Model));
	glUniform4f(glGetUniformLocation(Zeg4_Program.ID, "light2Color"), light2Color.x, light2Color.y, light2Color.z, light2Color.w);
	glUniform3f(glGetUniformLocation(Zeg4_Program.ID, "light2Pos"), light2Pos.x, light2Pos.y, light2Pos.z);

	//Testowe sloneczko:
	Shader BIGlightShader("light.vert", "light.frag");
	VAO BIGlightVAO;
	BIGlightVAO.Bind();
	VBO BIGlightVBO(lightVertices, sizeof(lightVertices));
	EBO BIGlightEBO(lightIndices, sizeof(lightIndices));
	BIGlightVAO.LinkAttrib(BIGlightVBO, 0, 3, GL_FLOAT, 3 * sizeof(float), (void*)0);
	BIGlightVAO.Unbind();
	BIGlightVBO.Unbind();
	BIGlightEBO.Unbind();

	glm::vec4 BIGlightColor = glm::vec4(1.0f, 1.0f, 1.0f, 1.0f);
	glm::vec3 BIGlightPos = glm::vec3(0.0f, 0.0f, 200.0f);
	glm::mat4 BIGlightModel = glm::mat4(1.0f);
	BIGlightModel = glm::translate(BIGlightModel, BIGlightPos);
	glm::vec3 BIGcubePos = glm::vec3(0.0f, 0.0f, 0.0f);
	glm::mat4 BIGcubeModel = glm::mat4(1.0f);
	BIGcubeModel = glm::translate(BIGcubeModel, BIGcubePos);

	BIGlightShader.Activate();
	glUniformMatrix4fv(glGetUniformLocation(BIGlightShader.ID, "model"), 1, GL_FALSE, glm::value_ptr(BIGlightModel));
	glUniform4f(glGetUniformLocation(BIGlightShader.ID, "lightColor"), BIGlightColor.x, BIGlightColor.y, BIGlightColor.z, BIGlightColor.w);
	shaderProgram.Activate();
	glUniformMatrix4fv(glGetUniformLocation(shaderProgram.ID, "modelBIG"), 1, GL_FALSE, glm::value_ptr(BIGcubeModel));
	glUniform4f(glGetUniformLocation(shaderProgram.ID, "BIGlightColor"), BIGlightColor.x, BIGlightColor.y, BIGlightColor.z, BIGlightColor.w);
	glUniform3f(glGetUniformLocation(shaderProgram.ID, "BIGlightPos"), BIGlightPos.x, BIGlightPos.y, BIGlightPos.z);
	
	Mon_Program.Activate();
	glUniformMatrix4fv(glGetUniformLocation(Mon_Program.ID, "modelBIG"), 1, GL_FALSE, glm::value_ptr(BIGcubeModel));
	glUniform4f(glGetUniformLocation(Mon_Program.ID, "BIGlightColor"), BIGlightColor.x, BIGlightColor.y, BIGlightColor.z, BIGlightColor.w);
	glUniform3f(glGetUniformLocation(Mon_Program.ID, "BIGlightPos"), BIGlightPos.x, BIGlightPos.y, BIGlightPos.z);
	Man_Program.Activate();
	glUniformMatrix4fv(glGetUniformLocation(Man_Program.ID, "modelBIG"), 1, GL_FALSE, glm::value_ptr(BIGcubeModel));
	glUniform4f(glGetUniformLocation(Man_Program.ID, "BIGlightColor"), BIGlightColor.x, BIGlightColor.y, BIGlightColor.z, BIGlightColor.w);
	glUniform3f(glGetUniformLocation(Man_Program.ID, "BIGlightPos"), BIGlightPos.x, BIGlightPos.y, BIGlightPos.z);
	Zeg1_Program.Activate();
	glUniformMatrix4fv(glGetUniformLocation(Zeg1_Program.ID, "modelBIG"), 1, GL_FALSE, glm::value_ptr(BIGcubeModel));
	glUniform4f(glGetUniformLocation(Zeg1_Program.ID, "BIGlightColor"), BIGlightColor.x, BIGlightColor.y, BIGlightColor.z, BIGlightColor.w);
	glUniform3f(glGetUniformLocation(Zeg1_Program.ID, "BIGlightPos"), BIGlightPos.x, BIGlightPos.y, BIGlightPos.z);
	Zeg2_Program.Activate();
	glUniformMatrix4fv(glGetUniformLocation(Zeg2_Program.ID, "modelBIG"), 1, GL_FALSE, glm::value_ptr(BIGcubeModel));
	glUniform4f(glGetUniformLocation(Zeg2_Program.ID, "BIGlightColor"), BIGlightColor.x, BIGlightColor.y, BIGlightColor.z, BIGlightColor.w);
	glUniform3f(glGetUniformLocation(Zeg2_Program.ID, "BIGlightPos"), BIGlightPos.x, BIGlightPos.y, BIGlightPos.z);
	Zeg3_Program.Activate();
	glUniformMatrix4fv(glGetUniformLocation(Zeg3_Program.ID, "modelBIG"), 1, GL_FALSE, glm::value_ptr(BIGcubeModel));
	glUniform4f(glGetUniformLocation(Zeg3_Program.ID, "BIGlightColor"), BIGlightColor.x, BIGlightColor.y, BIGlightColor.z, BIGlightColor.w);
	glUniform3f(glGetUniformLocation(Zeg3_Program.ID, "BIGlightPos"), BIGlightPos.x, BIGlightPos.y, BIGlightPos.z);
	Zeg4_Program.Activate();
	glUniformMatrix4fv(glGetUniformLocation(Zeg4_Program.ID, "modelBIG"), 1, GL_FALSE, glm::value_ptr(BIGcubeModel));
	glUniform4f(glGetUniformLocation(Zeg4_Program.ID, "BIGlightColor"), BIGlightColor.x, BIGlightColor.y, BIGlightColor.z, BIGlightColor.w);
	glUniform3f(glGetUniformLocation(Zeg4_Program.ID, "BIGlightPos"), BIGlightPos.x, BIGlightPos.y, BIGlightPos.z);


	//odpychacz centralny:
	Shader pushShader("light.vert", "light.frag");
	VAO pushVAO;
	pushVAO.Bind();
	VBO pushVBO(pushVertices, sizeof(pushVertices));
	EBO pushEBO(pushIndices, sizeof(pushIndices));
	pushVAO.LinkAttrib(pushVBO, 0, 3, GL_FLOAT, 3 * sizeof(float), (void*)0);
	pushVAO.Unbind();
	pushVBO.Unbind();
	pushEBO.Unbind();

	glm::vec4 pushColor = glm::vec4(0.7f, 1.0f, 2.0f, 1.0f);
	glm::vec3 pushPos = glm::vec3(0.0f, -1.1f, -11.0);
	glm::mat4 pushModel = glm::mat4(1.0f);
	pushModel = glm::translate(pushModel, pushPos);
	glm::vec3 cubePCPos = glm::vec3(0.0f, 0.0f, 0.0f);
	glm::mat4 cubePCModel = glm::mat4(1.0f);
	cubePCModel = glm::translate(cubePCModel, cubePCPos);

	pushShader.Activate();
	glUniformMatrix4fv(glGetUniformLocation(pushShader.ID, "model"), 1, GL_FALSE, glm::value_ptr(pushModel));
	glUniform4f(glGetUniformLocation(pushShader.ID, "lightColor"), pushColor.x, pushColor.y, pushColor.z, pushColor.w);
	shaderProgram.Activate();
	glUniformMatrix4fv(glGetUniformLocation(shaderProgram.ID, "model3"), 1, GL_FALSE, glm::value_ptr(cubePCModel));
	glUniform4f(glGetUniformLocation(shaderProgram.ID, "light3Color"), pushColor.x, pushColor.y, pushColor.z, pushColor.w);
	glUniform3f(glGetUniformLocation(shaderProgram.ID, "light3Pos"), pushPos.x, pushPos.y, pushPos.z);
	Mon_Program.Activate();
	glUniformMatrix4fv(glGetUniformLocation(Mon_Program.ID, "model3"), 1, GL_FALSE, glm::value_ptr(cubePCModel));
	glUniform4f(glGetUniformLocation(Mon_Program.ID, "light3Color"), pushColor.x, pushColor.y, pushColor.z, pushColor.w);
	glUniform3f(glGetUniformLocation(Mon_Program.ID, "light3Pos"), pushPos.x, pushPos.y, pushPos.z);
	Man_Program.Activate();
	glUniformMatrix4fv(glGetUniformLocation(Man_Program.ID, "model3"), 1, GL_FALSE, glm::value_ptr(cubePCModel));
	glUniform4f(glGetUniformLocation(Man_Program.ID, "light3Color"), pushColor.x, pushColor.y, pushColor.z, pushColor.w);
	glUniform3f(glGetUniformLocation(Man_Program.ID, "light3Pos"), pushPos.x, pushPos.y, pushPos.z);
	Zeg1_Program.Activate();
	glUniformMatrix4fv(glGetUniformLocation(Zeg1_Program.ID, "model3"), 1, GL_FALSE, glm::value_ptr(cubePCModel));
	glUniform4f(glGetUniformLocation(Zeg1_Program.ID, "light3Color"), pushColor.x, pushColor.y, pushColor.z, pushColor.w);
	glUniform3f(glGetUniformLocation(Zeg1_Program.ID, "light3Pos"), pushPos.x, pushPos.y, pushPos.z);
	Zeg2_Program.Activate();
	glUniformMatrix4fv(glGetUniformLocation(Zeg2_Program.ID, "model3"), 1, GL_FALSE, glm::value_ptr(cubePCModel));
	glUniform4f(glGetUniformLocation(Zeg2_Program.ID, "light3Color"), pushColor.x, pushColor.y, pushColor.z, pushColor.w);
	glUniform3f(glGetUniformLocation(Zeg2_Program.ID, "light3Pos"), pushPos.x, pushPos.y, pushPos.z);
	Zeg3_Program.Activate();
	glUniformMatrix4fv(glGetUniformLocation(Zeg3_Program.ID, "model3"), 1, GL_FALSE, glm::value_ptr(cubePCModel));
	glUniform4f(glGetUniformLocation(Zeg3_Program.ID, "light3Color"), pushColor.x, pushColor.y, pushColor.z, pushColor.w);
	glUniform3f(glGetUniformLocation(Zeg3_Program.ID, "light3Pos"), pushPos.x, pushPos.y, pushPos.z);
	Zeg4_Program.Activate();
	glUniformMatrix4fv(glGetUniformLocation(Zeg4_Program.ID, "model3"), 1, GL_FALSE, glm::value_ptr(cubePCModel));
	glUniform4f(glGetUniformLocation(Zeg4_Program.ID, "light3Color"), pushColor.x, pushColor.y, pushColor.z, pushColor.w);
	glUniform3f(glGetUniformLocation(Zeg4_Program.ID, "light3Pos"), pushPos.x, pushPos.y, pushPos.z);


	//odpychacze boczne:
	Shader KulaShader("light.vert", "light.frag");
	VAO KulaVAO;
	KulaVAO.Bind();
	VBO KulaVBO(KulaVertices, sizeof(KulaVertices));
	EBO KulaEBO(KulaIndices, sizeof(KulaIndices));
	KulaVAO.LinkAttrib(KulaVBO, 0, 3, GL_FLOAT, 3 * sizeof(float), (void*)0);
	KulaVAO.Unbind();
	KulaVBO.Unbind();
	KulaEBO.Unbind();

	glm::vec4 KulaColor = glm::vec4(0.7f, 1.0f, 2.0f, 1.0f);
	glm::vec3 KulaPos = glm::vec3(0.0f, -21.1f, -11.0);
	glm::mat4 KulaModel = glm::mat4(1.0f);
	KulaModel = glm::translate(KulaModel, KulaPos);
	glm::vec3 cubePBPos = glm::vec3(0.0f, 0.0f, 0.0f);
	glm::mat4 cubePBModel = glm::mat4(1.0f);
	cubePBModel = glm::translate(cubePBModel, cubePBPos);

	KulaShader.Activate();
	glUniformMatrix4fv(glGetUniformLocation(KulaShader.ID, "model"), 1, GL_FALSE, glm::value_ptr(KulaModel));
	glUniform4f(glGetUniformLocation(KulaShader.ID, "lightColor"), KulaColor.x, KulaColor.y, KulaColor.z, KulaColor.w);
	shaderProgram.Activate();
	glUniformMatrix4fv(glGetUniformLocation(shaderProgram.ID, "model3"), 1, GL_FALSE, glm::value_ptr(cubePBModel));
	glUniform4f(glGetUniformLocation(shaderProgram.ID, "light3Color"), KulaColor.x, KulaColor.y, KulaColor.z, KulaColor.w);
	glUniform3f(glGetUniformLocation(shaderProgram.ID, "light3Pos"), KulaPos.x, KulaPos.y, KulaPos.z);
	
	Mon_Program.Activate();
	glUniformMatrix4fv(glGetUniformLocation(Mon_Program.ID, "model3"), 1, GL_FALSE, glm::value_ptr(cubePBModel));
	glUniform4f(glGetUniformLocation(Mon_Program.ID, "light3Color"), KulaColor.x, KulaColor.y, KulaColor.z, KulaColor.w);
	glUniform3f(glGetUniformLocation(Mon_Program.ID, "light3Pos"), KulaPos.x, KulaPos.y, KulaPos.z);
	Man_Program.Activate();
	glUniformMatrix4fv(glGetUniformLocation(Man_Program.ID, "model3"), 1, GL_FALSE, glm::value_ptr(cubePBModel));
	glUniform4f(glGetUniformLocation(Man_Program.ID, "light3Color"), KulaColor.x, KulaColor.y, KulaColor.z, KulaColor.w);
	glUniform3f(glGetUniformLocation(Man_Program.ID, "light3Pos"), KulaPos.x, KulaPos.y, KulaPos.z);
	Zeg1_Program.Activate();
	glUniformMatrix4fv(glGetUniformLocation(Zeg1_Program.ID, "model3"), 1, GL_FALSE, glm::value_ptr(cubePBModel));
	glUniform4f(glGetUniformLocation(Zeg1_Program.ID, "light3Color"), KulaColor.x, KulaColor.y, KulaColor.z, KulaColor.w);
	glUniform3f(glGetUniformLocation(Zeg1_Program.ID, "light3Pos"), KulaPos.x, KulaPos.y, KulaPos.z);
	Zeg2_Program.Activate();
	glUniformMatrix4fv(glGetUniformLocation(Zeg2_Program.ID, "model3"), 1, GL_FALSE, glm::value_ptr(cubePBModel));
	glUniform4f(glGetUniformLocation(Zeg2_Program.ID, "light3Color"), KulaColor.x, KulaColor.y, KulaColor.z, KulaColor.w);
	glUniform3f(glGetUniformLocation(Zeg2_Program.ID, "light3Pos"), KulaPos.x, KulaPos.y, KulaPos.z);
	Zeg3_Program.Activate();
	glUniformMatrix4fv(glGetUniformLocation(Zeg3_Program.ID, "model3"), 1, GL_FALSE, glm::value_ptr(cubePBModel));
	glUniform4f(glGetUniformLocation(Zeg3_Program.ID, "light3Color"), KulaColor.x, KulaColor.y, KulaColor.z, KulaColor.w);
	glUniform3f(glGetUniformLocation(Zeg3_Program.ID, "light3Pos"), KulaPos.x, KulaPos.y, KulaPos.z);
	Zeg4_Program.Activate();
	glUniformMatrix4fv(glGetUniformLocation(Zeg4_Program.ID, "model3"), 1, GL_FALSE, glm::value_ptr(cubePBModel));
	glUniform4f(glGetUniformLocation(Zeg4_Program.ID, "light3Color"), KulaColor.x, KulaColor.y, KulaColor.z, KulaColor.w);
	glUniform3f(glGetUniformLocation(Zeg4_Program.ID, "light3Pos"), KulaPos.x, KulaPos.y, KulaPos.z);


	/*std::cout << "\n\nInd" << "\n";
	for (int i = 0; i < sizeof(KulaIndices) / sizeof(int); i++) {
		std::cout << i << "\t" << KulaIndices[i] << "\t" << KulaVertices[3 * KulaIndices[i]] << "\t" << KulaVertices[3 * KulaIndices[i] + 1] << "\t" << KulaVertices[3 * KulaIndices[i] + 2] << "\n";
	}*/


	glEnable(GL_DEPTH_TEST);

	Camera camera(1000, 800, glm::vec3(0.0f, 4.5f, -6.0f));
	float i = 0.0;
	Shader terrainShader("terrain.vert", "terrain.frag");
	TerrainGenerator generator(zmienne);
	
	//Liczenie rozmiaru tablic wierzcholkow
	zmienne.Rozmiar_vertices[0] = sizeof(vertices) / sizeof(float);
	zmienne.Rozmiar_vertices[1] = sizeof(Mon_Vertices) / sizeof(float);
	zmienne.Rozmiar_vertices[2] = sizeof(lightVertices) / sizeof(float);
	zmienne.Rozmiar_vertices[3] = sizeof(lightVertices2) / sizeof(float);
	zmienne.Rozmiar_vertices[4] = sizeof(pushVertices) / sizeof(float);
	zmienne.Rozmiar_vertices[5] = sizeof(KulaVertices) / sizeof(float);
	zmienne.Rozmiar_vertices[6] = sizeof(Zeg1Vertices) / sizeof(float);
	zmienne.Rozmiar_vertices[7] = sizeof(Zeg2Vertices) / sizeof(float);
	zmienne.Rozmiar_vertices[8] = sizeof(Zeg3Vertices) / sizeof(float);
	zmienne.Rozmiar_vertices[9] = sizeof(Zeg4Vertices) / sizeof(float);
	zmienne.Rozmiar_vertices[10] = sizeof(pushVertices_front) / sizeof(float);
	zmienne.Rozmiar_vertices[11] = sizeof(pushVertices_tyl) / sizeof(float);
	zmienne.Rozmiar_vertices[12] = sizeof(Ty_Vertices) / sizeof(float);

	InicjujZmienne1(window, &zmienne, Mon_Vertices);


	//przesuniecie srodka ciezkosci
	zmienne.Biezaca_pozycja = glm::vec3(0.0f, 0.0f, -11.0f);
	Przestaw_0_1_pojazd(&zmienne, -1, Mon_Vertices, vertices, lightVertices, lightVertices2, pushVertices, pushVertices_front, pushVertices_tyl, KulaVertices, Zeg1Vertices, Zeg2Vertices, Zeg3Vertices, Zeg4Vertices, Ty_Vertices);
	zmienne.Biezaca_pozycja = glm::vec3(0.0f, 0.0f, 0.0f);
  
	while (!glfwWindowShouldClose(window))
	{
		processTerrainQueue();

		float kat0 = zmienne.Pojazd_kat;
		AktualizujZmienne1(window, &zmienne, Mon_Vertices, vertices, lightVertices, lightVertices2, pushVertices, pushVertices_front, pushVertices_tyl, KulaVertices, Zeg1Vertices, Zeg2Vertices, Zeg3Vertices, Zeg4Vertices, Ty_Vertices);
		//ZMIENNE ZMIAN KLATKOWYCH
		//if (i > 199.5) i = 0.0;
		//else i = i + 0.5;

		//if (i < 100.5) light2Color = glm::vec4(0.0f, 0.0f, i * 0.02f, 1.0f);
		//else light2Color = glm::vec4(0.0f, 0.0f, 2.0f - (i - 100.0f) * 0.02f, 1.0f);

		////AKTUALIZACJA DANYCH
		//light2Model = glm::translate(light2Model, -light2Pos);
		////light2Pos = glm::rotate(light2Pos, glm::radians(0.25f), glm::normalize(glm::vec3(1.0f, 0.0f, 0.0f)));
		//light2Model = glm::translate(light2Model, light2Pos);
		//cube2Model = glm::translate(cube2Model, cube2Pos);

		//CZYSZCZENIE TLA
		glClearColor(0.f, 1.00f, 0.f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
		
		camera.Inputs(window, float(fmod((zmienne.Pojazd_kat - kat0),(2.0f * M_PI))));
		camera.updateMatrix(45.0f, 0.1f, 100.0f);


		//POJAZD
		shaderProgram.Activate();

		VAO1.Bind();
		VBO1 = VBO(vertices, sizeof(vertices));
		EBO1 = EBO(indices, sizeof(indices));
		VAO1.LinkAttrib(VBO1, 0, 3, GL_FLOAT, 11 * sizeof(float), (void*)0);
		VAO1.LinkAttrib(VBO1, 1, 3, GL_FLOAT, 11 * sizeof(float), (void*)(3 * sizeof(float)));
		VAO1.LinkAttrib(VBO1, 2, 2, GL_FLOAT, 11 * sizeof(float), (void*)(6 * sizeof(float)));
		VAO1.LinkAttrib(VBO1, 3, 3, GL_FLOAT, 11 * sizeof(float), (void*)(8 * sizeof(float)));
		VAO1.Unbind();
		VBO1.Unbind();
		EBO1.Unbind();

		glUniform4f(glGetUniformLocation(shaderProgram.ID, "lightColor"), lightColor.x, lightColor.y, lightColor.z, lightColor.w);
		glUniformMatrix4fv(glGetUniformLocation(shaderProgram.ID, "model2"), 1, GL_FALSE, glm::value_ptr(cube2Model));
		glUniform4f(glGetUniformLocation(shaderProgram.ID, "light2Color"), light2Color.x, light2Color.y, light2Color.z, light2Color.w);
		glUniform3f(glGetUniformLocation(shaderProgram.ID, "light2Pos"), light2Pos.x, light2Pos.y, light2Pos.z);

		//Teksturowo:
		tekstura1.Bind();
		tekstura2.Bind();

		glUniform3f(glGetUniformLocation(shaderProgram.ID, "camPos"), camera.Position.x, camera.Position.y, camera.Position.z);
		camera.Matrix(shaderProgram, "camMatrix");

		VAO1.Bind();
		glDrawElements(GL_TRIANGLES, sizeof(indices) / sizeof(int), GL_UNSIGNED_INT, 0);

		//KIEROWCA
		Mon_Program.Activate();

		VAO_Man.Bind();
		VBO_Man = VBO(Ty_Vertices, sizeof(Ty_Vertices));
		EBO_Man = EBO(Ty_Indices, sizeof(Ty_Indices));
		VAO_Man.LinkAttrib(VBO_Man, 0, 3, GL_FLOAT, 11 * sizeof(float), (void*)0);
		VAO_Man.LinkAttrib(VBO_Man, 1, 3, GL_FLOAT, 11 * sizeof(float), (void*)(3 * sizeof(float)));
		VAO_Man.LinkAttrib(VBO_Man, 2, 2, GL_FLOAT, 11 * sizeof(float), (void*)(6 * sizeof(float)));
		VAO_Man.LinkAttrib(VBO_Man, 3, 3, GL_FLOAT, 11 * sizeof(float), (void*)(8 * sizeof(float)));
		VAO_Man.Unbind();
		VBO_Man.Unbind();
		EBO_Man.Unbind();

		glUniform4f(glGetUniformLocation(Man_Program.ID, "lightColor"), lightColor.x, lightColor.y, lightColor.z, lightColor.w);
		glUniformMatrix4fv(glGetUniformLocation(Man_Program.ID, "model2"), 1, GL_FALSE, glm::value_ptr(cube2Model));
		glUniform4f(glGetUniformLocation(Man_Program.ID, "light2Color"), light2Color.x, light2Color.y, light2Color.z, light2Color.w);
		glUniform3f(glGetUniformLocation(Man_Program.ID, "light2Pos"), light2Pos.x, light2Pos.y, light2Pos.z);

		tekstura1.Bind();
		tekstura2.Bind();

		glUniform3f(glGetUniformLocation(Man_Program.ID, "camPos"), camera.Position.x, camera.Position.y, camera.Position.z);
		camera.Matrix(Man_Program, "camMatrix");

		VAO_Man.Bind();
		glDrawElements(GL_TRIANGLES, sizeof(Ty_Indices) / sizeof(int), GL_UNSIGNED_INT, 0);


		//MONITOR-DANE
		Mon_Program.Activate();

		VAO_Mon.Bind();
		VBO_Mon = VBO(Mon_Vertices, sizeof(Mon_Vertices));
		EBO_Mon = EBO(Mon_Indices, sizeof(Mon_Indices));
		VAO_Mon.LinkAttrib(VBO_Mon, 0, 3, GL_FLOAT, 11 * sizeof(float), (void*)0);
		VAO_Mon.LinkAttrib(VBO_Mon, 1, 3, GL_FLOAT, 11 * sizeof(float), (void*)(3 * sizeof(float)));
		VAO_Mon.LinkAttrib(VBO_Mon, 2, 2, GL_FLOAT, 11 * sizeof(float), (void*)(6 * sizeof(float)));
		VAO_Mon.LinkAttrib(VBO_Mon, 3, 3, GL_FLOAT, 11 * sizeof(float), (void*)(8 * sizeof(float)));
		VAO_Mon.Unbind();
		VBO_Mon.Unbind();
		EBO_Mon.Unbind();

		glUniform4f(glGetUniformLocation(Mon_Program.ID, "lightColor"), lightColor.x, lightColor.y, lightColor.z, lightColor.w);
		glUniformMatrix4fv(glGetUniformLocation(Mon_Program.ID, "model2"), 1, GL_FALSE, glm::value_ptr(cube2Model));
		glUniform4f(glGetUniformLocation(Mon_Program.ID, "light2Color"), light2Color.x, light2Color.y, light2Color.z, light2Color.w);
		glUniform3f(glGetUniformLocation(Mon_Program.ID, "light2Pos"), light2Pos.x, light2Pos.y, light2Pos.z);

		tekstura1.Bind();
		tekstura2.Bind();

		glUniform3f(glGetUniformLocation(Mon_Program.ID, "camPos"), camera.Position.x, camera.Position.y, camera.Position.z);
		camera.Matrix(Mon_Program, "camMatrix");

		VAO_Mon.Bind();
		glDrawElements(GL_TRIANGLES, sizeof(Mon_Indices) / sizeof(int), GL_UNSIGNED_INT, 0);

		//MONITOR DANE: WSKAZNIK KIERUNKU
		Zeg1_Program.Activate();

		VAO_Zeg1.Bind();
		VBO_Zeg1 = VBO(Zeg1Vertices, sizeof(Zeg1Vertices));
		EBO_Zeg1 = EBO(Zeg1Indices, sizeof(Zeg1Indices));
		VAO_Zeg1.LinkAttrib(VBO_Zeg1, 0, 3, GL_FLOAT, 11 * sizeof(float), (void*)0);
		VAO_Zeg1.LinkAttrib(VBO_Zeg1, 1, 3, GL_FLOAT, 11 * sizeof(float), (void*)(3 * sizeof(float)));
		VAO_Zeg1.LinkAttrib(VBO_Zeg1, 2, 2, GL_FLOAT, 11 * sizeof(float), (void*)(6 * sizeof(float)));
		VAO_Zeg1.LinkAttrib(VBO_Zeg1, 3, 3, GL_FLOAT, 11 * sizeof(float), (void*)(8 * sizeof(float)));
		VAO_Zeg1.Unbind();
		VBO_Zeg1.Unbind();
		EBO_Zeg1.Unbind();

		glUniform4f(glGetUniformLocation(Zeg1_Program.ID, "lightColor"), lightColor.x, lightColor.y, lightColor.z, lightColor.w);
		glUniformMatrix4fv(glGetUniformLocation(Zeg1_Program.ID, "model2"), 1, GL_FALSE, glm::value_ptr(cube2Model));
		glUniform4f(glGetUniformLocation(Zeg1_Program.ID, "light2Color"), light2Color.x, light2Color.y, light2Color.z, light2Color.w);
		glUniform3f(glGetUniformLocation(Zeg1_Program.ID, "light2Pos"), light2Pos.x, light2Pos.y, light2Pos.z);

		tekstura1.Bind();
		tekstura2.Bind();

		glUniform3f(glGetUniformLocation(Zeg1_Program.ID, "camPos"), camera.Position.x, camera.Position.y, camera.Position.z);
		camera.Matrix(Zeg1_Program, "camMatrix");

		VAO_Zeg1.Bind();
		glDrawElements(GL_TRIANGLES, sizeof(Zeg1Indices) / sizeof(int), GL_UNSIGNED_INT, 0);

		//MONITOR DANE: WSKAZNIK ENERGII
		Zeg2_Program.Activate();

		VAO_Zeg2.Bind();
		VBO_Zeg2 = VBO(Zeg2Vertices, sizeof(Zeg2Vertices));
		EBO_Zeg2 = EBO(Zeg2Indices, sizeof(Zeg2Indices));
		VAO_Zeg2.LinkAttrib(VBO_Zeg2, 0, 3, GL_FLOAT, 11 * sizeof(float), (void*)0);
		VAO_Zeg2.LinkAttrib(VBO_Zeg2, 1, 3, GL_FLOAT, 11 * sizeof(float), (void*)(3 * sizeof(float)));
		VAO_Zeg2.LinkAttrib(VBO_Zeg2, 2, 2, GL_FLOAT, 11 * sizeof(float), (void*)(6 * sizeof(float)));
		VAO_Zeg2.LinkAttrib(VBO_Zeg2, 3, 3, GL_FLOAT, 11 * sizeof(float), (void*)(8 * sizeof(float)));
		VAO_Zeg2.Unbind();
		VBO_Zeg2.Unbind();
		EBO_Zeg2.Unbind();

		glUniform4f(glGetUniformLocation(Zeg2_Program.ID, "lightColor"), lightColor.x, lightColor.y, lightColor.z, lightColor.w);
		glUniformMatrix4fv(glGetUniformLocation(Zeg2_Program.ID, "model2"), 1, GL_FALSE, glm::value_ptr(cube2Model));
		glUniform4f(glGetUniformLocation(Zeg2_Program.ID, "light2Color"), light2Color.x, light2Color.y, light2Color.z, light2Color.w);
		glUniform3f(glGetUniformLocation(Zeg2_Program.ID, "light2Pos"), light2Pos.x, light2Pos.y, light2Pos.z);

		tekstura1.Bind();
		tekstura2.Bind();

		glUniform3f(glGetUniformLocation(Zeg2_Program.ID, "camPos"), camera.Position.x, camera.Position.y, camera.Position.z);
		camera.Matrix(Zeg2_Program, "camMatrix");

		VAO_Zeg2.Bind();
		glDrawElements(GL_TRIANGLES, sizeof(Zeg2Indices) / sizeof(int), GL_UNSIGNED_INT, 0);

		//MONITOR DANE: WSKAZNIK ODLEGLOSCI
		Zeg3_Program.Activate();

		VAO_Zeg3.Bind();
		VBO_Zeg3 = VBO(Zeg3Vertices, sizeof(Zeg3Vertices));
		EBO_Zeg3 = EBO(Zeg3Indices, sizeof(Zeg3Indices));
		VAO_Zeg3.LinkAttrib(VBO_Zeg3, 0, 3, GL_FLOAT, 11 * sizeof(float), (void*)0);
		VAO_Zeg3.LinkAttrib(VBO_Zeg3, 1, 3, GL_FLOAT, 11 * sizeof(float), (void*)(3 * sizeof(float)));
		VAO_Zeg3.LinkAttrib(VBO_Zeg3, 2, 2, GL_FLOAT, 11 * sizeof(float), (void*)(6 * sizeof(float)));
		VAO_Zeg3.LinkAttrib(VBO_Zeg3, 3, 3, GL_FLOAT, 11 * sizeof(float), (void*)(8 * sizeof(float)));
		VAO_Zeg3.Unbind();
		VBO_Zeg3.Unbind();
		EBO_Zeg3.Unbind();

		glUniform4f(glGetUniformLocation(Zeg3_Program.ID, "lightColor"), lightColor.x, lightColor.y, lightColor.z, lightColor.w);
		glUniformMatrix4fv(glGetUniformLocation(Zeg3_Program.ID, "model2"), 1, GL_FALSE, glm::value_ptr(cube2Model));
		glUniform4f(glGetUniformLocation(Zeg3_Program.ID, "light2Color"), light2Color.x, light2Color.y, light2Color.z, light2Color.w);
		glUniform3f(glGetUniformLocation(Zeg3_Program.ID, "light2Pos"), light2Pos.x, light2Pos.y, light2Pos.z);

		tekstura1.Bind();
		tekstura2.Bind();

		glUniform3f(glGetUniformLocation(Zeg3_Program.ID, "camPos"), camera.Position.x, camera.Position.y, camera.Position.z);
		camera.Matrix(Zeg3_Program, "camMatrix");

		VAO_Zeg3.Bind();
		glDrawElements(GL_TRIANGLES, sizeof(Zeg3Indices) / sizeof(int), GL_UNSIGNED_INT, 0);

		//MONITOR DANE: WSKAZNIK PREDKOSCI
		Zeg4_Program.Activate();

		VAO_Zeg4.Bind();
		VBO_Zeg4 = VBO(Zeg4Vertices, sizeof(Zeg4Vertices));
		EBO_Zeg4 = EBO(Zeg4Indices, sizeof(Zeg4Indices));
		VAO_Zeg4.LinkAttrib(VBO_Zeg4, 0, 3, GL_FLOAT, 11 * sizeof(float), (void*)0);
		VAO_Zeg4.LinkAttrib(VBO_Zeg4, 1, 3, GL_FLOAT, 11 * sizeof(float), (void*)(3 * sizeof(float)));
		VAO_Zeg4.LinkAttrib(VBO_Zeg4, 2, 2, GL_FLOAT, 11 * sizeof(float), (void*)(6 * sizeof(float)));
		VAO_Zeg4.LinkAttrib(VBO_Zeg4, 3, 3, GL_FLOAT, 11 * sizeof(float), (void*)(8 * sizeof(float)));
		VAO_Zeg4.Unbind();
		VBO_Zeg4.Unbind();
		EBO_Zeg4.Unbind();

		glUniform4f(glGetUniformLocation(Zeg4_Program.ID, "lightColor"), lightColor.x, lightColor.y, lightColor.z, lightColor.w);
		glUniformMatrix4fv(glGetUniformLocation(Zeg4_Program.ID, "model2"), 1, GL_FALSE, glm::value_ptr(cube2Model));
		glUniform4f(glGetUniformLocation(Zeg4_Program.ID, "light2Color"), light2Color.x, light2Color.y, light2Color.z, light2Color.w);
		glUniform3f(glGetUniformLocation(Zeg4_Program.ID, "light2Pos"), light2Pos.x, light2Pos.y, light2Pos.z);

		tekstura1.Bind();
		tekstura2.Bind();

		glUniform3f(glGetUniformLocation(Zeg4_Program.ID, "camPos"), camera.Position.x, camera.Position.y, camera.Position.z);
		camera.Matrix(Zeg4_Program, "camMatrix");

		VAO_Zeg4.Bind();
		glDrawElements(GL_TRIANGLES, sizeof(Zeg4Indices) / sizeof(int), GL_UNSIGNED_INT, 0);

		//LAMPA
		lightShader.Activate();

		lightVAO.Bind();
		lightVBO = VBO(lightVertices, sizeof(lightVertices));
		lightEBO = EBO(lightIndices, sizeof(lightIndices));
		lightVAO.LinkAttrib(lightVBO, 0, 3, GL_FLOAT, 3 * sizeof(float), (void*)0);
		lightVAO.Unbind();
		lightVBO.Unbind();
		lightEBO.Unbind();

		lightPos = glm::rotate(glm::vec3(0.0f, 1.25f, -8.5f), float(zmienne.Pojazd_kat), glm::vec3(0.0f, 1.0f, 0.0f));
		lightModel = glm::mat4(1.0f);
		lightModel = glm::translate(lightModel, lightPos);
		cubePos = glm::vec3(0.0f, 0.0f, 0.0f);
		cubeModel = glm::mat4(1.0f);
		cubeModel = glm::translate(cubeModel, cubePos);

		glUniformMatrix4fv(glGetUniformLocation(lightShader.ID, "model"), 1, GL_FALSE, glm::value_ptr(lightModel));
		glUniform4f(glGetUniformLocation(lightShader.ID, "lightColor"), lightColor.x, lightColor.y, lightColor.z, lightColor.w);

		camera.Matrix(lightShader, "camMatrix");
		lightVAO.Bind();
		glDrawElements(GL_TRIANGLES, sizeof(lightIndices) / sizeof(int), GL_UNSIGNED_INT, 0);

		//OGIEN SILNIKA
		lightShader2.Activate();

		light2VAO.Bind();
		light2VBO = VBO(lightVertices2, sizeof(lightVertices2));
		light2EBO = EBO(lightIndices2, sizeof(lightIndices2));
		light2VAO.LinkAttrib(light2VBO, 0, 3, GL_FLOAT, 7 * sizeof(float), (void*)0);
		light2VAO.LinkAttrib(light2VBO, 1, 4, GL_FLOAT, 7 * sizeof(float), (void*)(3 * sizeof(float)));
		light2VAO.Unbind();
		light2VBO.Unbind();
		light2EBO.Unbind();

		light2Color = glm::vec4(0.0f, 0.33f, 0.33f + zmienne.Predkosc / MAX_PREDKOSC * (1.0f), 1.0f);
		light2Pos = glm::rotate(glm::vec3(0.0f, 0.0f, -23.8f), float(zmienne.Pojazd_kat), glm::vec3(0.0f, 1.0f, 0.0f));
		light2Model = glm::mat4(1.0f);
		light2Model = glm::translate(light2Model, light2Pos);
		cube2Pos = glm::vec3(0.0f, 0.0f, 0.0f);
		cube2Model = glm::mat4(1.0f);
		cube2Model = glm::translate(cube2Model, cube2Pos);

		glUniformMatrix4fv(glGetUniformLocation(lightShader2.ID, "model"), 1, GL_FALSE, glm::value_ptr(light2Model));
		glUniform4f(glGetUniformLocation(lightShader2.ID, "lightColor"), light2Color.x, light2Color.y, light2Color.z, light2Color.w);

		camera.Matrix(lightShader2, "camMatrix");
		light2VAO.Bind();
		glDrawElements(GL_TRIANGLES, sizeof(lightIndices) / sizeof(int), GL_UNSIGNED_INT, 0);
		light2VAO.Unbind();


		//ODPYCHACZE CENTRALNE
		pushShader.Activate();

			//CENTRUM
		pushVAO.Bind();
		pushVBO = VBO(pushVertices, sizeof(pushVertices));
		pushVAO.LinkAttrib(pushVBO, 0, 3, GL_FLOAT, 3 * sizeof(float), (void*)0);
		pushVAO.Unbind();
		pushVBO.Unbind();
		pushPos = glm::rotate(glm::vec3(0.0f, -1.1f, -11.0), float(zmienne.Pojazd_kat), glm::vec3(0.0f, 1.0f, 0.0f));
		pushModel = glm::mat4(1.0f);
		pushModel = glm::translate(pushModel, pushPos);
		cubePCPos = glm::vec3(0.0f, 0.0f, 0.0f);
		cubePCModel = glm::mat4(1.0f);
		cubePCModel = glm::translate(cubePCModel, cubePCPos);
		glUniformMatrix4fv(glGetUniformLocation(pushShader.ID, "model"), 1, GL_FALSE, glm::value_ptr(pushModel));

		camera.Matrix(pushShader, "camMatrix");
		pushVAO.Bind();
		glDrawElements(GL_TRIANGLES, sizeof(pushIndices) / sizeof(int), GL_UNSIGNED_INT, 0);

			//FRONT
		pushVAO.Bind();
		pushVBO = VBO(pushVertices_front, sizeof(pushVertices_front));
		pushVAO.LinkAttrib(pushVBO, 0, 3, GL_FLOAT, 3 * sizeof(float), (void*)0);
		pushVAO.Unbind();
		pushVBO.Unbind();
		for (int i = 0; i < 6; i++) {
			pushPos = glm::rotate(glm::vec3(0.0f, -0.5f, 6.5f - 2.5f * float(i)), float(zmienne.Pojazd_kat), glm::vec3(0.0f, 1.0f, 0.0f));
			pushModel = glm::mat4(1.0f);
			pushModel = glm::translate(pushModel, pushPos);
			cubePCPos = glm::vec3(0.0f, 0.0f, 0.0f);
			cubePCModel = glm::mat4(1.0f);
			cubePCModel = glm::translate(cubePCModel, cubePCPos);
			glUniformMatrix4fv(glGetUniformLocation(pushShader.ID, "model"), 1, GL_FALSE, glm::value_ptr(pushModel));

			camera.Matrix(pushShader, "camMatrix");
			pushVAO.Bind();
			glDrawElements(GL_TRIANGLES, sizeof(pushIndices) / sizeof(int), GL_UNSIGNED_INT, 0);
		}
			//TYL
		pushVAO.Bind();
		pushVBO = VBO(pushVertices_tyl, sizeof(pushVertices_tyl));
		pushVAO.LinkAttrib(pushVBO, 0, 3, GL_FLOAT, 3 * sizeof(float), (void*)0);
		pushVAO.Unbind();
		pushVBO.Unbind();
		pushPos = glm::rotate(glm::vec3(0.0f, -1.1f, -19.0), float(zmienne.Pojazd_kat), glm::vec3(0.0f, 1.0f, 0.0f));
		pushModel = glm::mat4(1.0f);
		pushModel = glm::translate(pushModel, pushPos);
		cubePCPos = glm::vec3(0.0f, 0.0f, 0.0f);
		cubePCModel = glm::mat4(1.0f);
		cubePCModel = glm::translate(cubePCModel, cubePCPos);
		glUniformMatrix4fv(glGetUniformLocation(pushShader.ID, "model"), 1, GL_FALSE, glm::value_ptr(pushModel));

		camera.Matrix(pushShader, "camMatrix");
		pushVAO.Bind();
		glDrawElements(GL_TRIANGLES, sizeof(pushIndices) / sizeof(int), GL_UNSIGNED_INT, 0);
		//KONIEC ODPYCHACZY CENTRALNYCH

		//ODPYCHACZE BOCZNE
		KulaShader.Activate();

			//LEWA
		KulaVAO.Bind();
		KulaVBO = VBO(KulaVertices, sizeof(KulaVertices));
		KulaVAO.LinkAttrib(KulaVBO, 0, 3, GL_FLOAT, 3 * sizeof(float), (void*)0);
		KulaVAO.Unbind();
		KulaVBO.Unbind();
		KulaPos = glm::rotate(glm::vec3(-4.0f, -1.65f, -21.0), float(zmienne.Pojazd_kat), glm::vec3(0.0f, 1.0f, 0.0f));
		KulaModel = glm::mat4(1.0f);
		KulaModel = glm::translate(KulaModel, KulaPos);
		cubePBPos = glm::vec3(0.0f, 0.0f, 0.0f);
		cubePBModel = glm::mat4(1.0f);
		cubePBModel = glm::translate(cubePBModel, cubePBPos);
		glUniformMatrix4fv(glGetUniformLocation(KulaShader.ID, "model"), 1, GL_FALSE, glm::value_ptr(KulaModel));

		camera.Matrix(KulaShader, "camMatrix");
		KulaVAO.Bind();
		glDrawElements(GL_TRIANGLES, sizeof(KulaIndices) / sizeof(int), GL_UNSIGNED_INT, 0);
			//PRAWA
		KulaPos = glm::rotate(glm::vec3(4.0f, -1.65f, -21.0), float(zmienne.Pojazd_kat), glm::vec3(0.0f, 1.0f, 0.0f));
		KulaModel = glm::mat4(1.0f);
		KulaModel = glm::translate(KulaModel, KulaPos);
		cubePBPos = glm::vec3(0.0f, 0.0f, 0.0f);
		cubePBModel = glm::mat4(1.0f);
		cubePBModel = glm::translate(cubePBModel, cubePBPos);
		glUniformMatrix4fv(glGetUniformLocation(KulaShader.ID, "model"), 1, GL_FALSE, glm::value_ptr(KulaModel));
		
		camera.Matrix(KulaShader, "camMatrix");
		KulaVAO.Bind();
		glDrawElements(GL_TRIANGLES, sizeof(KulaIndices) / sizeof(int), GL_UNSIGNED_INT, 0);
		//KONIEC ODPYCHACZE BOCZNE

		terrainShader.Activate();
		glUniformMatrix4fv(glGetUniformLocation(terrainShader.ID, "lightModel[0]"), 1, GL_FALSE, glm::value_ptr(cubeModel));
		glUniform4f(glGetUniformLocation(terrainShader.ID, "lightColor[0]"), lightColor.x, lightColor.y, lightColor.z, lightColor.w);
		glUniform3f(glGetUniformLocation(terrainShader.ID, "lightPos[0]"), lightPos.x, lightPos.y, lightPos.z);
		glUniformMatrix4fv(glGetUniformLocation(terrainShader.ID, "lightModel[1]"), 1, GL_FALSE, glm::value_ptr(cube2Model));
		glUniform4f(glGetUniformLocation(terrainShader.ID, "lightColor[1]"), light2Color.x, light2Color.y, light2Color.z, light2Color.w);
		glUniform3f(glGetUniformLocation(terrainShader.ID, "lightPos[1]"), light2Pos.x, light2Pos.y, light2Pos.z);
		glUniformMatrix4fv(glGetUniformLocation(terrainShader.ID, "lightModel[2]"), 1, GL_FALSE, glm::value_ptr(cubePCModel));
		glUniform4f(glGetUniformLocation(terrainShader.ID, "lightColor[2]"), pushColor.x, pushColor.y, pushColor.z, pushColor.w);
		glUniform3f(glGetUniformLocation(terrainShader.ID, "lightPos[2]"), pushPos.x, pushPos.y, pushPos.z);
		glUniformMatrix4fv(glGetUniformLocation(terrainShader.ID, "lightModel[3]"), 1, GL_FALSE, glm::value_ptr(BIGcubeModel));
		glUniform4f(glGetUniformLocation(terrainShader.ID, "lightColor[3]"), BIGlightColor.x, BIGlightColor.y, BIGlightColor.z, BIGlightColor.w);
		glUniform3f(glGetUniformLocation(terrainShader.ID, "lightPos[3]"), BIGlightPos.x, BIGlightPos.y, BIGlightPos.z);
		camera.Matrix(terrainShader, "camMatrix");
		
		if (glfwGetKey(window, GLFW_KEY_P) == GLFW_PRESS) {
			glPolygonMode( GL_FRONT_AND_BACK, GL_LINE );
		}
		generator.Draw(terrainShader);
		glPolygonMode( GL_FRONT_AND_BACK, GL_FILL );

		glfwSwapBuffers(window);
		glfwPollEvents();
	}


	VAO1.Delete();
	VBO1.Delete();
	EBO1.Delete();
	lightVAO.Delete();
	lightVBO.Delete();
	lightEBO.Delete();
	light2VAO.Delete();
	light2VBO.Delete();
	light2EBO.Delete();
	pushVAO.Delete();
	pushVBO.Delete();
	pushEBO.Delete();
	KulaVAO.Delete();
	KulaVBO.Delete();
	KulaEBO.Delete();
	VAO_Mon.Delete();
	VBO_Mon.Delete();
	EBO_Mon.Delete();
	VAO_Man.Delete();
	VBO_Man.Delete();
	EBO_Man.Delete();
	VAO_Zeg1.Delete();
	VBO_Zeg1.Delete();
	EBO_Zeg1.Delete();
	VAO_Zeg2.Delete();
	VBO_Zeg2.Delete();
	EBO_Zeg2.Delete();
	VAO_Zeg3.Delete();
	VBO_Zeg3.Delete();
	EBO_Zeg3.Delete();
	VAO_Zeg4.Delete();
	VBO_Zeg4.Delete();
	EBO_Zeg4.Delete();

	//Teksturowo:
	tekstura1.Delete();
	tekstura2.Delete();
	//
	shaderProgram.Delete();
	lightShader.Delete();
	lightShader2.Delete();
	pushShader.Delete();
	KulaShader.Delete();
	Mon_Program.Delete();
	Man_Program.Delete();
	Zeg1_Program.Delete();
	Zeg2_Program.Delete();
	Zeg3_Program.Delete();
	Zeg4_Program.Delete();

	glfwDestroyWindow(window);
	glfwTerminate();
	return 0;
}